
ship_controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004454  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000128  080045f4  080045f4  000145f4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800471c  0800471c  0001471c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08004720  08004720  00014720  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000000c8  20000000  08004724  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  000200c8  2**0
                  CONTENTS
  7 .bss          00000250  200000c8  200000c8  000200c8  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20000318  20000318  000200c8  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  000200c8  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001696b  00000000  00000000  000200f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00002894  00000000  00000000  00036a63  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00007b6b  00000000  00000000  000392f7  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 000009c0  00000000  00000000  00040e68  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000e08  00000000  00000000  00041828  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00005b57  00000000  00000000  00042630  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    0000401b  00000000  00000000  00048187  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  0004c1a2  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000225c  00000000  00000000  0004c220  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200000c8 	.word	0x200000c8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080045dc 	.word	0x080045dc

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200000cc 	.word	0x200000cc
 80001dc:	080045dc 	.word	0x080045dc

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ce:	f1a4 0401 	sub.w	r4, r4, #1
 80003d2:	d1e9      	bne.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f092 0f00 	teq	r2, #0
 800057a:	bf14      	ite	ne
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	4770      	bxeq	lr
 8000582:	b530      	push	{r4, r5, lr}
 8000584:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000588:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800058c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000590:	e720      	b.n	80003d4 <__adddf3+0x138>
 8000592:	bf00      	nop

08000594 <__aeabi_ul2d>:
 8000594:	ea50 0201 	orrs.w	r2, r0, r1
 8000598:	bf08      	it	eq
 800059a:	4770      	bxeq	lr
 800059c:	b530      	push	{r4, r5, lr}
 800059e:	f04f 0500 	mov.w	r5, #0
 80005a2:	e00a      	b.n	80005ba <__aeabi_l2d+0x16>

080005a4 <__aeabi_l2d>:
 80005a4:	ea50 0201 	orrs.w	r2, r0, r1
 80005a8:	bf08      	it	eq
 80005aa:	4770      	bxeq	lr
 80005ac:	b530      	push	{r4, r5, lr}
 80005ae:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005b2:	d502      	bpl.n	80005ba <__aeabi_l2d+0x16>
 80005b4:	4240      	negs	r0, r0
 80005b6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005ba:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005be:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005c2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005c6:	f43f aedc 	beq.w	8000382 <__adddf3+0xe6>
 80005ca:	f04f 0203 	mov.w	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005e2:	f1c2 0320 	rsb	r3, r2, #32
 80005e6:	fa00 fc03 	lsl.w	ip, r0, r3
 80005ea:	fa20 f002 	lsr.w	r0, r0, r2
 80005ee:	fa01 fe03 	lsl.w	lr, r1, r3
 80005f2:	ea40 000e 	orr.w	r0, r0, lr
 80005f6:	fa21 f102 	lsr.w	r1, r1, r2
 80005fa:	4414      	add	r4, r2
 80005fc:	e6c1      	b.n	8000382 <__adddf3+0xe6>
 80005fe:	bf00      	nop

08000600 <__aeabi_dmul>:
 8000600:	b570      	push	{r4, r5, r6, lr}
 8000602:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000606:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800060a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800060e:	bf1d      	ittte	ne
 8000610:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000614:	ea94 0f0c 	teqne	r4, ip
 8000618:	ea95 0f0c 	teqne	r5, ip
 800061c:	f000 f8de 	bleq	80007dc <__aeabi_dmul+0x1dc>
 8000620:	442c      	add	r4, r5
 8000622:	ea81 0603 	eor.w	r6, r1, r3
 8000626:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800062a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800062e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000632:	bf18      	it	ne
 8000634:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000638:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800063c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000640:	d038      	beq.n	80006b4 <__aeabi_dmul+0xb4>
 8000642:	fba0 ce02 	umull	ip, lr, r0, r2
 8000646:	f04f 0500 	mov.w	r5, #0
 800064a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800064e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000652:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000656:	f04f 0600 	mov.w	r6, #0
 800065a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800065e:	f09c 0f00 	teq	ip, #0
 8000662:	bf18      	it	ne
 8000664:	f04e 0e01 	orrne.w	lr, lr, #1
 8000668:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800066c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000670:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000674:	d204      	bcs.n	8000680 <__aeabi_dmul+0x80>
 8000676:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800067a:	416d      	adcs	r5, r5
 800067c:	eb46 0606 	adc.w	r6, r6, r6
 8000680:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000684:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000688:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800068c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000690:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000694:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000698:	bf88      	it	hi
 800069a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800069e:	d81e      	bhi.n	80006de <__aeabi_dmul+0xde>
 80006a0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006a4:	bf08      	it	eq
 80006a6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006aa:	f150 0000 	adcs.w	r0, r0, #0
 80006ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b8:	ea46 0101 	orr.w	r1, r6, r1
 80006bc:	ea40 0002 	orr.w	r0, r0, r2
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c8:	bfc2      	ittt	gt
 80006ca:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006ce:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006d2:	bd70      	popgt	{r4, r5, r6, pc}
 80006d4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d8:	f04f 0e00 	mov.w	lr, #0
 80006dc:	3c01      	subs	r4, #1
 80006de:	f300 80ab 	bgt.w	8000838 <__aeabi_dmul+0x238>
 80006e2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006e6:	bfde      	ittt	le
 80006e8:	2000      	movle	r0, #0
 80006ea:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006ee:	bd70      	pople	{r4, r5, r6, pc}
 80006f0:	f1c4 0400 	rsb	r4, r4, #0
 80006f4:	3c20      	subs	r4, #32
 80006f6:	da35      	bge.n	8000764 <__aeabi_dmul+0x164>
 80006f8:	340c      	adds	r4, #12
 80006fa:	dc1b      	bgt.n	8000734 <__aeabi_dmul+0x134>
 80006fc:	f104 0414 	add.w	r4, r4, #20
 8000700:	f1c4 0520 	rsb	r5, r4, #32
 8000704:	fa00 f305 	lsl.w	r3, r0, r5
 8000708:	fa20 f004 	lsr.w	r0, r0, r4
 800070c:	fa01 f205 	lsl.w	r2, r1, r5
 8000710:	ea40 0002 	orr.w	r0, r0, r2
 8000714:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000718:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800071c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000720:	fa21 f604 	lsr.w	r6, r1, r4
 8000724:	eb42 0106 	adc.w	r1, r2, r6
 8000728:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800072c:	bf08      	it	eq
 800072e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000732:	bd70      	pop	{r4, r5, r6, pc}
 8000734:	f1c4 040c 	rsb	r4, r4, #12
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f304 	lsl.w	r3, r0, r4
 8000740:	fa20 f005 	lsr.w	r0, r0, r5
 8000744:	fa01 f204 	lsl.w	r2, r1, r4
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000754:	f141 0100 	adc.w	r1, r1, #0
 8000758:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800075c:	bf08      	it	eq
 800075e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000762:	bd70      	pop	{r4, r5, r6, pc}
 8000764:	f1c4 0520 	rsb	r5, r4, #32
 8000768:	fa00 f205 	lsl.w	r2, r0, r5
 800076c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000770:	fa20 f304 	lsr.w	r3, r0, r4
 8000774:	fa01 f205 	lsl.w	r2, r1, r5
 8000778:	ea43 0302 	orr.w	r3, r3, r2
 800077c:	fa21 f004 	lsr.w	r0, r1, r4
 8000780:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000784:	fa21 f204 	lsr.w	r2, r1, r4
 8000788:	ea20 0002 	bic.w	r0, r0, r2
 800078c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f094 0f00 	teq	r4, #0
 80007a0:	d10f      	bne.n	80007c2 <__aeabi_dmul+0x1c2>
 80007a2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007a6:	0040      	lsls	r0, r0, #1
 80007a8:	eb41 0101 	adc.w	r1, r1, r1
 80007ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b0:	bf08      	it	eq
 80007b2:	3c01      	subeq	r4, #1
 80007b4:	d0f7      	beq.n	80007a6 <__aeabi_dmul+0x1a6>
 80007b6:	ea41 0106 	orr.w	r1, r1, r6
 80007ba:	f095 0f00 	teq	r5, #0
 80007be:	bf18      	it	ne
 80007c0:	4770      	bxne	lr
 80007c2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007c6:	0052      	lsls	r2, r2, #1
 80007c8:	eb43 0303 	adc.w	r3, r3, r3
 80007cc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d0:	bf08      	it	eq
 80007d2:	3d01      	subeq	r5, #1
 80007d4:	d0f7      	beq.n	80007c6 <__aeabi_dmul+0x1c6>
 80007d6:	ea43 0306 	orr.w	r3, r3, r6
 80007da:	4770      	bx	lr
 80007dc:	ea94 0f0c 	teq	r4, ip
 80007e0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007e4:	bf18      	it	ne
 80007e6:	ea95 0f0c 	teqne	r5, ip
 80007ea:	d00c      	beq.n	8000806 <__aeabi_dmul+0x206>
 80007ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f0:	bf18      	it	ne
 80007f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007f6:	d1d1      	bne.n	800079c <__aeabi_dmul+0x19c>
 80007f8:	ea81 0103 	eor.w	r1, r1, r3
 80007fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000800:	f04f 0000 	mov.w	r0, #0
 8000804:	bd70      	pop	{r4, r5, r6, pc}
 8000806:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800080a:	bf06      	itte	eq
 800080c:	4610      	moveq	r0, r2
 800080e:	4619      	moveq	r1, r3
 8000810:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000814:	d019      	beq.n	800084a <__aeabi_dmul+0x24a>
 8000816:	ea94 0f0c 	teq	r4, ip
 800081a:	d102      	bne.n	8000822 <__aeabi_dmul+0x222>
 800081c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000820:	d113      	bne.n	800084a <__aeabi_dmul+0x24a>
 8000822:	ea95 0f0c 	teq	r5, ip
 8000826:	d105      	bne.n	8000834 <__aeabi_dmul+0x234>
 8000828:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800082c:	bf1c      	itt	ne
 800082e:	4610      	movne	r0, r2
 8000830:	4619      	movne	r1, r3
 8000832:	d10a      	bne.n	800084a <__aeabi_dmul+0x24a>
 8000834:	ea81 0103 	eor.w	r1, r1, r3
 8000838:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800083c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000840:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000844:	f04f 0000 	mov.w	r0, #0
 8000848:	bd70      	pop	{r4, r5, r6, pc}
 800084a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800084e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000852:	bd70      	pop	{r4, r5, r6, pc}

08000854 <__aeabi_ddiv>:
 8000854:	b570      	push	{r4, r5, r6, lr}
 8000856:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800085a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800085e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000862:	bf1d      	ittte	ne
 8000864:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000868:	ea94 0f0c 	teqne	r4, ip
 800086c:	ea95 0f0c 	teqne	r5, ip
 8000870:	f000 f8a7 	bleq	80009c2 <__aeabi_ddiv+0x16e>
 8000874:	eba4 0405 	sub.w	r4, r4, r5
 8000878:	ea81 0e03 	eor.w	lr, r1, r3
 800087c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000880:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000884:	f000 8088 	beq.w	8000998 <__aeabi_ddiv+0x144>
 8000888:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800088c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000890:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000894:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000898:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800089c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008a4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008ac:	429d      	cmp	r5, r3
 80008ae:	bf08      	it	eq
 80008b0:	4296      	cmpeq	r6, r2
 80008b2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008b6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008ba:	d202      	bcs.n	80008c2 <__aeabi_ddiv+0x6e>
 80008bc:	085b      	lsrs	r3, r3, #1
 80008be:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c2:	1ab6      	subs	r6, r6, r2
 80008c4:	eb65 0503 	sbc.w	r5, r5, r3
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008d2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000930:	ea55 0e06 	orrs.w	lr, r5, r6
 8000934:	d018      	beq.n	8000968 <__aeabi_ddiv+0x114>
 8000936:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800093a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800093e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000942:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000946:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800094a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800094e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000952:	d1c0      	bne.n	80008d6 <__aeabi_ddiv+0x82>
 8000954:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000958:	d10b      	bne.n	8000972 <__aeabi_ddiv+0x11e>
 800095a:	ea41 0100 	orr.w	r1, r1, r0
 800095e:	f04f 0000 	mov.w	r0, #0
 8000962:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000966:	e7b6      	b.n	80008d6 <__aeabi_ddiv+0x82>
 8000968:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800096c:	bf04      	itt	eq
 800096e:	4301      	orreq	r1, r0
 8000970:	2000      	moveq	r0, #0
 8000972:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000976:	bf88      	it	hi
 8000978:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800097c:	f63f aeaf 	bhi.w	80006de <__aeabi_dmul+0xde>
 8000980:	ebb5 0c03 	subs.w	ip, r5, r3
 8000984:	bf04      	itt	eq
 8000986:	ebb6 0c02 	subseq.w	ip, r6, r2
 800098a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800098e:	f150 0000 	adcs.w	r0, r0, #0
 8000992:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000996:	bd70      	pop	{r4, r5, r6, pc}
 8000998:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800099c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009a4:	bfc2      	ittt	gt
 80009a6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009aa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	popgt	{r4, r5, r6, pc}
 80009b0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009b4:	f04f 0e00 	mov.w	lr, #0
 80009b8:	3c01      	subs	r4, #1
 80009ba:	e690      	b.n	80006de <__aeabi_dmul+0xde>
 80009bc:	ea45 0e06 	orr.w	lr, r5, r6
 80009c0:	e68d      	b.n	80006de <__aeabi_dmul+0xde>
 80009c2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009c6:	ea94 0f0c 	teq	r4, ip
 80009ca:	bf08      	it	eq
 80009cc:	ea95 0f0c 	teqeq	r5, ip
 80009d0:	f43f af3b 	beq.w	800084a <__aeabi_dmul+0x24a>
 80009d4:	ea94 0f0c 	teq	r4, ip
 80009d8:	d10a      	bne.n	80009f0 <__aeabi_ddiv+0x19c>
 80009da:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009de:	f47f af34 	bne.w	800084a <__aeabi_dmul+0x24a>
 80009e2:	ea95 0f0c 	teq	r5, ip
 80009e6:	f47f af25 	bne.w	8000834 <__aeabi_dmul+0x234>
 80009ea:	4610      	mov	r0, r2
 80009ec:	4619      	mov	r1, r3
 80009ee:	e72c      	b.n	800084a <__aeabi_dmul+0x24a>
 80009f0:	ea95 0f0c 	teq	r5, ip
 80009f4:	d106      	bne.n	8000a04 <__aeabi_ddiv+0x1b0>
 80009f6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009fa:	f43f aefd 	beq.w	80007f8 <__aeabi_dmul+0x1f8>
 80009fe:	4610      	mov	r0, r2
 8000a00:	4619      	mov	r1, r3
 8000a02:	e722      	b.n	800084a <__aeabi_dmul+0x24a>
 8000a04:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a08:	bf18      	it	ne
 8000a0a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a0e:	f47f aec5 	bne.w	800079c <__aeabi_dmul+0x19c>
 8000a12:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a16:	f47f af0d 	bne.w	8000834 <__aeabi_dmul+0x234>
 8000a1a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a1e:	f47f aeeb 	bne.w	80007f8 <__aeabi_dmul+0x1f8>
 8000a22:	e712      	b.n	800084a <__aeabi_dmul+0x24a>

08000a24 <__gedf2>:
 8000a24:	f04f 3cff 	mov.w	ip, #4294967295
 8000a28:	e006      	b.n	8000a38 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__ledf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	e002      	b.n	8000a38 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__cmpdf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a44:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a48:	bf18      	it	ne
 8000a4a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a4e:	d01b      	beq.n	8000a88 <__cmpdf2+0x54>
 8000a50:	b001      	add	sp, #4
 8000a52:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a56:	bf0c      	ite	eq
 8000a58:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a5c:	ea91 0f03 	teqne	r1, r3
 8000a60:	bf02      	ittt	eq
 8000a62:	ea90 0f02 	teqeq	r0, r2
 8000a66:	2000      	moveq	r0, #0
 8000a68:	4770      	bxeq	lr
 8000a6a:	f110 0f00 	cmn.w	r0, #0
 8000a6e:	ea91 0f03 	teq	r1, r3
 8000a72:	bf58      	it	pl
 8000a74:	4299      	cmppl	r1, r3
 8000a76:	bf08      	it	eq
 8000a78:	4290      	cmpeq	r0, r2
 8000a7a:	bf2c      	ite	cs
 8000a7c:	17d8      	asrcs	r0, r3, #31
 8000a7e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a82:	f040 0001 	orr.w	r0, r0, #1
 8000a86:	4770      	bx	lr
 8000a88:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a8c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a90:	d102      	bne.n	8000a98 <__cmpdf2+0x64>
 8000a92:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a96:	d107      	bne.n	8000aa8 <__cmpdf2+0x74>
 8000a98:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a9c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa0:	d1d6      	bne.n	8000a50 <__cmpdf2+0x1c>
 8000aa2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aa6:	d0d3      	beq.n	8000a50 <__cmpdf2+0x1c>
 8000aa8:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aac:	4770      	bx	lr
 8000aae:	bf00      	nop

08000ab0 <__aeabi_cdrcmple>:
 8000ab0:	4684      	mov	ip, r0
 8000ab2:	4610      	mov	r0, r2
 8000ab4:	4662      	mov	r2, ip
 8000ab6:	468c      	mov	ip, r1
 8000ab8:	4619      	mov	r1, r3
 8000aba:	4663      	mov	r3, ip
 8000abc:	e000      	b.n	8000ac0 <__aeabi_cdcmpeq>
 8000abe:	bf00      	nop

08000ac0 <__aeabi_cdcmpeq>:
 8000ac0:	b501      	push	{r0, lr}
 8000ac2:	f7ff ffb7 	bl	8000a34 <__cmpdf2>
 8000ac6:	2800      	cmp	r0, #0
 8000ac8:	bf48      	it	mi
 8000aca:	f110 0f00 	cmnmi.w	r0, #0
 8000ace:	bd01      	pop	{r0, pc}

08000ad0 <__aeabi_dcmpeq>:
 8000ad0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad4:	f7ff fff4 	bl	8000ac0 <__aeabi_cdcmpeq>
 8000ad8:	bf0c      	ite	eq
 8000ada:	2001      	moveq	r0, #1
 8000adc:	2000      	movne	r0, #0
 8000ade:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae2:	bf00      	nop

08000ae4 <__aeabi_dcmplt>:
 8000ae4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae8:	f7ff ffea 	bl	8000ac0 <__aeabi_cdcmpeq>
 8000aec:	bf34      	ite	cc
 8000aee:	2001      	movcc	r0, #1
 8000af0:	2000      	movcs	r0, #0
 8000af2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af6:	bf00      	nop

08000af8 <__aeabi_dcmple>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff ffe0 	bl	8000ac0 <__aeabi_cdcmpeq>
 8000b00:	bf94      	ite	ls
 8000b02:	2001      	movls	r0, #1
 8000b04:	2000      	movhi	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmpge>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffce 	bl	8000ab0 <__aeabi_cdrcmple>
 8000b14:	bf94      	ite	ls
 8000b16:	2001      	movls	r0, #1
 8000b18:	2000      	movhi	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmpgt>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffc4 	bl	8000ab0 <__aeabi_cdrcmple>
 8000b28:	bf34      	ite	cc
 8000b2a:	2001      	movcc	r0, #1
 8000b2c:	2000      	movcs	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_d2iz>:
 8000b34:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b38:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b3c:	d215      	bcs.n	8000b6a <__aeabi_d2iz+0x36>
 8000b3e:	d511      	bpl.n	8000b64 <__aeabi_d2iz+0x30>
 8000b40:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b44:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b48:	d912      	bls.n	8000b70 <__aeabi_d2iz+0x3c>
 8000b4a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b4e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b52:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b56:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b5a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b5e:	bf18      	it	ne
 8000b60:	4240      	negne	r0, r0
 8000b62:	4770      	bx	lr
 8000b64:	f04f 0000 	mov.w	r0, #0
 8000b68:	4770      	bx	lr
 8000b6a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b6e:	d105      	bne.n	8000b7c <__aeabi_d2iz+0x48>
 8000b70:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b74:	bf08      	it	eq
 8000b76:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b7a:	4770      	bx	lr
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	bf00      	nop

08000b84 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b84:	b510      	push	{r4, lr}
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock / 1000U);
 8000b86:	4b08      	ldr	r3, [pc, #32]	; (8000ba8 <HAL_InitTick+0x24>)
{
 8000b88:	4604      	mov	r4, r0
  HAL_SYSTICK_Config(SystemCoreClock / 1000U);
 8000b8a:	6818      	ldr	r0, [r3, #0]
 8000b8c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b90:	fbb0 f0f3 	udiv	r0, r0, r3
 8000b94:	f000 f88c 	bl	8000cb0 <HAL_SYSTICK_Config>
 
  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0U);
 8000b98:	2200      	movs	r2, #0
 8000b9a:	4621      	mov	r1, r4
 8000b9c:	f04f 30ff 	mov.w	r0, #4294967295
 8000ba0:	f000 f846 	bl	8000c30 <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
}
 8000ba4:	2000      	movs	r0, #0
 8000ba6:	bd10      	pop	{r4, pc}
 8000ba8:	20000060 	.word	0x20000060

08000bac <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000bac:	4a07      	ldr	r2, [pc, #28]	; (8000bcc <HAL_Init+0x20>)
{
 8000bae:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000bb0:	6813      	ldr	r3, [r2, #0]
 8000bb2:	f043 0310 	orr.w	r3, r3, #16
 8000bb6:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bb8:	2003      	movs	r0, #3
 8000bba:	f000 f827 	bl	8000c0c <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000bbe:	2000      	movs	r0, #0
 8000bc0:	f7ff ffe0 	bl	8000b84 <HAL_InitTick>
  HAL_MspInit();
 8000bc4:	f002 fe84 	bl	80038d0 <HAL_MspInit>
}
 8000bc8:	2000      	movs	r0, #0
 8000bca:	bd08      	pop	{r3, pc}
 8000bcc:	40022000 	.word	0x40022000

08000bd0 <HAL_IncTick>:
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8000bd0:	4a02      	ldr	r2, [pc, #8]	; (8000bdc <HAL_IncTick+0xc>)
 8000bd2:	6813      	ldr	r3, [r2, #0]
 8000bd4:	3301      	adds	r3, #1
 8000bd6:	6013      	str	r3, [r2, #0]
 8000bd8:	4770      	bx	lr
 8000bda:	bf00      	nop
 8000bdc:	200000f0 	.word	0x200000f0

08000be0 <HAL_GetTick>:
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;  
 8000be0:	4b01      	ldr	r3, [pc, #4]	; (8000be8 <HAL_GetTick+0x8>)
 8000be2:	6818      	ldr	r0, [r3, #0]
}
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop
 8000be8:	200000f0 	.word	0x200000f0

08000bec <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 8000bec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8000bee:	9001      	str	r0, [sp, #4]
  uint32_t tickstart = HAL_GetTick();
 8000bf0:	f7ff fff6 	bl	8000be0 <HAL_GetTick>
  uint32_t wait = Delay;
 8000bf4:	9c01      	ldr	r4, [sp, #4]
  
  /* Add a period to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000bf6:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 8000bf8:	4605      	mov	r5, r0
  {
     wait++;
 8000bfa:	bf18      	it	ne
 8000bfc:	3401      	addne	r4, #1
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000bfe:	f7ff ffef 	bl	8000be0 <HAL_GetTick>
 8000c02:	1b40      	subs	r0, r0, r5
 8000c04:	42a0      	cmp	r0, r4
 8000c06:	d3fa      	bcc.n	8000bfe <HAL_Delay+0x12>
  {
  }
}
 8000c08:	b003      	add	sp, #12
 8000c0a:	bd30      	pop	{r4, r5, pc}

08000c0c <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c0c:	4a07      	ldr	r2, [pc, #28]	; (8000c2c <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000c0e:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c10:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000c14:	041b      	lsls	r3, r3, #16
 8000c16:	0c1b      	lsrs	r3, r3, #16
 8000c18:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000c1c:	0200      	lsls	r0, r0, #8
 8000c1e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c22:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 8000c26:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000c28:	60d3      	str	r3, [r2, #12]
 8000c2a:	4770      	bx	lr
 8000c2c:	e000ed00 	.word	0xe000ed00

08000c30 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c30:	4b17      	ldr	r3, [pc, #92]	; (8000c90 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c32:	b530      	push	{r4, r5, lr}
 8000c34:	68dc      	ldr	r4, [r3, #12]
 8000c36:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c3a:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c3e:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c40:	2b04      	cmp	r3, #4
 8000c42:	bf28      	it	cs
 8000c44:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c46:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c48:	f04f 0501 	mov.w	r5, #1
 8000c4c:	fa05 f303 	lsl.w	r3, r5, r3
 8000c50:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c54:	bf8c      	ite	hi
 8000c56:	3c03      	subhi	r4, #3
 8000c58:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c5a:	4019      	ands	r1, r3
 8000c5c:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c5e:	fa05 f404 	lsl.w	r4, r5, r4
 8000c62:	3c01      	subs	r4, #1
 8000c64:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 8000c66:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c68:	ea42 0201 	orr.w	r2, r2, r1
 8000c6c:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c70:	bfaf      	iteee	ge
 8000c72:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c76:	f000 000f 	andlt.w	r0, r0, #15
 8000c7a:	4b06      	ldrlt	r3, [pc, #24]	; (8000c94 <HAL_NVIC_SetPriority+0x64>)
 8000c7c:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c7e:	bfa5      	ittet	ge
 8000c80:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 8000c84:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c86:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c88:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8000c8c:	bd30      	pop	{r4, r5, pc}
 8000c8e:	bf00      	nop
 8000c90:	e000ed00 	.word	0xe000ed00
 8000c94:	e000ed14 	.word	0xe000ed14

08000c98 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000c98:	0942      	lsrs	r2, r0, #5
 8000c9a:	2301      	movs	r3, #1
 8000c9c:	f000 001f 	and.w	r0, r0, #31
 8000ca0:	fa03 f000 	lsl.w	r0, r3, r0
 8000ca4:	4b01      	ldr	r3, [pc, #4]	; (8000cac <HAL_NVIC_EnableIRQ+0x14>)
 8000ca6:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8000caa:	4770      	bx	lr
 8000cac:	e000e100 	.word	0xe000e100

08000cb0 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000cb0:	3801      	subs	r0, #1
 8000cb2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000cb6:	d20a      	bcs.n	8000cce <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000cb8:	4b06      	ldr	r3, [pc, #24]	; (8000cd4 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cba:	4a07      	ldr	r2, [pc, #28]	; (8000cd8 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000cbc:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cbe:	21f0      	movs	r1, #240	; 0xf0
 8000cc0:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000cc4:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000cc6:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000cc8:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000cca:	601a      	str	r2, [r3, #0]
 8000ccc:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000cce:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000cd0:	4770      	bx	lr
 8000cd2:	bf00      	nop
 8000cd4:	e000e010 	.word	0xe000e010
 8000cd8:	e000ed00 	.word	0xe000ed00

08000cdc <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8000cdc:	4b04      	ldr	r3, [pc, #16]	; (8000cf0 <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000cde:	681a      	ldr	r2, [r3, #0]
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8000ce0:	2804      	cmp	r0, #4
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000ce2:	bf0c      	ite	eq
 8000ce4:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8000ce8:	f022 0204 	bicne.w	r2, r2, #4
 8000cec:	601a      	str	r2, [r3, #0]
 8000cee:	4770      	bx	lr
 8000cf0:	e000e010 	.word	0xe000e010

08000cf4 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8000cf4:	4770      	bx	lr

08000cf6 <HAL_SYSTICK_IRQHandler>:
{
 8000cf6:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 8000cf8:	f7ff fffc 	bl	8000cf4 <HAL_SYSTICK_Callback>
 8000cfc:	bd08      	pop	{r3, pc}

08000cfe <HAL_DMA_Abort_IT>:
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
  HAL_StatusTypeDef status = HAL_OK;
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000cfe:	f890 2021 	ldrb.w	r2, [r0, #33]	; 0x21
 8000d02:	2a02      	cmp	r2, #2
{  
 8000d04:	b510      	push	{r4, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000d06:	d003      	beq.n	8000d10 <HAL_DMA_Abort_IT+0x12>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000d08:	2204      	movs	r2, #4
 8000d0a:	6382      	str	r2, [r0, #56]	; 0x38
        
    status = HAL_ERROR;
 8000d0c:	2001      	movs	r0, #1
 8000d0e:	bd10      	pop	{r4, pc}
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000d10:	6802      	ldr	r2, [r0, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000d12:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000d14:	6811      	ldr	r1, [r2, #0]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8000d16:	6b43      	ldr	r3, [r0, #52]	; 0x34
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000d18:	f021 010e 	bic.w	r1, r1, #14
 8000d1c:	6011      	str	r1, [r2, #0]
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000d1e:	6811      	ldr	r1, [r2, #0]
 8000d20:	f021 0101 	bic.w	r1, r1, #1
 8000d24:	6011      	str	r1, [r2, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000d26:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8000d28:	2101      	movs	r1, #1
 8000d2a:	fa01 f202 	lsl.w	r2, r1, r2
 8000d2e:	6062      	str	r2, [r4, #4]
    __HAL_UNLOCK(hdma);
 8000d30:	2400      	movs	r4, #0
    hdma->State = HAL_DMA_STATE_READY;
 8000d32:	f880 1021 	strb.w	r1, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma);
 8000d36:	f880 4020 	strb.w	r4, [r0, #32]
    if(hdma->XferAbortCallback != NULL)
 8000d3a:	b113      	cbz	r3, 8000d42 <HAL_DMA_Abort_IT+0x44>
    {
      hdma->XferAbortCallback(hdma);
 8000d3c:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 8000d3e:	4620      	mov	r0, r4
 8000d40:	bd10      	pop	{r4, pc}
 8000d42:	4618      	mov	r0, r3
    } 
  }
  return status;
}
 8000d44:	bd10      	pop	{r4, pc}
	...

08000d48 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d48:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000d4c:	f8d1 8000 	ldr.w	r8, [r1]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d50:	f8df 9190 	ldr.w	r9, [pc, #400]	; 8000ee4 <HAL_GPIO_Init+0x19c>
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000d54:	4a61      	ldr	r2, [pc, #388]	; (8000edc <HAL_GPIO_Init+0x194>)
  uint32_t position = 0x00U;
 8000d56:	2300      	movs	r3, #0
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000d58:	fa38 f403 	lsrs.w	r4, r8, r3
 8000d5c:	d102      	bne.n	8000d64 <HAL_GPIO_Init+0x1c>
      }
    }
    
    position++;
  }
}
 8000d5e:	b003      	add	sp, #12
 8000d60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000d64:	f04f 0e01 	mov.w	lr, #1
 8000d68:	fa0e fe03 	lsl.w	lr, lr, r3
    if(iocurrent)
 8000d6c:	ea18 060e 	ands.w	r6, r8, lr
 8000d70:	f000 80a6 	beq.w	8000ec0 <HAL_GPIO_Init+0x178>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000d74:	684c      	ldr	r4, [r1, #4]
 8000d76:	f024 0710 	bic.w	r7, r4, #16
 8000d7a:	2f02      	cmp	r7, #2
 8000d7c:	d116      	bne.n	8000dac <HAL_GPIO_Init+0x64>
        temp = GPIOx->AFR[position >> 3];
 8000d7e:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 8000d82:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000d86:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3];
 8000d8a:	f8da 5020 	ldr.w	r5, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000d8e:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8000d92:	f04f 0c0f 	mov.w	ip, #15
 8000d96:	fa0c fc0b 	lsl.w	ip, ip, fp
 8000d9a:	ea25 0c0c 	bic.w	ip, r5, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000d9e:	690d      	ldr	r5, [r1, #16]
 8000da0:	fa05 f50b 	lsl.w	r5, r5, fp
 8000da4:	ea45 050c 	orr.w	r5, r5, ip
        GPIOx->AFR[position >> 3] = temp;
 8000da8:	f8ca 5020 	str.w	r5, [sl, #32]
 8000dac:	ea4f 0a43 	mov.w	sl, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000db0:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 8000db2:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000db6:	fa05 f50a 	lsl.w	r5, r5, sl
 8000dba:	43ed      	mvns	r5, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000dbc:	f004 0c03 	and.w	ip, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000dc0:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000dc4:	fa0c fc0a 	lsl.w	ip, ip, sl
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000dc8:	3f01      	subs	r7, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000dca:	ea4c 0c0b 	orr.w	ip, ip, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000dce:	2f01      	cmp	r7, #1
      GPIOx->MODER = temp;
 8000dd0:	f8c0 c000 	str.w	ip, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000dd4:	d811      	bhi.n	8000dfa <HAL_GPIO_Init+0xb2>
        temp = GPIOx->OSPEEDR;
 8000dd6:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000dd8:	ea07 0b05 	and.w	fp, r7, r5
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000ddc:	68cf      	ldr	r7, [r1, #12]
 8000dde:	fa07 fc0a 	lsl.w	ip, r7, sl
 8000de2:	ea4c 070b 	orr.w	r7, ip, fp
        GPIOx->OSPEEDR = temp;
 8000de6:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8000de8:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000dea:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000dee:	f3c4 1700 	ubfx	r7, r4, #4, #1
 8000df2:	409f      	lsls	r7, r3
 8000df4:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 8000df8:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 8000dfa:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000dfc:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000dfe:	688f      	ldr	r7, [r1, #8]
 8000e00:	fa07 f70a 	lsl.w	r7, r7, sl
 8000e04:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 8000e06:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000e08:	00e5      	lsls	r5, r4, #3
 8000e0a:	d559      	bpl.n	8000ec0 <HAL_GPIO_Init+0x178>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e0c:	f8d9 5018 	ldr.w	r5, [r9, #24]
 8000e10:	f045 0501 	orr.w	r5, r5, #1
 8000e14:	f8c9 5018 	str.w	r5, [r9, #24]
 8000e18:	f8d9 5018 	ldr.w	r5, [r9, #24]
 8000e1c:	f023 0703 	bic.w	r7, r3, #3
 8000e20:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8000e24:	f005 0501 	and.w	r5, r5, #1
 8000e28:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
 8000e2c:	9501      	str	r5, [sp, #4]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 8000e2e:	f003 0c03 	and.w	ip, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e32:	9d01      	ldr	r5, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2];
 8000e34:	68bd      	ldr	r5, [r7, #8]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 8000e36:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8000e3a:	f04f 0e0f 	mov.w	lr, #15
 8000e3e:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000e42:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 8000e46:	ea25 0e0e 	bic.w	lr, r5, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000e4a:	d03b      	beq.n	8000ec4 <HAL_GPIO_Init+0x17c>
 8000e4c:	4d24      	ldr	r5, [pc, #144]	; (8000ee0 <HAL_GPIO_Init+0x198>)
 8000e4e:	42a8      	cmp	r0, r5
 8000e50:	d03a      	beq.n	8000ec8 <HAL_GPIO_Init+0x180>
 8000e52:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000e56:	42a8      	cmp	r0, r5
 8000e58:	d038      	beq.n	8000ecc <HAL_GPIO_Init+0x184>
 8000e5a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000e5e:	42a8      	cmp	r0, r5
 8000e60:	d036      	beq.n	8000ed0 <HAL_GPIO_Init+0x188>
 8000e62:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000e66:	42a8      	cmp	r0, r5
 8000e68:	d034      	beq.n	8000ed4 <HAL_GPIO_Init+0x18c>
 8000e6a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000e6e:	42a8      	cmp	r0, r5
 8000e70:	d032      	beq.n	8000ed8 <HAL_GPIO_Init+0x190>
 8000e72:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000e76:	42a8      	cmp	r0, r5
 8000e78:	bf14      	ite	ne
 8000e7a:	2507      	movne	r5, #7
 8000e7c:	2506      	moveq	r5, #6
 8000e7e:	fa05 f50c 	lsl.w	r5, r5, ip
 8000e82:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2] = temp;
 8000e86:	60bd      	str	r5, [r7, #8]
        temp = EXTI->IMR;
 8000e88:	6815      	ldr	r5, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8000e8a:	43f7      	mvns	r7, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000e8c:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 8000e90:	bf0c      	ite	eq
 8000e92:	403d      	andeq	r5, r7
          temp |= iocurrent;
 8000e94:	4335      	orrne	r5, r6
        EXTI->IMR = temp;
 8000e96:	6015      	str	r5, [r2, #0]
        temp = EXTI->EMR;
 8000e98:	6855      	ldr	r5, [r2, #4]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000e9a:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 8000e9e:	bf0c      	ite	eq
 8000ea0:	403d      	andeq	r5, r7
          temp |= iocurrent;
 8000ea2:	4335      	orrne	r5, r6
        EXTI->EMR = temp;
 8000ea4:	6055      	str	r5, [r2, #4]
        temp = EXTI->RTSR;
 8000ea6:	6895      	ldr	r5, [r2, #8]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000ea8:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 8000eac:	bf0c      	ite	eq
 8000eae:	403d      	andeq	r5, r7
          temp |= iocurrent;
 8000eb0:	4335      	orrne	r5, r6
        EXTI->RTSR = temp;
 8000eb2:	6095      	str	r5, [r2, #8]
        temp = EXTI->FTSR;
 8000eb4:	68d5      	ldr	r5, [r2, #12]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000eb6:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 8000eb8:	bf54      	ite	pl
 8000eba:	403d      	andpl	r5, r7
          temp |= iocurrent;
 8000ebc:	4335      	orrmi	r5, r6
        EXTI->FTSR = temp;
 8000ebe:	60d5      	str	r5, [r2, #12]
    position++;
 8000ec0:	3301      	adds	r3, #1
 8000ec2:	e749      	b.n	8000d58 <HAL_GPIO_Init+0x10>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000ec4:	2500      	movs	r5, #0
 8000ec6:	e7da      	b.n	8000e7e <HAL_GPIO_Init+0x136>
 8000ec8:	2501      	movs	r5, #1
 8000eca:	e7d8      	b.n	8000e7e <HAL_GPIO_Init+0x136>
 8000ecc:	2502      	movs	r5, #2
 8000ece:	e7d6      	b.n	8000e7e <HAL_GPIO_Init+0x136>
 8000ed0:	2503      	movs	r5, #3
 8000ed2:	e7d4      	b.n	8000e7e <HAL_GPIO_Init+0x136>
 8000ed4:	2504      	movs	r5, #4
 8000ed6:	e7d2      	b.n	8000e7e <HAL_GPIO_Init+0x136>
 8000ed8:	2505      	movs	r5, #5
 8000eda:	e7d0      	b.n	8000e7e <HAL_GPIO_Init+0x136>
 8000edc:	40010400 	.word	0x40010400
 8000ee0:	48000400 	.word	0x48000400
 8000ee4:	40021000 	.word	0x40021000

08000ee8 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000ee8:	b10a      	cbz	r2, 8000eee <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000eea:	6181      	str	r1, [r0, #24]
 8000eec:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000eee:	6281      	str	r1, [r0, #40]	; 0x28
 8000ef0:	4770      	bx	lr

08000ef2 <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 8000ef2:	6943      	ldr	r3, [r0, #20]
 8000ef4:	4059      	eors	r1, r3
 8000ef6:	6141      	str	r1, [r0, #20]
 8000ef8:	4770      	bx	lr
	...

08000efc <HAL_RCC_OscConfig>:
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000efc:	6803      	ldr	r3, [r0, #0]
{
 8000efe:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000f02:	07df      	lsls	r7, r3, #31
{
 8000f04:	4605      	mov	r5, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000f06:	d411      	bmi.n	8000f2c <HAL_RCC_OscConfig+0x30>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000f08:	682b      	ldr	r3, [r5, #0]
 8000f0a:	079e      	lsls	r6, r3, #30
 8000f0c:	f100 808b 	bmi.w	8001026 <HAL_RCC_OscConfig+0x12a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000f10:	682b      	ldr	r3, [r5, #0]
 8000f12:	071c      	lsls	r4, r3, #28
 8000f14:	f100 80fe 	bmi.w	8001114 <HAL_RCC_OscConfig+0x218>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000f18:	682b      	ldr	r3, [r5, #0]
 8000f1a:	0758      	lsls	r0, r3, #29
 8000f1c:	f100 8147 	bmi.w	80011ae <HAL_RCC_OscConfig+0x2b2>
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000f20:	69aa      	ldr	r2, [r5, #24]
 8000f22:	2a00      	cmp	r2, #0
 8000f24:	f040 81dd 	bne.w	80012e2 <HAL_RCC_OscConfig+0x3e6>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 8000f28:	2000      	movs	r0, #0
 8000f2a:	e024      	b.n	8000f76 <HAL_RCC_OscConfig+0x7a>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000f2c:	4cbd      	ldr	r4, [pc, #756]	; (8001224 <HAL_RCC_OscConfig+0x328>)
 8000f2e:	6863      	ldr	r3, [r4, #4]
 8000f30:	f003 030c 	and.w	r3, r3, #12
 8000f34:	2b04      	cmp	r3, #4
 8000f36:	d00a      	beq.n	8000f4e <HAL_RCC_OscConfig+0x52>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000f38:	6863      	ldr	r3, [r4, #4]
 8000f3a:	f003 030c 	and.w	r3, r3, #12
 8000f3e:	2b08      	cmp	r3, #8
 8000f40:	d11c      	bne.n	8000f7c <HAL_RCC_OscConfig+0x80>
 8000f42:	6863      	ldr	r3, [r4, #4]
 8000f44:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8000f48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f4c:	d116      	bne.n	8000f7c <HAL_RCC_OscConfig+0x80>
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f4e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f52:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f56:	6821      	ldr	r1, [r4, #0]
 8000f58:	fa93 f3a3 	rbit	r3, r3
 8000f5c:	fab3 f383 	clz	r3, r3
 8000f60:	f003 031f 	and.w	r3, r3, #31
 8000f64:	2201      	movs	r2, #1
 8000f66:	fa02 f303 	lsl.w	r3, r2, r3
 8000f6a:	420b      	tst	r3, r1
 8000f6c:	d0cc      	beq.n	8000f08 <HAL_RCC_OscConfig+0xc>
 8000f6e:	686b      	ldr	r3, [r5, #4]
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d1c9      	bne.n	8000f08 <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 8000f74:	2001      	movs	r0, #1
}
 8000f76:	b002      	add	sp, #8
 8000f78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f7c:	686b      	ldr	r3, [r5, #4]
 8000f7e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f82:	d11e      	bne.n	8000fc2 <HAL_RCC_OscConfig+0xc6>
 8000f84:	6823      	ldr	r3, [r4, #0]
 8000f86:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f8a:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000f8c:	f7ff fe28 	bl	8000be0 <HAL_GetTick>
 8000f90:	f44f 3600 	mov.w	r6, #131072	; 0x20000
 8000f94:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f96:	2701      	movs	r7, #1
 8000f98:	fa96 f3a6 	rbit	r3, r6
 8000f9c:	6822      	ldr	r2, [r4, #0]
 8000f9e:	fa96 f3a6 	rbit	r3, r6
 8000fa2:	fab3 f383 	clz	r3, r3
 8000fa6:	f003 031f 	and.w	r3, r3, #31
 8000faa:	fa07 f303 	lsl.w	r3, r7, r3
 8000fae:	4213      	tst	r3, r2
 8000fb0:	d1aa      	bne.n	8000f08 <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000fb2:	f7ff fe15 	bl	8000be0 <HAL_GetTick>
 8000fb6:	eba0 0008 	sub.w	r0, r0, r8
 8000fba:	2864      	cmp	r0, #100	; 0x64
 8000fbc:	d9ec      	bls.n	8000f98 <HAL_RCC_OscConfig+0x9c>
            return HAL_TIMEOUT;
 8000fbe:	2003      	movs	r0, #3
 8000fc0:	e7d9      	b.n	8000f76 <HAL_RCC_OscConfig+0x7a>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000fc2:	bb0b      	cbnz	r3, 8001008 <HAL_RCC_OscConfig+0x10c>
 8000fc4:	6823      	ldr	r3, [r4, #0]
 8000fc6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000fca:	6023      	str	r3, [r4, #0]
 8000fcc:	6823      	ldr	r3, [r4, #0]
 8000fce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000fd2:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000fd4:	f7ff fe04 	bl	8000be0 <HAL_GetTick>
 8000fd8:	f44f 3600 	mov.w	r6, #131072	; 0x20000
 8000fdc:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000fde:	2701      	movs	r7, #1
 8000fe0:	fa96 f3a6 	rbit	r3, r6
 8000fe4:	6822      	ldr	r2, [r4, #0]
 8000fe6:	fa96 f3a6 	rbit	r3, r6
 8000fea:	fab3 f383 	clz	r3, r3
 8000fee:	f003 031f 	and.w	r3, r3, #31
 8000ff2:	fa07 f303 	lsl.w	r3, r7, r3
 8000ff6:	4213      	tst	r3, r2
 8000ff8:	d086      	beq.n	8000f08 <HAL_RCC_OscConfig+0xc>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000ffa:	f7ff fdf1 	bl	8000be0 <HAL_GetTick>
 8000ffe:	eba0 0008 	sub.w	r0, r0, r8
 8001002:	2864      	cmp	r0, #100	; 0x64
 8001004:	d9ec      	bls.n	8000fe0 <HAL_RCC_OscConfig+0xe4>
 8001006:	e7da      	b.n	8000fbe <HAL_RCC_OscConfig+0xc2>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001008:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800100c:	6823      	ldr	r3, [r4, #0]
 800100e:	d103      	bne.n	8001018 <HAL_RCC_OscConfig+0x11c>
 8001010:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001014:	6023      	str	r3, [r4, #0]
 8001016:	e7b5      	b.n	8000f84 <HAL_RCC_OscConfig+0x88>
 8001018:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800101c:	6023      	str	r3, [r4, #0]
 800101e:	6823      	ldr	r3, [r4, #0]
 8001020:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001024:	e7b1      	b.n	8000f8a <HAL_RCC_OscConfig+0x8e>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001026:	4c7f      	ldr	r4, [pc, #508]	; (8001224 <HAL_RCC_OscConfig+0x328>)
 8001028:	6863      	ldr	r3, [r4, #4]
 800102a:	f013 0f0c 	tst.w	r3, #12
 800102e:	d00a      	beq.n	8001046 <HAL_RCC_OscConfig+0x14a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001030:	6863      	ldr	r3, [r4, #4]
 8001032:	f003 030c 	and.w	r3, r3, #12
 8001036:	2b08      	cmp	r3, #8
 8001038:	d124      	bne.n	8001084 <HAL_RCC_OscConfig+0x188>
 800103a:	6863      	ldr	r3, [r4, #4]
 800103c:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8001040:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001044:	d11e      	bne.n	8001084 <HAL_RCC_OscConfig+0x188>
 8001046:	2302      	movs	r3, #2
 8001048:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800104c:	6821      	ldr	r1, [r4, #0]
 800104e:	fa93 f3a3 	rbit	r3, r3
 8001052:	fab3 f383 	clz	r3, r3
 8001056:	f003 031f 	and.w	r3, r3, #31
 800105a:	2201      	movs	r2, #1
 800105c:	fa02 f303 	lsl.w	r3, r2, r3
 8001060:	420b      	tst	r3, r1
 8001062:	d002      	beq.n	800106a <HAL_RCC_OscConfig+0x16e>
 8001064:	68eb      	ldr	r3, [r5, #12]
 8001066:	4293      	cmp	r3, r2
 8001068:	d184      	bne.n	8000f74 <HAL_RCC_OscConfig+0x78>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800106a:	6821      	ldr	r1, [r4, #0]
 800106c:	23f8      	movs	r3, #248	; 0xf8
 800106e:	fa93 f3a3 	rbit	r3, r3
 8001072:	fab3 f283 	clz	r2, r3
 8001076:	692b      	ldr	r3, [r5, #16]
 8001078:	4093      	lsls	r3, r2
 800107a:	f021 02f8 	bic.w	r2, r1, #248	; 0xf8
 800107e:	4313      	orrs	r3, r2
 8001080:	6023      	str	r3, [r4, #0]
 8001082:	e745      	b.n	8000f10 <HAL_RCC_OscConfig+0x14>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001084:	68ea      	ldr	r2, [r5, #12]
 8001086:	2601      	movs	r6, #1
 8001088:	b30a      	cbz	r2, 80010ce <HAL_RCC_OscConfig+0x1d2>
 800108a:	fa96 f3a6 	rbit	r3, r6
        __HAL_RCC_HSI_ENABLE();
 800108e:	fab3 f383 	clz	r3, r3
 8001092:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001096:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800109a:	009b      	lsls	r3, r3, #2
 800109c:	2702      	movs	r7, #2
 800109e:	601e      	str	r6, [r3, #0]
        tickstart = HAL_GetTick();
 80010a0:	f7ff fd9e 	bl	8000be0 <HAL_GetTick>
 80010a4:	4680      	mov	r8, r0
 80010a6:	fa97 f3a7 	rbit	r3, r7
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010aa:	6822      	ldr	r2, [r4, #0]
 80010ac:	fa97 f3a7 	rbit	r3, r7
 80010b0:	fab3 f383 	clz	r3, r3
 80010b4:	f003 031f 	and.w	r3, r3, #31
 80010b8:	fa06 f303 	lsl.w	r3, r6, r3
 80010bc:	4213      	tst	r3, r2
 80010be:	d1d4      	bne.n	800106a <HAL_RCC_OscConfig+0x16e>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80010c0:	f7ff fd8e 	bl	8000be0 <HAL_GetTick>
 80010c4:	eba0 0008 	sub.w	r0, r0, r8
 80010c8:	2802      	cmp	r0, #2
 80010ca:	d9ec      	bls.n	80010a6 <HAL_RCC_OscConfig+0x1aa>
 80010cc:	e777      	b.n	8000fbe <HAL_RCC_OscConfig+0xc2>
 80010ce:	fa96 f3a6 	rbit	r3, r6
        __HAL_RCC_HSI_DISABLE();
 80010d2:	fab3 f383 	clz	r3, r3
 80010d6:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80010da:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80010de:	009b      	lsls	r3, r3, #2
 80010e0:	2702      	movs	r7, #2
 80010e2:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80010e4:	f7ff fd7c 	bl	8000be0 <HAL_GetTick>
 80010e8:	4680      	mov	r8, r0
 80010ea:	fa97 f3a7 	rbit	r3, r7
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80010ee:	6822      	ldr	r2, [r4, #0]
 80010f0:	fa97 f3a7 	rbit	r3, r7
 80010f4:	fab3 f383 	clz	r3, r3
 80010f8:	f003 031f 	and.w	r3, r3, #31
 80010fc:	fa06 f303 	lsl.w	r3, r6, r3
 8001100:	4213      	tst	r3, r2
 8001102:	f43f af05 	beq.w	8000f10 <HAL_RCC_OscConfig+0x14>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001106:	f7ff fd6b 	bl	8000be0 <HAL_GetTick>
 800110a:	eba0 0008 	sub.w	r0, r0, r8
 800110e:	2802      	cmp	r0, #2
 8001110:	d9eb      	bls.n	80010ea <HAL_RCC_OscConfig+0x1ee>
 8001112:	e754      	b.n	8000fbe <HAL_RCC_OscConfig+0xc2>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001114:	696a      	ldr	r2, [r5, #20]
 8001116:	4e43      	ldr	r6, [pc, #268]	; (8001224 <HAL_RCC_OscConfig+0x328>)
 8001118:	4943      	ldr	r1, [pc, #268]	; (8001228 <HAL_RCC_OscConfig+0x32c>)
 800111a:	2401      	movs	r4, #1
 800111c:	b31a      	cbz	r2, 8001166 <HAL_RCC_OscConfig+0x26a>
 800111e:	fa94 f3a4 	rbit	r3, r4
      __HAL_RCC_LSI_ENABLE();
 8001122:	fab3 f383 	clz	r3, r3
 8001126:	440b      	add	r3, r1
 8001128:	009b      	lsls	r3, r3, #2
 800112a:	2702      	movs	r7, #2
 800112c:	601c      	str	r4, [r3, #0]
      tickstart = HAL_GetTick();
 800112e:	f7ff fd57 	bl	8000be0 <HAL_GetTick>
 8001132:	4680      	mov	r8, r0
 8001134:	fa97 f3a7 	rbit	r3, r7
 8001138:	fa97 f3a7 	rbit	r3, r7
 800113c:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001140:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8001142:	fa97 f3a7 	rbit	r3, r7
 8001146:	fab3 f383 	clz	r3, r3
 800114a:	f003 031f 	and.w	r3, r3, #31
 800114e:	fa04 f303 	lsl.w	r3, r4, r3
 8001152:	4213      	tst	r3, r2
 8001154:	f47f aee0 	bne.w	8000f18 <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001158:	f7ff fd42 	bl	8000be0 <HAL_GetTick>
 800115c:	eba0 0008 	sub.w	r0, r0, r8
 8001160:	2802      	cmp	r0, #2
 8001162:	d9e7      	bls.n	8001134 <HAL_RCC_OscConfig+0x238>
 8001164:	e72b      	b.n	8000fbe <HAL_RCC_OscConfig+0xc2>
 8001166:	fa94 f3a4 	rbit	r3, r4
      __HAL_RCC_LSI_DISABLE();
 800116a:	fab3 f383 	clz	r3, r3
 800116e:	440b      	add	r3, r1
 8001170:	009b      	lsls	r3, r3, #2
 8001172:	2702      	movs	r7, #2
 8001174:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001176:	f7ff fd33 	bl	8000be0 <HAL_GetTick>
 800117a:	4680      	mov	r8, r0
 800117c:	fa97 f3a7 	rbit	r3, r7
 8001180:	fa97 f3a7 	rbit	r3, r7
 8001184:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001188:	6a72      	ldr	r2, [r6, #36]	; 0x24
 800118a:	fa97 f3a7 	rbit	r3, r7
 800118e:	fab3 f383 	clz	r3, r3
 8001192:	f003 031f 	and.w	r3, r3, #31
 8001196:	fa04 f303 	lsl.w	r3, r4, r3
 800119a:	4213      	tst	r3, r2
 800119c:	f43f aebc 	beq.w	8000f18 <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80011a0:	f7ff fd1e 	bl	8000be0 <HAL_GetTick>
 80011a4:	eba0 0008 	sub.w	r0, r0, r8
 80011a8:	2802      	cmp	r0, #2
 80011aa:	d9e7      	bls.n	800117c <HAL_RCC_OscConfig+0x280>
 80011ac:	e707      	b.n	8000fbe <HAL_RCC_OscConfig+0xc2>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80011ae:	4c1d      	ldr	r4, [pc, #116]	; (8001224 <HAL_RCC_OscConfig+0x328>)
 80011b0:	69e3      	ldr	r3, [r4, #28]
 80011b2:	00d9      	lsls	r1, r3, #3
 80011b4:	d434      	bmi.n	8001220 <HAL_RCC_OscConfig+0x324>
      __HAL_RCC_PWR_CLK_ENABLE();
 80011b6:	69e3      	ldr	r3, [r4, #28]
 80011b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011bc:	61e3      	str	r3, [r4, #28]
 80011be:	69e3      	ldr	r3, [r4, #28]
 80011c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011c4:	9301      	str	r3, [sp, #4]
 80011c6:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80011c8:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011ca:	4f18      	ldr	r7, [pc, #96]	; (800122c <HAL_RCC_OscConfig+0x330>)
 80011cc:	683b      	ldr	r3, [r7, #0]
 80011ce:	05da      	lsls	r2, r3, #23
 80011d0:	d52e      	bpl.n	8001230 <HAL_RCC_OscConfig+0x334>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80011d2:	68ab      	ldr	r3, [r5, #8]
 80011d4:	2b01      	cmp	r3, #1
 80011d6:	d13c      	bne.n	8001252 <HAL_RCC_OscConfig+0x356>
 80011d8:	6a23      	ldr	r3, [r4, #32]
 80011da:	f043 0301 	orr.w	r3, r3, #1
 80011de:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 80011e0:	f7ff fcfe 	bl	8000be0 <HAL_GetTick>
 80011e4:	2702      	movs	r7, #2
 80011e6:	4682      	mov	sl, r0
 80011e8:	46b9      	mov	r9, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80011ea:	f04f 0801 	mov.w	r8, #1
 80011ee:	fa97 f3a7 	rbit	r3, r7
 80011f2:	fa97 f3a7 	rbit	r3, r7
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d06b      	beq.n	80012d2 <HAL_RCC_OscConfig+0x3d6>
 80011fa:	6a22      	ldr	r2, [r4, #32]
 80011fc:	fa99 f3a9 	rbit	r3, r9
 8001200:	fab3 f383 	clz	r3, r3
 8001204:	f003 031f 	and.w	r3, r3, #31
 8001208:	fa08 f303 	lsl.w	r3, r8, r3
 800120c:	4213      	tst	r3, r2
 800120e:	d057      	beq.n	80012c0 <HAL_RCC_OscConfig+0x3c4>
    if(pwrclkchanged == SET)
 8001210:	2e00      	cmp	r6, #0
 8001212:	f43f ae85 	beq.w	8000f20 <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001216:	69e3      	ldr	r3, [r4, #28]
 8001218:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800121c:	61e3      	str	r3, [r4, #28]
 800121e:	e67f      	b.n	8000f20 <HAL_RCC_OscConfig+0x24>
    FlagStatus       pwrclkchanged = RESET;
 8001220:	2600      	movs	r6, #0
 8001222:	e7d2      	b.n	80011ca <HAL_RCC_OscConfig+0x2ce>
 8001224:	40021000 	.word	0x40021000
 8001228:	10908120 	.word	0x10908120
 800122c:	40007000 	.word	0x40007000
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001230:	683b      	ldr	r3, [r7, #0]
 8001232:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001236:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 8001238:	f7ff fcd2 	bl	8000be0 <HAL_GetTick>
 800123c:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800123e:	683b      	ldr	r3, [r7, #0]
 8001240:	05db      	lsls	r3, r3, #23
 8001242:	d4c6      	bmi.n	80011d2 <HAL_RCC_OscConfig+0x2d6>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001244:	f7ff fccc 	bl	8000be0 <HAL_GetTick>
 8001248:	eba0 0008 	sub.w	r0, r0, r8
 800124c:	2864      	cmp	r0, #100	; 0x64
 800124e:	d9f6      	bls.n	800123e <HAL_RCC_OscConfig+0x342>
 8001250:	e6b5      	b.n	8000fbe <HAL_RCC_OscConfig+0xc2>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001252:	bb3b      	cbnz	r3, 80012a4 <HAL_RCC_OscConfig+0x3a8>
 8001254:	6a23      	ldr	r3, [r4, #32]
 8001256:	f023 0301 	bic.w	r3, r3, #1
 800125a:	6223      	str	r3, [r4, #32]
 800125c:	6a23      	ldr	r3, [r4, #32]
 800125e:	f023 0304 	bic.w	r3, r3, #4
 8001262:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8001264:	f7ff fcbc 	bl	8000be0 <HAL_GetTick>
 8001268:	2702      	movs	r7, #2
 800126a:	4682      	mov	sl, r0
 800126c:	46b9      	mov	r9, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800126e:	f04f 0801 	mov.w	r8, #1
 8001272:	fa97 f3a7 	rbit	r3, r7
 8001276:	fa97 f3a7 	rbit	r3, r7
 800127a:	b373      	cbz	r3, 80012da <HAL_RCC_OscConfig+0x3de>
 800127c:	6a22      	ldr	r2, [r4, #32]
 800127e:	fa99 f3a9 	rbit	r3, r9
 8001282:	fab3 f383 	clz	r3, r3
 8001286:	f003 031f 	and.w	r3, r3, #31
 800128a:	fa08 f303 	lsl.w	r3, r8, r3
 800128e:	4213      	tst	r3, r2
 8001290:	d0be      	beq.n	8001210 <HAL_RCC_OscConfig+0x314>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001292:	f7ff fca5 	bl	8000be0 <HAL_GetTick>
 8001296:	f241 3388 	movw	r3, #5000	; 0x1388
 800129a:	eba0 000a 	sub.w	r0, r0, sl
 800129e:	4298      	cmp	r0, r3
 80012a0:	d9e7      	bls.n	8001272 <HAL_RCC_OscConfig+0x376>
 80012a2:	e68c      	b.n	8000fbe <HAL_RCC_OscConfig+0xc2>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80012a4:	2b05      	cmp	r3, #5
 80012a6:	6a23      	ldr	r3, [r4, #32]
 80012a8:	d103      	bne.n	80012b2 <HAL_RCC_OscConfig+0x3b6>
 80012aa:	f043 0304 	orr.w	r3, r3, #4
 80012ae:	6223      	str	r3, [r4, #32]
 80012b0:	e792      	b.n	80011d8 <HAL_RCC_OscConfig+0x2dc>
 80012b2:	f023 0301 	bic.w	r3, r3, #1
 80012b6:	6223      	str	r3, [r4, #32]
 80012b8:	6a23      	ldr	r3, [r4, #32]
 80012ba:	f023 0304 	bic.w	r3, r3, #4
 80012be:	e78e      	b.n	80011de <HAL_RCC_OscConfig+0x2e2>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80012c0:	f7ff fc8e 	bl	8000be0 <HAL_GetTick>
 80012c4:	f241 3388 	movw	r3, #5000	; 0x1388
 80012c8:	eba0 000a 	sub.w	r0, r0, sl
 80012cc:	4298      	cmp	r0, r3
 80012ce:	d98e      	bls.n	80011ee <HAL_RCC_OscConfig+0x2f2>
 80012d0:	e675      	b.n	8000fbe <HAL_RCC_OscConfig+0xc2>
 80012d2:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80012d6:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80012d8:	e790      	b.n	80011fc <HAL_RCC_OscConfig+0x300>
 80012da:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80012de:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80012e0:	e7cd      	b.n	800127e <HAL_RCC_OscConfig+0x382>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80012e2:	4c44      	ldr	r4, [pc, #272]	; (80013f4 <HAL_RCC_OscConfig+0x4f8>)
 80012e4:	6863      	ldr	r3, [r4, #4]
 80012e6:	f003 030c 	and.w	r3, r3, #12
 80012ea:	2b08      	cmp	r3, #8
 80012ec:	f43f ae42 	beq.w	8000f74 <HAL_RCC_OscConfig+0x78>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80012f0:	2a02      	cmp	r2, #2
 80012f2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80012f6:	d158      	bne.n	80013aa <HAL_RCC_OscConfig+0x4ae>
 80012f8:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 80012fc:	fab3 f383 	clz	r3, r3
 8001300:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001304:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001308:	009b      	lsls	r3, r3, #2
 800130a:	2200      	movs	r2, #0
 800130c:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800130e:	f7ff fc67 	bl	8000be0 <HAL_GetTick>
 8001312:	f04f 7700 	mov.w	r7, #33554432	; 0x2000000
 8001316:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001318:	2601      	movs	r6, #1
 800131a:	fa97 f3a7 	rbit	r3, r7
 800131e:	6822      	ldr	r2, [r4, #0]
 8001320:	fa97 f3a7 	rbit	r3, r7
 8001324:	fab3 f383 	clz	r3, r3
 8001328:	f003 031f 	and.w	r3, r3, #31
 800132c:	fa06 f303 	lsl.w	r3, r6, r3
 8001330:	4213      	tst	r3, r2
 8001332:	d133      	bne.n	800139c <HAL_RCC_OscConfig+0x4a0>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001334:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001336:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8001338:	f023 030f 	bic.w	r3, r3, #15
 800133c:	4313      	orrs	r3, r2
 800133e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001340:	6862      	ldr	r2, [r4, #4]
 8001342:	6a2b      	ldr	r3, [r5, #32]
 8001344:	69e9      	ldr	r1, [r5, #28]
 8001346:	f422 1276 	bic.w	r2, r2, #4030464	; 0x3d8000
 800134a:	430b      	orrs	r3, r1
 800134c:	4313      	orrs	r3, r2
 800134e:	6063      	str	r3, [r4, #4]
 8001350:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001354:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_ENABLE();
 8001358:	fab3 f383 	clz	r3, r3
 800135c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001360:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001364:	009b      	lsls	r3, r3, #2
 8001366:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
 800136a:	601e      	str	r6, [r3, #0]
        tickstart = HAL_GetTick();
 800136c:	f7ff fc38 	bl	8000be0 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001370:	2601      	movs	r6, #1
        tickstart = HAL_GetTick();
 8001372:	4607      	mov	r7, r0
 8001374:	fa95 f3a5 	rbit	r3, r5
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001378:	6822      	ldr	r2, [r4, #0]
 800137a:	fa95 f3a5 	rbit	r3, r5
 800137e:	fab3 f383 	clz	r3, r3
 8001382:	f003 031f 	and.w	r3, r3, #31
 8001386:	fa06 f303 	lsl.w	r3, r6, r3
 800138a:	4213      	tst	r3, r2
 800138c:	f47f adcc 	bne.w	8000f28 <HAL_RCC_OscConfig+0x2c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001390:	f7ff fc26 	bl	8000be0 <HAL_GetTick>
 8001394:	1bc0      	subs	r0, r0, r7
 8001396:	2802      	cmp	r0, #2
 8001398:	d9ec      	bls.n	8001374 <HAL_RCC_OscConfig+0x478>
 800139a:	e610      	b.n	8000fbe <HAL_RCC_OscConfig+0xc2>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800139c:	f7ff fc20 	bl	8000be0 <HAL_GetTick>
 80013a0:	eba0 0008 	sub.w	r0, r0, r8
 80013a4:	2802      	cmp	r0, #2
 80013a6:	d9b8      	bls.n	800131a <HAL_RCC_OscConfig+0x41e>
 80013a8:	e609      	b.n	8000fbe <HAL_RCC_OscConfig+0xc2>
 80013aa:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 80013ae:	fab3 f383 	clz	r3, r3
 80013b2:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80013b6:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80013ba:	009b      	lsls	r3, r3, #2
 80013bc:	2200      	movs	r2, #0
 80013be:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80013c0:	f7ff fc0e 	bl	8000be0 <HAL_GetTick>
 80013c4:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
 80013c8:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80013ca:	2601      	movs	r6, #1
 80013cc:	fa95 f3a5 	rbit	r3, r5
 80013d0:	6822      	ldr	r2, [r4, #0]
 80013d2:	fa95 f3a5 	rbit	r3, r5
 80013d6:	fab3 f383 	clz	r3, r3
 80013da:	f003 031f 	and.w	r3, r3, #31
 80013de:	fa06 f303 	lsl.w	r3, r6, r3
 80013e2:	4213      	tst	r3, r2
 80013e4:	f43f ada0 	beq.w	8000f28 <HAL_RCC_OscConfig+0x2c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80013e8:	f7ff fbfa 	bl	8000be0 <HAL_GetTick>
 80013ec:	1bc0      	subs	r0, r0, r7
 80013ee:	2802      	cmp	r0, #2
 80013f0:	d9ec      	bls.n	80013cc <HAL_RCC_OscConfig+0x4d0>
 80013f2:	e5e4      	b.n	8000fbe <HAL_RCC_OscConfig+0xc2>
 80013f4:	40021000 	.word	0x40021000

080013f8 <HAL_RCC_GetSysClockFreq>:
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
 80013f8:	4911      	ldr	r1, [pc, #68]	; (8001440 <HAL_RCC_GetSysClockFreq+0x48>)
 80013fa:	684b      	ldr	r3, [r1, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80013fc:	f003 020c 	and.w	r2, r3, #12
 8001400:	2a08      	cmp	r2, #8
 8001402:	d11a      	bne.n	800143a <HAL_RCC_GetSysClockFreq+0x42>
 8001404:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8001408:	fa92 f2a2 	rbit	r2, r2
 800140c:	200f      	movs	r0, #15
      sysclockfreq = HSE_VALUE;
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800140e:	fab2 f282 	clz	r2, r2
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8001412:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 8001414:	fa90 f0a0 	rbit	r0, r0
 8001418:	fab0 f080 	clz	r0, r0
 800141c:	f001 010f 	and.w	r1, r1, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8001420:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8001424:	40d3      	lsrs	r3, r2
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8001426:	40c1      	lsrs	r1, r0
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8001428:	4a06      	ldr	r2, [pc, #24]	; (8001444 <HAL_RCC_GetSysClockFreq+0x4c>)
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800142a:	4807      	ldr	r0, [pc, #28]	; (8001448 <HAL_RCC_GetSysClockFreq+0x50>)
 800142c:	5c41      	ldrb	r1, [r0, r1]
        pllclk = (HSE_VALUE / prediv) * pllmul;
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (HSI_VALUE / prediv) * pllmul;
 800142e:	4807      	ldr	r0, [pc, #28]	; (800144c <HAL_RCC_GetSysClockFreq+0x54>)
 8001430:	fbb0 f1f1 	udiv	r1, r0, r1
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8001434:	5cd0      	ldrb	r0, [r2, r3]
        pllclk = (HSI_VALUE / prediv) * pllmul;
 8001436:	4348      	muls	r0, r1
 8001438:	4770      	bx	lr
      sysclockfreq = HSE_VALUE;
 800143a:	4804      	ldr	r0, [pc, #16]	; (800144c <HAL_RCC_GetSysClockFreq+0x54>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 800143c:	4770      	bx	lr
 800143e:	bf00      	nop
 8001440:	40021000 	.word	0x40021000
 8001444:	080045f4 	.word	0x080045f4
 8001448:	08004604 	.word	0x08004604
 800144c:	007a1200 	.word	0x007a1200

08001450 <HAL_RCC_ClockConfig>:
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001450:	4a5c      	ldr	r2, [pc, #368]	; (80015c4 <HAL_RCC_ClockConfig+0x174>)
 8001452:	6813      	ldr	r3, [r2, #0]
 8001454:	f003 0307 	and.w	r3, r3, #7
 8001458:	428b      	cmp	r3, r1
{
 800145a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800145e:	4606      	mov	r6, r0
 8001460:	460d      	mov	r5, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001462:	d330      	bcc.n	80014c6 <HAL_RCC_ClockConfig+0x76>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001464:	6832      	ldr	r2, [r6, #0]
 8001466:	0791      	lsls	r1, r2, #30
 8001468:	d43a      	bmi.n	80014e0 <HAL_RCC_ClockConfig+0x90>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800146a:	07d2      	lsls	r2, r2, #31
 800146c:	d440      	bmi.n	80014f0 <HAL_RCC_ClockConfig+0xa0>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 800146e:	4a55      	ldr	r2, [pc, #340]	; (80015c4 <HAL_RCC_ClockConfig+0x174>)
 8001470:	6813      	ldr	r3, [r2, #0]
 8001472:	f003 0307 	and.w	r3, r3, #7
 8001476:	429d      	cmp	r5, r3
 8001478:	f0c0 8092 	bcc.w	80015a0 <HAL_RCC_ClockConfig+0x150>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800147c:	6832      	ldr	r2, [r6, #0]
 800147e:	4c52      	ldr	r4, [pc, #328]	; (80015c8 <HAL_RCC_ClockConfig+0x178>)
 8001480:	f012 0f04 	tst.w	r2, #4
 8001484:	f040 8097 	bne.w	80015b6 <HAL_RCC_ClockConfig+0x166>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001488:	0713      	lsls	r3, r2, #28
 800148a:	d506      	bpl.n	800149a <HAL_RCC_ClockConfig+0x4a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800148c:	6863      	ldr	r3, [r4, #4]
 800148e:	6932      	ldr	r2, [r6, #16]
 8001490:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8001494:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001498:	6063      	str	r3, [r4, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800149a:	f7ff ffad 	bl	80013f8 <HAL_RCC_GetSysClockFreq>
 800149e:	6863      	ldr	r3, [r4, #4]
 80014a0:	22f0      	movs	r2, #240	; 0xf0
 80014a2:	fa92 f2a2 	rbit	r2, r2
 80014a6:	fab2 f282 	clz	r2, r2
 80014aa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80014ae:	40d3      	lsrs	r3, r2
 80014b0:	4a46      	ldr	r2, [pc, #280]	; (80015cc <HAL_RCC_ClockConfig+0x17c>)
 80014b2:	5cd3      	ldrb	r3, [r2, r3]
 80014b4:	40d8      	lsrs	r0, r3
 80014b6:	4b46      	ldr	r3, [pc, #280]	; (80015d0 <HAL_RCC_ClockConfig+0x180>)
 80014b8:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 80014ba:	2000      	movs	r0, #0
 80014bc:	f7ff fb62 	bl	8000b84 <HAL_InitTick>
  return HAL_OK;
 80014c0:	2000      	movs	r0, #0
}
 80014c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014c6:	6813      	ldr	r3, [r2, #0]
 80014c8:	f023 0307 	bic.w	r3, r3, #7
 80014cc:	430b      	orrs	r3, r1
 80014ce:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80014d0:	6813      	ldr	r3, [r2, #0]
 80014d2:	f003 0307 	and.w	r3, r3, #7
 80014d6:	4299      	cmp	r1, r3
 80014d8:	d0c4      	beq.n	8001464 <HAL_RCC_ClockConfig+0x14>
      return HAL_ERROR;
 80014da:	2001      	movs	r0, #1
 80014dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80014e0:	4939      	ldr	r1, [pc, #228]	; (80015c8 <HAL_RCC_ClockConfig+0x178>)
 80014e2:	68b0      	ldr	r0, [r6, #8]
 80014e4:	684b      	ldr	r3, [r1, #4]
 80014e6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80014ea:	4303      	orrs	r3, r0
 80014ec:	604b      	str	r3, [r1, #4]
 80014ee:	e7bc      	b.n	800146a <HAL_RCC_ClockConfig+0x1a>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80014f0:	6872      	ldr	r2, [r6, #4]
 80014f2:	4c35      	ldr	r4, [pc, #212]	; (80015c8 <HAL_RCC_ClockConfig+0x178>)
 80014f4:	2a01      	cmp	r2, #1
 80014f6:	d128      	bne.n	800154a <HAL_RCC_ClockConfig+0xfa>
 80014f8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80014fc:	fa93 f1a3 	rbit	r1, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001500:	6821      	ldr	r1, [r4, #0]
 8001502:	fa93 f3a3 	rbit	r3, r3
 8001506:	fab3 f383 	clz	r3, r3
 800150a:	f003 031f 	and.w	r3, r3, #31
 800150e:	fa02 f303 	lsl.w	r3, r2, r3
 8001512:	420b      	tst	r3, r1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001514:	d0e1      	beq.n	80014da <HAL_RCC_ClockConfig+0x8a>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001516:	6863      	ldr	r3, [r4, #4]
 8001518:	f023 0303 	bic.w	r3, r3, #3
 800151c:	431a      	orrs	r2, r3
 800151e:	6062      	str	r2, [r4, #4]
    tickstart = HAL_GetTick();
 8001520:	f7ff fb5e 	bl	8000be0 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001524:	6873      	ldr	r3, [r6, #4]
 8001526:	2b01      	cmp	r3, #1
    tickstart = HAL_GetTick();
 8001528:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800152a:	f241 3888 	movw	r8, #5000	; 0x1388
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800152e:	d11f      	bne.n	8001570 <HAL_RCC_ClockConfig+0x120>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001530:	6863      	ldr	r3, [r4, #4]
 8001532:	f003 030c 	and.w	r3, r3, #12
 8001536:	2b04      	cmp	r3, #4
 8001538:	d099      	beq.n	800146e <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800153a:	f7ff fb51 	bl	8000be0 <HAL_GetTick>
 800153e:	1bc0      	subs	r0, r0, r7
 8001540:	4540      	cmp	r0, r8
 8001542:	d9f5      	bls.n	8001530 <HAL_RCC_ClockConfig+0xe0>
          return HAL_TIMEOUT;
 8001544:	2003      	movs	r0, #3
 8001546:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800154a:	2a02      	cmp	r2, #2
 800154c:	bf0c      	ite	eq
 800154e:	f04f 7300 	moveq.w	r3, #33554432	; 0x2000000
 8001552:	2302      	movne	r3, #2
 8001554:	fa93 f1a3 	rbit	r1, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001558:	6820      	ldr	r0, [r4, #0]
 800155a:	fa93 f3a3 	rbit	r3, r3
 800155e:	fab3 f383 	clz	r3, r3
 8001562:	f003 031f 	and.w	r3, r3, #31
 8001566:	2101      	movs	r1, #1
 8001568:	fa01 f303 	lsl.w	r3, r1, r3
 800156c:	4203      	tst	r3, r0
 800156e:	e7d1      	b.n	8001514 <HAL_RCC_ClockConfig+0xc4>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001570:	2b02      	cmp	r3, #2
 8001572:	d110      	bne.n	8001596 <HAL_RCC_ClockConfig+0x146>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001574:	6863      	ldr	r3, [r4, #4]
 8001576:	f003 030c 	and.w	r3, r3, #12
 800157a:	2b08      	cmp	r3, #8
 800157c:	f43f af77 	beq.w	800146e <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001580:	f7ff fb2e 	bl	8000be0 <HAL_GetTick>
 8001584:	1bc0      	subs	r0, r0, r7
 8001586:	4540      	cmp	r0, r8
 8001588:	d9f4      	bls.n	8001574 <HAL_RCC_ClockConfig+0x124>
 800158a:	e7db      	b.n	8001544 <HAL_RCC_ClockConfig+0xf4>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800158c:	f7ff fb28 	bl	8000be0 <HAL_GetTick>
 8001590:	1bc0      	subs	r0, r0, r7
 8001592:	4540      	cmp	r0, r8
 8001594:	d8d6      	bhi.n	8001544 <HAL_RCC_ClockConfig+0xf4>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001596:	6863      	ldr	r3, [r4, #4]
 8001598:	f013 0f0c 	tst.w	r3, #12
 800159c:	d1f6      	bne.n	800158c <HAL_RCC_ClockConfig+0x13c>
 800159e:	e766      	b.n	800146e <HAL_RCC_ClockConfig+0x1e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015a0:	6813      	ldr	r3, [r2, #0]
 80015a2:	f023 0307 	bic.w	r3, r3, #7
 80015a6:	432b      	orrs	r3, r5
 80015a8:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80015aa:	6813      	ldr	r3, [r2, #0]
 80015ac:	f003 0307 	and.w	r3, r3, #7
 80015b0:	429d      	cmp	r5, r3
 80015b2:	d192      	bne.n	80014da <HAL_RCC_ClockConfig+0x8a>
 80015b4:	e762      	b.n	800147c <HAL_RCC_ClockConfig+0x2c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80015b6:	6863      	ldr	r3, [r4, #4]
 80015b8:	68f1      	ldr	r1, [r6, #12]
 80015ba:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80015be:	430b      	orrs	r3, r1
 80015c0:	6063      	str	r3, [r4, #4]
 80015c2:	e761      	b.n	8001488 <HAL_RCC_ClockConfig+0x38>
 80015c4:	40022000 	.word	0x40022000
 80015c8:	40021000 	.word	0x40021000
 80015cc:	080046d0 	.word	0x080046d0
 80015d0:	20000060 	.word	0x20000060

080015d4 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 80015d4:	4b01      	ldr	r3, [pc, #4]	; (80015dc <HAL_RCC_GetHCLKFreq+0x8>)
 80015d6:	6818      	ldr	r0, [r3, #0]
 80015d8:	4770      	bx	lr
 80015da:	bf00      	nop
 80015dc:	20000060 	.word	0x20000060

080015e0 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80015e0:	4b08      	ldr	r3, [pc, #32]	; (8001604 <HAL_RCC_GetPCLK1Freq+0x24>)
 80015e2:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80015e6:	685b      	ldr	r3, [r3, #4]
 80015e8:	fa92 f2a2 	rbit	r2, r2
 80015ec:	fab2 f282 	clz	r2, r2
 80015f0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80015f4:	40d3      	lsrs	r3, r2
 80015f6:	4a04      	ldr	r2, [pc, #16]	; (8001608 <HAL_RCC_GetPCLK1Freq+0x28>)
 80015f8:	5cd3      	ldrb	r3, [r2, r3]
 80015fa:	4a04      	ldr	r2, [pc, #16]	; (800160c <HAL_RCC_GetPCLK1Freq+0x2c>)
 80015fc:	6810      	ldr	r0, [r2, #0]
}    
 80015fe:	40d8      	lsrs	r0, r3
 8001600:	4770      	bx	lr
 8001602:	bf00      	nop
 8001604:	40021000 	.word	0x40021000
 8001608:	080046e0 	.word	0x080046e0
 800160c:	20000060 	.word	0x20000060

08001610 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8001610:	4b08      	ldr	r3, [pc, #32]	; (8001634 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001612:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8001616:	685b      	ldr	r3, [r3, #4]
 8001618:	fa92 f2a2 	rbit	r2, r2
 800161c:	fab2 f282 	clz	r2, r2
 8001620:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8001624:	40d3      	lsrs	r3, r2
 8001626:	4a04      	ldr	r2, [pc, #16]	; (8001638 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001628:	5cd3      	ldrb	r3, [r2, r3]
 800162a:	4a04      	ldr	r2, [pc, #16]	; (800163c <HAL_RCC_GetPCLK2Freq+0x2c>)
 800162c:	6810      	ldr	r0, [r2, #0]
} 
 800162e:	40d8      	lsrs	r0, r3
 8001630:	4770      	bx	lr
 8001632:	bf00      	nop
 8001634:	40021000 	.word	0x40021000
 8001638:	080046e0 	.word	0x080046e0
 800163c:	20000060 	.word	0x20000060

08001640 <HAL_RCCEx_PeriphCLKConfig>:
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001640:	6803      	ldr	r3, [r0, #0]
{
 8001642:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001646:	03df      	lsls	r7, r3, #15
{
 8001648:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800164a:	d523      	bpl.n	8001694 <HAL_RCCEx_PeriphCLKConfig+0x54>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800164c:	4d9b      	ldr	r5, [pc, #620]	; (80018bc <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800164e:	69eb      	ldr	r3, [r5, #28]
 8001650:	00de      	lsls	r6, r3, #3
 8001652:	f100 80d7 	bmi.w	8001804 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001656:	69eb      	ldr	r3, [r5, #28]
 8001658:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800165c:	61eb      	str	r3, [r5, #28]
 800165e:	69eb      	ldr	r3, [r5, #28]
 8001660:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001664:	9301      	str	r3, [sp, #4]
 8001666:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001668:	2601      	movs	r6, #1
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800166a:	4f95      	ldr	r7, [pc, #596]	; (80018c0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800166c:	683b      	ldr	r3, [r7, #0]
 800166e:	05d8      	lsls	r0, r3, #23
 8001670:	f140 80ca 	bpl.w	8001808 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001674:	6a2b      	ldr	r3, [r5, #32]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001676:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 800167a:	f040 80da 	bne.w	8001832 <HAL_RCCEx_PeriphCLKConfig+0x1f2>
            return HAL_TIMEOUT;
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800167e:	6a2b      	ldr	r3, [r5, #32]
 8001680:	6862      	ldr	r2, [r4, #4]
 8001682:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001686:	4313      	orrs	r3, r2
 8001688:	622b      	str	r3, [r5, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800168a:	b11e      	cbz	r6, 8001694 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800168c:	69eb      	ldr	r3, [r5, #28]
 800168e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001692:	61eb      	str	r3, [r5, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001694:	6820      	ldr	r0, [r4, #0]
 8001696:	07c3      	lsls	r3, r0, #31
 8001698:	d506      	bpl.n	80016a8 <HAL_RCCEx_PeriphCLKConfig+0x68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800169a:	4a88      	ldr	r2, [pc, #544]	; (80018bc <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800169c:	68a1      	ldr	r1, [r4, #8]
 800169e:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80016a0:	f023 0303 	bic.w	r3, r3, #3
 80016a4:	430b      	orrs	r3, r1
 80016a6:	6313      	str	r3, [r2, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80016a8:	0787      	lsls	r7, r0, #30
 80016aa:	d506      	bpl.n	80016ba <HAL_RCCEx_PeriphCLKConfig+0x7a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80016ac:	4a83      	ldr	r2, [pc, #524]	; (80018bc <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80016ae:	68e1      	ldr	r1, [r4, #12]
 80016b0:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80016b2:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80016b6:	430b      	orrs	r3, r1
 80016b8:	6313      	str	r3, [r2, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80016ba:	0746      	lsls	r6, r0, #29
 80016bc:	d506      	bpl.n	80016cc <HAL_RCCEx_PeriphCLKConfig+0x8c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80016be:	4a7f      	ldr	r2, [pc, #508]	; (80018bc <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80016c0:	6921      	ldr	r1, [r4, #16]
 80016c2:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80016c4:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 80016c8:	430b      	orrs	r3, r1
 80016ca:	6313      	str	r3, [r2, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80016cc:	0685      	lsls	r5, r0, #26
 80016ce:	d506      	bpl.n	80016de <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80016d0:	4a7a      	ldr	r2, [pc, #488]	; (80018bc <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80016d2:	69e1      	ldr	r1, [r4, #28]
 80016d4:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80016d6:	f023 0310 	bic.w	r3, r3, #16
 80016da:	430b      	orrs	r3, r1
 80016dc:	6313      	str	r3, [r2, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80016de:	0381      	lsls	r1, r0, #14
 80016e0:	d506      	bpl.n	80016f0 <HAL_RCCEx_PeriphCLKConfig+0xb0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80016e2:	4a76      	ldr	r2, [pc, #472]	; (80018bc <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80016e4:	6d61      	ldr	r1, [r4, #84]	; 0x54
 80016e6:	6853      	ldr	r3, [r2, #4]
 80016e8:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80016ec:	430b      	orrs	r3, r1
 80016ee:	6053      	str	r3, [r2, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80016f0:	0642      	lsls	r2, r0, #25
 80016f2:	d506      	bpl.n	8001702 <HAL_RCCEx_PeriphCLKConfig+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80016f4:	4a71      	ldr	r2, [pc, #452]	; (80018bc <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80016f6:	6a21      	ldr	r1, [r4, #32]
 80016f8:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80016fa:	f023 0320 	bic.w	r3, r3, #32
 80016fe:	430b      	orrs	r3, r1
 8001700:	6313      	str	r3, [r2, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8001702:	0343      	lsls	r3, r0, #13
 8001704:	d506      	bpl.n	8001714 <HAL_RCCEx_PeriphCLKConfig+0xd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8001706:	4a6d      	ldr	r2, [pc, #436]	; (80018bc <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8001708:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800170a:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800170c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001710:	430b      	orrs	r3, r1
 8001712:	6313      	str	r3, [r2, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8001714:	0707      	lsls	r7, r0, #28
 8001716:	d506      	bpl.n	8001726 <HAL_RCCEx_PeriphCLKConfig+0xe6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8001718:	4a68      	ldr	r2, [pc, #416]	; (80018bc <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800171a:	6961      	ldr	r1, [r4, #20]
 800171c:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800171e:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8001722:	430b      	orrs	r3, r1
 8001724:	6313      	str	r3, [r2, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8001726:	06c6      	lsls	r6, r0, #27
 8001728:	d506      	bpl.n	8001738 <HAL_RCCEx_PeriphCLKConfig+0xf8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800172a:	4a64      	ldr	r2, [pc, #400]	; (80018bc <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800172c:	69a1      	ldr	r1, [r4, #24]
 800172e:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001730:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8001734:	430b      	orrs	r3, r1
 8001736:	6313      	str	r3, [r2, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8001738:	0585      	lsls	r5, r0, #22
 800173a:	d506      	bpl.n	800174a <HAL_RCCEx_PeriphCLKConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800173c:	4a5f      	ldr	r2, [pc, #380]	; (80018bc <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800173e:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8001740:	6853      	ldr	r3, [r2, #4]
 8001742:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001746:	430b      	orrs	r3, r1
 8001748:	6053      	str	r3, [r2, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800174a:	0601      	lsls	r1, r0, #24
 800174c:	d506      	bpl.n	800175c <HAL_RCCEx_PeriphCLKConfig+0x11c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800174e:	4a5b      	ldr	r2, [pc, #364]	; (80018bc <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8001750:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8001752:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8001754:	f423 73f8 	bic.w	r3, r3, #496	; 0x1f0
 8001758:	430b      	orrs	r3, r1
 800175a:	62d3      	str	r3, [r2, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 800175c:	05c2      	lsls	r2, r0, #23
 800175e:	d506      	bpl.n	800176e <HAL_RCCEx_PeriphCLKConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8001760:	4a56      	ldr	r2, [pc, #344]	; (80018bc <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8001762:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8001764:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8001766:	f423 5378 	bic.w	r3, r3, #15872	; 0x3e00
 800176a:	430b      	orrs	r3, r1
 800176c:	62d3      	str	r3, [r2, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800176e:	04c3      	lsls	r3, r0, #19
 8001770:	d506      	bpl.n	8001780 <HAL_RCCEx_PeriphCLKConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8001772:	4a52      	ldr	r2, [pc, #328]	; (80018bc <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8001774:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001776:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001778:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800177c:	430b      	orrs	r3, r1
 800177e:	6313      	str	r3, [r2, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8001780:	0487      	lsls	r7, r0, #18
 8001782:	d506      	bpl.n	8001792 <HAL_RCCEx_PeriphCLKConfig+0x152>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8001784:	4a4d      	ldr	r2, [pc, #308]	; (80018bc <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8001786:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8001788:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800178a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800178e:	430b      	orrs	r3, r1
 8001790:	6313      	str	r3, [r2, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8001792:	02c6      	lsls	r6, r0, #11
 8001794:	d506      	bpl.n	80017a4 <HAL_RCCEx_PeriphCLKConfig+0x164>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8001796:	4a49      	ldr	r2, [pc, #292]	; (80018bc <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8001798:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800179a:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800179c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80017a0:	430b      	orrs	r3, r1
 80017a2:	6313      	str	r3, [r2, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 80017a4:	0285      	lsls	r5, r0, #10
 80017a6:	d506      	bpl.n	80017b6 <HAL_RCCEx_PeriphCLKConfig+0x176>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 80017a8:	4a44      	ldr	r2, [pc, #272]	; (80018bc <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80017aa:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80017ac:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80017ae:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 80017b2:	430b      	orrs	r3, r1
 80017b4:	6313      	str	r3, [r2, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 80017b6:	0241      	lsls	r1, r0, #9
 80017b8:	d506      	bpl.n	80017c8 <HAL_RCCEx_PeriphCLKConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 80017ba:	4a40      	ldr	r2, [pc, #256]	; (80018bc <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80017bc:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80017be:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80017c0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80017c4:	430b      	orrs	r3, r1
 80017c6:	6313      	str	r3, [r2, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 80017c8:	0202      	lsls	r2, r0, #8
 80017ca:	d506      	bpl.n	80017da <HAL_RCCEx_PeriphCLKConfig+0x19a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 80017cc:	4a3b      	ldr	r2, [pc, #236]	; (80018bc <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80017ce:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80017d0:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80017d2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80017d6:	430b      	orrs	r3, r1
 80017d8:	6313      	str	r3, [r2, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 80017da:	01c3      	lsls	r3, r0, #7
 80017dc:	d506      	bpl.n	80017ec <HAL_RCCEx_PeriphCLKConfig+0x1ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 80017de:	4a37      	ldr	r2, [pc, #220]	; (80018bc <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80017e0:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 80017e2:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80017e4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80017e8:	430b      	orrs	r3, r1
 80017ea:	6313      	str	r3, [r2, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 80017ec:	f010 7000 	ands.w	r0, r0, #33554432	; 0x2000000
 80017f0:	d01c      	beq.n	800182c <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 80017f2:	4a32      	ldr	r2, [pc, #200]	; (80018bc <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80017f4:	6d21      	ldr	r1, [r4, #80]	; 0x50
 80017f6:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80017f8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80017fc:	430b      	orrs	r3, r1
 80017fe:	6313      	str	r3, [r2, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8001800:	2000      	movs	r0, #0
 8001802:	e013      	b.n	800182c <HAL_RCCEx_PeriphCLKConfig+0x1ec>
    FlagStatus       pwrclkchanged = RESET;
 8001804:	2600      	movs	r6, #0
 8001806:	e730      	b.n	800166a <HAL_RCCEx_PeriphCLKConfig+0x2a>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001808:	683b      	ldr	r3, [r7, #0]
 800180a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800180e:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 8001810:	f7ff f9e6 	bl	8000be0 <HAL_GetTick>
 8001814:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001816:	683b      	ldr	r3, [r7, #0]
 8001818:	05d9      	lsls	r1, r3, #23
 800181a:	f53f af2b 	bmi.w	8001674 <HAL_RCCEx_PeriphCLKConfig+0x34>
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800181e:	f7ff f9df 	bl	8000be0 <HAL_GetTick>
 8001822:	eba0 0008 	sub.w	r0, r0, r8
 8001826:	2864      	cmp	r0, #100	; 0x64
 8001828:	d9f5      	bls.n	8001816 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
          return HAL_TIMEOUT;
 800182a:	2003      	movs	r0, #3
}
 800182c:	b002      	add	sp, #8
 800182e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001832:	6862      	ldr	r2, [r4, #4]
 8001834:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8001838:	4293      	cmp	r3, r2
 800183a:	f43f af20 	beq.w	800167e <HAL_RCCEx_PeriphCLKConfig+0x3e>
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800183e:	6a29      	ldr	r1, [r5, #32]
 8001840:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001844:	f421 7040 	bic.w	r0, r1, #768	; 0x300
 8001848:	fa93 f2a3 	rbit	r2, r3
      __HAL_RCC_BACKUPRESET_FORCE();
 800184c:	f8df e074 	ldr.w	lr, [pc, #116]	; 80018c4 <HAL_RCCEx_PeriphCLKConfig+0x284>
 8001850:	fab2 f282 	clz	r2, r2
 8001854:	4472      	add	r2, lr
 8001856:	0092      	lsls	r2, r2, #2
 8001858:	2701      	movs	r7, #1
 800185a:	6017      	str	r7, [r2, #0]
 800185c:	fa93 f3a3 	rbit	r3, r3
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001860:	fab3 f383 	clz	r3, r3
 8001864:	4473      	add	r3, lr
 8001866:	009b      	lsls	r3, r3, #2
 8001868:	2200      	movs	r2, #0
 800186a:	601a      	str	r2, [r3, #0]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800186c:	07ca      	lsls	r2, r1, #31
      RCC->BDCR = temp_reg;
 800186e:	6228      	str	r0, [r5, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001870:	f57f af05 	bpl.w	800167e <HAL_RCCEx_PeriphCLKConfig+0x3e>
        tickstart = HAL_GetTick();
 8001874:	f7ff f9b4 	bl	8000be0 <HAL_GetTick>
 8001878:	f04f 0802 	mov.w	r8, #2
 800187c:	4682      	mov	sl, r0
 800187e:	46c1      	mov	r9, r8
 8001880:	fa98 f3a8 	rbit	r3, r8
 8001884:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001888:	b1a3      	cbz	r3, 80018b4 <HAL_RCCEx_PeriphCLKConfig+0x274>
 800188a:	6a2a      	ldr	r2, [r5, #32]
 800188c:	fa99 f3a9 	rbit	r3, r9
 8001890:	fab3 f383 	clz	r3, r3
 8001894:	f003 031f 	and.w	r3, r3, #31
 8001898:	fa07 f303 	lsl.w	r3, r7, r3
 800189c:	4213      	tst	r3, r2
 800189e:	f47f aeee 	bne.w	800167e <HAL_RCCEx_PeriphCLKConfig+0x3e>
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018a2:	f7ff f99d 	bl	8000be0 <HAL_GetTick>
 80018a6:	f241 3388 	movw	r3, #5000	; 0x1388
 80018aa:	eba0 000a 	sub.w	r0, r0, sl
 80018ae:	4298      	cmp	r0, r3
 80018b0:	d9e6      	bls.n	8001880 <HAL_RCCEx_PeriphCLKConfig+0x240>
 80018b2:	e7ba      	b.n	800182a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 80018b4:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018b8:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 80018ba:	e7e7      	b.n	800188c <HAL_RCCEx_PeriphCLKConfig+0x24c>
 80018bc:	40021000 	.word	0x40021000
 80018c0:	40007000 	.word	0x40007000
 80018c4:	10908100 	.word	0x10908100

080018c8 <HAL_TIM_IC_MspInit>:
 80018c8:	4770      	bx	lr

080018ca <HAL_TIM_PeriodElapsedCallback>:
 80018ca:	4770      	bx	lr

080018cc <HAL_TIM_OC_DelayElapsedCallback>:
 80018cc:	4770      	bx	lr

080018ce <HAL_TIM_PWM_PulseFinishedCallback>:
 80018ce:	4770      	bx	lr

080018d0 <HAL_TIM_TriggerCallback>:
 80018d0:	4770      	bx	lr

080018d2 <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80018d2:	6803      	ldr	r3, [r0, #0]
 80018d4:	691a      	ldr	r2, [r3, #16]
 80018d6:	0791      	lsls	r1, r2, #30
{
 80018d8:	b510      	push	{r4, lr}
 80018da:	4604      	mov	r4, r0
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80018dc:	d50f      	bpl.n	80018fe <HAL_TIM_IRQHandler+0x2c>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 80018de:	68da      	ldr	r2, [r3, #12]
 80018e0:	0792      	lsls	r2, r2, #30
 80018e2:	d50c      	bpl.n	80018fe <HAL_TIM_IRQHandler+0x2c>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80018e4:	f06f 0202 	mvn.w	r2, #2
 80018e8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
        
        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80018ea:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80018ec:	2201      	movs	r2, #1
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80018ee:	0799      	lsls	r1, r3, #30
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80018f0:	7702      	strb	r2, [r0, #28]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80018f2:	f000 8085 	beq.w	8001a00 <HAL_TIM_IRQHandler+0x12e>
        {
          HAL_TIM_IC_CaptureCallback(htim);
 80018f6:	f001 ff93 	bl	8003820 <HAL_TIM_IC_CaptureCallback>
        else
        {
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80018fa:	2300      	movs	r3, #0
 80018fc:	7723      	strb	r3, [r4, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80018fe:	6823      	ldr	r3, [r4, #0]
 8001900:	691a      	ldr	r2, [r3, #16]
 8001902:	0752      	lsls	r2, r2, #29
 8001904:	d510      	bpl.n	8001928 <HAL_TIM_IRQHandler+0x56>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 8001906:	68da      	ldr	r2, [r3, #12]
 8001908:	0750      	lsls	r0, r2, #29
 800190a:	d50d      	bpl.n	8001928 <HAL_TIM_IRQHandler+0x56>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800190c:	f06f 0204 	mvn.w	r2, #4
 8001910:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001912:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001914:	2202      	movs	r2, #2
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001916:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800191a:	7722      	strb	r2, [r4, #28]
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 800191c:	4620      	mov	r0, r4
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800191e:	d075      	beq.n	8001a0c <HAL_TIM_IRQHandler+0x13a>
        HAL_TIM_IC_CaptureCallback(htim);
 8001920:	f001 ff7e 	bl	8003820 <HAL_TIM_IC_CaptureCallback>
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001924:	2300      	movs	r3, #0
 8001926:	7723      	strb	r3, [r4, #28]
    } 
  }
  /* Capture compare 3 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001928:	6823      	ldr	r3, [r4, #0]
 800192a:	691a      	ldr	r2, [r3, #16]
 800192c:	0711      	lsls	r1, r2, #28
 800192e:	d50f      	bpl.n	8001950 <HAL_TIM_IRQHandler+0x7e>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 8001930:	68da      	ldr	r2, [r3, #12]
 8001932:	0712      	lsls	r2, r2, #28
 8001934:	d50c      	bpl.n	8001950 <HAL_TIM_IRQHandler+0x7e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001936:	f06f 0208 	mvn.w	r2, #8
 800193a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800193c:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800193e:	2204      	movs	r2, #4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001940:	079b      	lsls	r3, r3, #30
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001942:	7722      	strb	r2, [r4, #28]
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8001944:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001946:	d067      	beq.n	8001a18 <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 8001948:	f001 ff6a 	bl	8003820 <HAL_TIM_IC_CaptureCallback>
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim); 
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800194c:	2300      	movs	r3, #0
 800194e:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 4 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001950:	6823      	ldr	r3, [r4, #0]
 8001952:	691a      	ldr	r2, [r3, #16]
 8001954:	06d0      	lsls	r0, r2, #27
 8001956:	d510      	bpl.n	800197a <HAL_TIM_IRQHandler+0xa8>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 8001958:	68da      	ldr	r2, [r3, #12]
 800195a:	06d1      	lsls	r1, r2, #27
 800195c:	d50d      	bpl.n	800197a <HAL_TIM_IRQHandler+0xa8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800195e:	f06f 0210 	mvn.w	r2, #16
 8001962:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001964:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001966:	2208      	movs	r2, #8
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001968:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800196c:	7722      	strb	r2, [r4, #28]
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 800196e:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001970:	d058      	beq.n	8001a24 <HAL_TIM_IRQHandler+0x152>
        HAL_TIM_IC_CaptureCallback(htim);
 8001972:	f001 ff55 	bl	8003820 <HAL_TIM_IC_CaptureCallback>
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001976:	2300      	movs	r3, #0
 8001978:	7723      	strb	r3, [r4, #28]
    } 
  }
  /* TIM Update event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800197a:	6823      	ldr	r3, [r4, #0]
 800197c:	691a      	ldr	r2, [r3, #16]
 800197e:	07d2      	lsls	r2, r2, #31
 8001980:	d508      	bpl.n	8001994 <HAL_TIM_IRQHandler+0xc2>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 8001982:	68da      	ldr	r2, [r3, #12]
 8001984:	07d0      	lsls	r0, r2, #31
 8001986:	d505      	bpl.n	8001994 <HAL_TIM_IRQHandler+0xc2>
    { 
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8001988:	f06f 0201 	mvn.w	r2, #1
 800198c:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 800198e:	4620      	mov	r0, r4
 8001990:	f7ff ff9b 	bl	80018ca <HAL_TIM_PeriodElapsedCallback>
    }
  }
  /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001994:	6823      	ldr	r3, [r4, #0]
 8001996:	691a      	ldr	r2, [r3, #16]
 8001998:	0611      	lsls	r1, r2, #24
 800199a:	d508      	bpl.n	80019ae <HAL_TIM_IRQHandler+0xdc>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 800199c:	68da      	ldr	r2, [r3, #12]
 800199e:	0612      	lsls	r2, r2, #24
 80019a0:	d505      	bpl.n	80019ae <HAL_TIM_IRQHandler+0xdc>
    { 
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80019a2:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80019a6:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 80019a8:	4620      	mov	r0, r4
 80019aa:	f000 fc90 	bl	80022ce <HAL_TIMEx_BreakCallback>
    }
  }

#if defined(TIM_FLAG_BREAK2)
  /* TIM Break input 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80019ae:	6823      	ldr	r3, [r4, #0]
 80019b0:	691a      	ldr	r2, [r3, #16]
 80019b2:	05d0      	lsls	r0, r2, #23
 80019b4:	d508      	bpl.n	80019c8 <HAL_TIM_IRQHandler+0xf6>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 80019b6:	68da      	ldr	r2, [r3, #12]
 80019b8:	0611      	lsls	r1, r2, #24
 80019ba:	d505      	bpl.n	80019c8 <HAL_TIM_IRQHandler+0xf6>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80019bc:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80019c0:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 80019c2:	4620      	mov	r0, r4
 80019c4:	f000 fc84 	bl	80022d0 <HAL_TIMEx_Break2Callback>
    }
  }
#endif

  /* TIM Trigger detection event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80019c8:	6823      	ldr	r3, [r4, #0]
 80019ca:	691a      	ldr	r2, [r3, #16]
 80019cc:	0652      	lsls	r2, r2, #25
 80019ce:	d508      	bpl.n	80019e2 <HAL_TIM_IRQHandler+0x110>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 80019d0:	68da      	ldr	r2, [r3, #12]
 80019d2:	0650      	lsls	r0, r2, #25
 80019d4:	d505      	bpl.n	80019e2 <HAL_TIM_IRQHandler+0x110>
    { 
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80019d6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80019da:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 80019dc:	4620      	mov	r0, r4
 80019de:	f7ff ff77 	bl	80018d0 <HAL_TIM_TriggerCallback>
    }
  }
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80019e2:	6823      	ldr	r3, [r4, #0]
 80019e4:	691a      	ldr	r2, [r3, #16]
 80019e6:	0691      	lsls	r1, r2, #26
 80019e8:	d522      	bpl.n	8001a30 <HAL_TIM_IRQHandler+0x15e>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 80019ea:	68da      	ldr	r2, [r3, #12]
 80019ec:	0692      	lsls	r2, r2, #26
 80019ee:	d51f      	bpl.n	8001a30 <HAL_TIM_IRQHandler+0x15e>
    { 
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80019f0:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutationCallback(htim);
 80019f4:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80019f6:	611a      	str	r2, [r3, #16]
    }
  }
}
 80019f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutationCallback(htim);
 80019fc:	f000 bc66 	b.w	80022cc <HAL_TIMEx_CommutationCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001a00:	f7ff ff64 	bl	80018cc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001a04:	4620      	mov	r0, r4
 8001a06:	f7ff ff62 	bl	80018ce <HAL_TIM_PWM_PulseFinishedCallback>
 8001a0a:	e776      	b.n	80018fa <HAL_TIM_IRQHandler+0x28>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001a0c:	f7ff ff5e 	bl	80018cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001a10:	4620      	mov	r0, r4
 8001a12:	f7ff ff5c 	bl	80018ce <HAL_TIM_PWM_PulseFinishedCallback>
 8001a16:	e785      	b.n	8001924 <HAL_TIM_IRQHandler+0x52>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001a18:	f7ff ff58 	bl	80018cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim); 
 8001a1c:	4620      	mov	r0, r4
 8001a1e:	f7ff ff56 	bl	80018ce <HAL_TIM_PWM_PulseFinishedCallback>
 8001a22:	e793      	b.n	800194c <HAL_TIM_IRQHandler+0x7a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001a24:	f7ff ff52 	bl	80018cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001a28:	4620      	mov	r0, r4
 8001a2a:	f7ff ff50 	bl	80018ce <HAL_TIM_PWM_PulseFinishedCallback>
 8001a2e:	e7a2      	b.n	8001976 <HAL_TIM_IRQHandler+0xa4>
 8001a30:	bd10      	pop	{r4, pc}
	...

08001a34 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1 = 0U;
  tmpcr1 = TIMx->CR1;
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001a34:	4a32      	ldr	r2, [pc, #200]	; (8001b00 <TIM_Base_SetConfig+0xcc>)
  tmpcr1 = TIMx->CR1;
 8001a36:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001a38:	4290      	cmp	r0, r2
 8001a3a:	d012      	beq.n	8001a62 <TIM_Base_SetConfig+0x2e>
 8001a3c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001a40:	d00f      	beq.n	8001a62 <TIM_Base_SetConfig+0x2e>
 8001a42:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8001a46:	4290      	cmp	r0, r2
 8001a48:	d00b      	beq.n	8001a62 <TIM_Base_SetConfig+0x2e>
 8001a4a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001a4e:	4290      	cmp	r0, r2
 8001a50:	d007      	beq.n	8001a62 <TIM_Base_SetConfig+0x2e>
 8001a52:	f502 3296 	add.w	r2, r2, #76800	; 0x12c00
 8001a56:	4290      	cmp	r0, r2
 8001a58:	d003      	beq.n	8001a62 <TIM_Base_SetConfig+0x2e>
 8001a5a:	f502 52e0 	add.w	r2, r2, #7168	; 0x1c00
 8001a5e:	4290      	cmp	r0, r2
 8001a60:	d115      	bne.n	8001a8e <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 8001a62:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001a64:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8001a68:	4313      	orrs	r3, r2
  }
 
  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001a6a:	4a25      	ldr	r2, [pc, #148]	; (8001b00 <TIM_Base_SetConfig+0xcc>)
 8001a6c:	4290      	cmp	r0, r2
 8001a6e:	d01d      	beq.n	8001aac <TIM_Base_SetConfig+0x78>
 8001a70:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001a74:	d01a      	beq.n	8001aac <TIM_Base_SetConfig+0x78>
 8001a76:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8001a7a:	4290      	cmp	r0, r2
 8001a7c:	d016      	beq.n	8001aac <TIM_Base_SetConfig+0x78>
 8001a7e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001a82:	4290      	cmp	r0, r2
 8001a84:	d012      	beq.n	8001aac <TIM_Base_SetConfig+0x78>
 8001a86:	f502 3296 	add.w	r2, r2, #76800	; 0x12c00
 8001a8a:	4290      	cmp	r0, r2
 8001a8c:	d00e      	beq.n	8001aac <TIM_Base_SetConfig+0x78>
 8001a8e:	4a1d      	ldr	r2, [pc, #116]	; (8001b04 <TIM_Base_SetConfig+0xd0>)
 8001a90:	4290      	cmp	r0, r2
 8001a92:	d00b      	beq.n	8001aac <TIM_Base_SetConfig+0x78>
 8001a94:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001a98:	4290      	cmp	r0, r2
 8001a9a:	d007      	beq.n	8001aac <TIM_Base_SetConfig+0x78>
 8001a9c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001aa0:	4290      	cmp	r0, r2
 8001aa2:	d003      	beq.n	8001aac <TIM_Base_SetConfig+0x78>
 8001aa4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001aa8:	4290      	cmp	r0, r2
 8001aaa:	d103      	bne.n	8001ab4 <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001aac:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8001aae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001ab2:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001ab4:	694a      	ldr	r2, [r1, #20]
 8001ab6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001aba:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 8001abc:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001abe:	688b      	ldr	r3, [r1, #8]
 8001ac0:	62c3      	str	r3, [r0, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8001ac2:	680b      	ldr	r3, [r1, #0]
 8001ac4:	6283      	str	r3, [r0, #40]	; 0x28
    
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))  
 8001ac6:	4b0e      	ldr	r3, [pc, #56]	; (8001b00 <TIM_Base_SetConfig+0xcc>)
 8001ac8:	4298      	cmp	r0, r3
 8001aca:	d013      	beq.n	8001af4 <TIM_Base_SetConfig+0xc0>
 8001acc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001ad0:	4298      	cmp	r0, r3
 8001ad2:	d00f      	beq.n	8001af4 <TIM_Base_SetConfig+0xc0>
 8001ad4:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 8001ad8:	4298      	cmp	r0, r3
 8001ada:	d00b      	beq.n	8001af4 <TIM_Base_SetConfig+0xc0>
 8001adc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001ae0:	4298      	cmp	r0, r3
 8001ae2:	d007      	beq.n	8001af4 <TIM_Base_SetConfig+0xc0>
 8001ae4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001ae8:	4298      	cmp	r0, r3
 8001aea:	d003      	beq.n	8001af4 <TIM_Base_SetConfig+0xc0>
 8001aec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001af0:	4298      	cmp	r0, r3
 8001af2:	d101      	bne.n	8001af8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001af4:	690b      	ldr	r3, [r1, #16]
 8001af6:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_EGR_UG;
 8001af8:	2301      	movs	r3, #1
 8001afa:	6143      	str	r3, [r0, #20]
 8001afc:	4770      	bx	lr
 8001afe:	bf00      	nop
 8001b00:	40012c00 	.word	0x40012c00
 8001b04:	40014000 	.word	0x40014000

08001b08 <HAL_TIM_PWM_Init>:
{
 8001b08:	b510      	push	{r4, lr}
  if(htim == NULL)
 8001b0a:	4604      	mov	r4, r0
 8001b0c:	b1a0      	cbz	r0, 8001b38 <HAL_TIM_PWM_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 8001b0e:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001b12:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001b16:	b91b      	cbnz	r3, 8001b20 <HAL_TIM_PWM_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8001b18:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8001b1c:	f001 ff16 	bl	800394c <HAL_TIM_PWM_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 8001b20:	2302      	movs	r3, #2
 8001b22:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 8001b26:	6820      	ldr	r0, [r4, #0]
 8001b28:	1d21      	adds	r1, r4, #4
 8001b2a:	f7ff ff83 	bl	8001a34 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8001b2e:	2301      	movs	r3, #1
 8001b30:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8001b34:	2000      	movs	r0, #0
 8001b36:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001b38:	2001      	movs	r0, #1
}
 8001b3a:	bd10      	pop	{r4, pc}

08001b3c <HAL_TIM_IC_Init>:
{
 8001b3c:	b510      	push	{r4, lr}
  if(htim == NULL)
 8001b3e:	4604      	mov	r4, r0
 8001b40:	b1a0      	cbz	r0, 8001b6c <HAL_TIM_IC_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 8001b42:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001b46:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001b4a:	b91b      	cbnz	r3, 8001b54 <HAL_TIM_IC_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8001b4c:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_IC_MspInit(htim);
 8001b50:	f7ff feba 	bl	80018c8 <HAL_TIM_IC_MspInit>
  htim->State= HAL_TIM_STATE_BUSY; 
 8001b54:	2302      	movs	r3, #2
 8001b56:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 8001b5a:	6820      	ldr	r0, [r4, #0]
 8001b5c:	1d21      	adds	r1, r4, #4
 8001b5e:	f7ff ff69 	bl	8001a34 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8001b62:	2301      	movs	r3, #1
 8001b64:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8001b68:	2000      	movs	r0, #0
 8001b6a:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001b6c:	2001      	movs	r0, #1
}
 8001b6e:	bd10      	pop	{r4, pc}

08001b70 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U; 

   /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001b70:	6a03      	ldr	r3, [r0, #32]
 8001b72:	f023 0301 	bic.w	r3, r3, #1
 8001b76:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001b78:	6a03      	ldr	r3, [r0, #32]
{
 8001b7a:	b570      	push	{r4, r5, r6, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2; 
 8001b7c:	6844      	ldr	r4, [r0, #4]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001b7e:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001b80:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8001b82:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001b86:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8001b8a:	432a      	orrs	r2, r5
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8001b8c:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 8001b8e:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= OC_Config->OCPolarity;
 8001b92:	432b      	orrs	r3, r5

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8001b94:	4d1f      	ldr	r5, [pc, #124]	; (8001c14 <TIM_OC1_SetConfig+0xa4>)
 8001b96:	42a8      	cmp	r0, r5
 8001b98:	d013      	beq.n	8001bc2 <TIM_OC1_SetConfig+0x52>
 8001b9a:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8001b9e:	42a8      	cmp	r0, r5
 8001ba0:	d00f      	beq.n	8001bc2 <TIM_OC1_SetConfig+0x52>
 8001ba2:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 8001ba6:	42a8      	cmp	r0, r5
 8001ba8:	d00b      	beq.n	8001bc2 <TIM_OC1_SetConfig+0x52>
 8001baa:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001bae:	42a8      	cmp	r0, r5
 8001bb0:	d007      	beq.n	8001bc2 <TIM_OC1_SetConfig+0x52>
 8001bb2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001bb6:	42a8      	cmp	r0, r5
 8001bb8:	d003      	beq.n	8001bc2 <TIM_OC1_SetConfig+0x52>
 8001bba:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8001bbe:	42a8      	cmp	r0, r5
 8001bc0:	d122      	bne.n	8001c08 <TIM_OC1_SetConfig+0x98>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8001bc2:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 8001bc4:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 8001bc8:	432b      	orrs	r3, r5
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
  }
  
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8001bca:	4d12      	ldr	r5, [pc, #72]	; (8001c14 <TIM_OC1_SetConfig+0xa4>)
 8001bcc:	42a8      	cmp	r0, r5
    tmpccer &= ~TIM_CCER_CC1NE;
 8001bce:	f023 0304 	bic.w	r3, r3, #4
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8001bd2:	d013      	beq.n	8001bfc <TIM_OC1_SetConfig+0x8c>
 8001bd4:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8001bd8:	42a8      	cmp	r0, r5
 8001bda:	d00f      	beq.n	8001bfc <TIM_OC1_SetConfig+0x8c>
 8001bdc:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 8001be0:	42a8      	cmp	r0, r5
 8001be2:	d00b      	beq.n	8001bfc <TIM_OC1_SetConfig+0x8c>
 8001be4:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001be8:	42a8      	cmp	r0, r5
 8001bea:	d007      	beq.n	8001bfc <TIM_OC1_SetConfig+0x8c>
 8001bec:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001bf0:	42a8      	cmp	r0, r5
 8001bf2:	d003      	beq.n	8001bfc <TIM_OC1_SetConfig+0x8c>
 8001bf4:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8001bf8:	42a8      	cmp	r0, r5
 8001bfa:	d105      	bne.n	8001c08 <TIM_OC1_SetConfig+0x98>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8001bfc:	f424 7540 	bic.w	r5, r4, #768	; 0x300
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8001c00:	698e      	ldr	r6, [r1, #24]
 8001c02:	694c      	ldr	r4, [r1, #20]
 8001c04:	4334      	orrs	r4, r6
 8001c06:	432c      	orrs	r4, r5
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001c08:	6044      	str	r4, [r0, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001c0a:	6182      	str	r2, [r0, #24]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8001c0c:	684a      	ldr	r2, [r1, #4]
 8001c0e:	6342      	str	r2, [r0, #52]	; 0x34
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 8001c10:	6203      	str	r3, [r0, #32]
 8001c12:	bd70      	pop	{r4, r5, r6, pc}
 8001c14:	40012c00 	.word	0x40012c00

08001c18 <TIM_OC2_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U; 

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001c18:	6a03      	ldr	r3, [r0, #32]
 8001c1a:	f023 0310 	bic.w	r3, r3, #16
 8001c1e:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001c20:	6a03      	ldr	r3, [r0, #32]
{
 8001c22:	b570      	push	{r4, r5, r6, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2; 
 8001c24:	6844      	ldr	r4, [r0, #4]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001c26:	6982      	ldr	r2, [r0, #24]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
  tmpccmrx &= ~TIM_CCMR1_CC2S;
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001c28:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8001c2a:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8001c2e:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001c32:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8001c36:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 8001c38:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8001c3c:	ea43 1305 	orr.w	r3, r3, r5, lsl #4

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8001c40:	4d1a      	ldr	r5, [pc, #104]	; (8001cac <TIM_OC2_SetConfig+0x94>)
 8001c42:	42a8      	cmp	r0, r5
 8001c44:	d007      	beq.n	8001c56 <TIM_OC2_SetConfig+0x3e>
 8001c46:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8001c4a:	42a8      	cmp	r0, r5
 8001c4c:	d003      	beq.n	8001c56 <TIM_OC2_SetConfig+0x3e>
 8001c4e:	f505 55e0 	add.w	r5, r5, #7168	; 0x1c00
 8001c52:	42a8      	cmp	r0, r5
 8001c54:	d10d      	bne.n	8001c72 <TIM_OC2_SetConfig+0x5a>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8001c56:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 8001c58:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8001c5c:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
    
  }

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8001c60:	4d12      	ldr	r5, [pc, #72]	; (8001cac <TIM_OC2_SetConfig+0x94>)
 8001c62:	42a8      	cmp	r0, r5
    tmpccer &= ~TIM_CCER_CC2NE;
 8001c64:	f023 0340 	bic.w	r3, r3, #64	; 0x40
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8001c68:	d012      	beq.n	8001c90 <TIM_OC2_SetConfig+0x78>
 8001c6a:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8001c6e:	42a8      	cmp	r0, r5
 8001c70:	d00e      	beq.n	8001c90 <TIM_OC2_SetConfig+0x78>
 8001c72:	4d0f      	ldr	r5, [pc, #60]	; (8001cb0 <TIM_OC2_SetConfig+0x98>)
 8001c74:	42a8      	cmp	r0, r5
 8001c76:	d00b      	beq.n	8001c90 <TIM_OC2_SetConfig+0x78>
 8001c78:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001c7c:	42a8      	cmp	r0, r5
 8001c7e:	d007      	beq.n	8001c90 <TIM_OC2_SetConfig+0x78>
 8001c80:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001c84:	42a8      	cmp	r0, r5
 8001c86:	d003      	beq.n	8001c90 <TIM_OC2_SetConfig+0x78>
 8001c88:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8001c8c:	42a8      	cmp	r0, r5
 8001c8e:	d106      	bne.n	8001c9e <TIM_OC2_SetConfig+0x86>
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
#if defined(STM32F373xC) || defined(STM32F378xx)
#else
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8001c90:	f424 6540 	bic.w	r5, r4, #3072	; 0xc00
#endif
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8001c94:	698e      	ldr	r6, [r1, #24]
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8001c96:	694c      	ldr	r4, [r1, #20]
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8001c98:	4334      	orrs	r4, r6
 8001c9a:	ea45 0484 	orr.w	r4, r5, r4, lsl #2
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001c9e:	6044      	str	r4, [r0, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001ca0:	6182      	str	r2, [r0, #24]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8001ca2:	684a      	ldr	r2, [r1, #4]
 8001ca4:	6382      	str	r2, [r0, #56]	; 0x38
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 8001ca6:	6203      	str	r3, [r0, #32]
 8001ca8:	bd70      	pop	{r4, r5, r6, pc}
 8001caa:	bf00      	nop
 8001cac:	40012c00 	.word	0x40012c00
 8001cb0:	40014000 	.word	0x40014000

08001cb4 <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U; 

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8001cb4:	6a03      	ldr	r3, [r0, #32]
 8001cb6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001cba:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001cbc:	6a03      	ldr	r3, [r0, #32]
{
 8001cbe:	b570      	push	{r4, r5, r6, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2; 
 8001cc0:	6844      	ldr	r4, [r0, #4]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001cc2:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;  
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001cc4:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;  
 8001cc6:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001cca:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8001cce:	432a      	orrs	r2, r5
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8001cd0:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 8001cd2:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8001cd6:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8001cda:	4d1a      	ldr	r5, [pc, #104]	; (8001d44 <TIM_OC3_SetConfig+0x90>)
 8001cdc:	42a8      	cmp	r0, r5
 8001cde:	d007      	beq.n	8001cf0 <TIM_OC3_SetConfig+0x3c>
 8001ce0:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8001ce4:	42a8      	cmp	r0, r5
 8001ce6:	d003      	beq.n	8001cf0 <TIM_OC3_SetConfig+0x3c>
 8001ce8:	f505 55e0 	add.w	r5, r5, #7168	; 0x1c00
 8001cec:	42a8      	cmp	r0, r5
 8001cee:	d10d      	bne.n	8001d0c <TIM_OC3_SetConfig+0x58>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8001cf0:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 8001cf2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8001cf6:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
  }
  
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8001cfa:	4d12      	ldr	r5, [pc, #72]	; (8001d44 <TIM_OC3_SetConfig+0x90>)
 8001cfc:	42a8      	cmp	r0, r5
    tmpccer &= ~TIM_CCER_CC3NE;
 8001cfe:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8001d02:	d012      	beq.n	8001d2a <TIM_OC3_SetConfig+0x76>
 8001d04:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8001d08:	42a8      	cmp	r0, r5
 8001d0a:	d00e      	beq.n	8001d2a <TIM_OC3_SetConfig+0x76>
 8001d0c:	4d0e      	ldr	r5, [pc, #56]	; (8001d48 <TIM_OC3_SetConfig+0x94>)
 8001d0e:	42a8      	cmp	r0, r5
 8001d10:	d00b      	beq.n	8001d2a <TIM_OC3_SetConfig+0x76>
 8001d12:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001d16:	42a8      	cmp	r0, r5
 8001d18:	d007      	beq.n	8001d2a <TIM_OC3_SetConfig+0x76>
 8001d1a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001d1e:	42a8      	cmp	r0, r5
 8001d20:	d003      	beq.n	8001d2a <TIM_OC3_SetConfig+0x76>
 8001d22:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8001d26:	42a8      	cmp	r0, r5
 8001d28:	d106      	bne.n	8001d38 <TIM_OC3_SetConfig+0x84>

#if defined(STM32F373xC) || defined(STM32F378xx)
#else
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8001d2a:	f424 5540 	bic.w	r5, r4, #12288	; 0x3000
#endif
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8001d2e:	698e      	ldr	r6, [r1, #24]
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8001d30:	694c      	ldr	r4, [r1, #20]
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8001d32:	4334      	orrs	r4, r6
 8001d34:	ea45 1404 	orr.w	r4, r5, r4, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001d38:	6044      	str	r4, [r0, #4]
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8001d3a:	61c2      	str	r2, [r0, #28]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8001d3c:	684a      	ldr	r2, [r1, #4]
 8001d3e:	63c2      	str	r2, [r0, #60]	; 0x3c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 8001d40:	6203      	str	r3, [r0, #32]
 8001d42:	bd70      	pop	{r4, r5, r6, pc}
 8001d44:	40012c00 	.word	0x40012c00
 8001d48:	40014000 	.word	0x40014000

08001d4c <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U; 

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8001d4c:	6a03      	ldr	r3, [r0, #32]
 8001d4e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001d52:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001d54:	6a03      	ldr	r3, [r0, #32]
{
 8001d56:	b530      	push	{r4, r5, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2; 
 8001d58:	6844      	ldr	r4, [r0, #4]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001d5a:	69c2      	ldr	r2, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001d5c:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8001d5e:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8001d62:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001d66:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8001d6a:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 8001d6c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8001d70:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8001d74:	4d10      	ldr	r5, [pc, #64]	; (8001db8 <TIM_OC4_SetConfig+0x6c>)
 8001d76:	42a8      	cmp	r0, r5
 8001d78:	d013      	beq.n	8001da2 <TIM_OC4_SetConfig+0x56>
 8001d7a:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8001d7e:	42a8      	cmp	r0, r5
 8001d80:	d00f      	beq.n	8001da2 <TIM_OC4_SetConfig+0x56>
 8001d82:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 8001d86:	42a8      	cmp	r0, r5
 8001d88:	d00b      	beq.n	8001da2 <TIM_OC4_SetConfig+0x56>
 8001d8a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001d8e:	42a8      	cmp	r0, r5
 8001d90:	d007      	beq.n	8001da2 <TIM_OC4_SetConfig+0x56>
 8001d92:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001d96:	42a8      	cmp	r0, r5
 8001d98:	d003      	beq.n	8001da2 <TIM_OC4_SetConfig+0x56>
 8001d9a:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8001d9e:	42a8      	cmp	r0, r5
 8001da0:	d104      	bne.n	8001dac <TIM_OC4_SetConfig+0x60>
#else
   /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
#endif
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8001da2:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 8001da4:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8001da8:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001dac:	6044      	str	r4, [r0, #4]
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8001dae:	61c2      	str	r2, [r0, #28]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8001db0:	684a      	ldr	r2, [r1, #4]
 8001db2:	6402      	str	r2, [r0, #64]	; 0x40
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 8001db4:	6203      	str	r3, [r0, #32]
 8001db6:	bd30      	pop	{r4, r5, pc}
 8001db8:	40012c00 	.word	0x40012c00

08001dbc <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be 
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8001dbc:	b570      	push	{r4, r5, r6, lr}
  uint32_t tmpccmr1 = 0U;
  uint32_t tmpccer = 0U;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001dbe:	6a04      	ldr	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;

  /* Select the Input */
  if(IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8001dc0:	4e18      	ldr	r6, [pc, #96]	; (8001e24 <TIM_TI1_SetConfig+0x68>)
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001dc2:	f024 0401 	bic.w	r4, r4, #1
 8001dc6:	6204      	str	r4, [r0, #32]
  if(IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8001dc8:	42b0      	cmp	r0, r6
  tmpccmr1 = TIMx->CCMR1;
 8001dca:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 8001dcc:	6a05      	ldr	r5, [r0, #32]
  if(IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8001dce:	d016      	beq.n	8001dfe <TIM_TI1_SetConfig+0x42>
 8001dd0:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001dd4:	d013      	beq.n	8001dfe <TIM_TI1_SetConfig+0x42>
 8001dd6:	f5a6 3694 	sub.w	r6, r6, #75776	; 0x12800
 8001dda:	42b0      	cmp	r0, r6
 8001ddc:	d00f      	beq.n	8001dfe <TIM_TI1_SetConfig+0x42>
 8001dde:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8001de2:	42b0      	cmp	r0, r6
 8001de4:	d00b      	beq.n	8001dfe <TIM_TI1_SetConfig+0x42>
 8001de6:	f506 3696 	add.w	r6, r6, #76800	; 0x12c00
 8001dea:	42b0      	cmp	r0, r6
 8001dec:	d007      	beq.n	8001dfe <TIM_TI1_SetConfig+0x42>
 8001dee:	f506 6640 	add.w	r6, r6, #3072	; 0xc00
 8001df2:	42b0      	cmp	r0, r6
 8001df4:	d003      	beq.n	8001dfe <TIM_TI1_SetConfig+0x42>
 8001df6:	f506 5680 	add.w	r6, r6, #4096	; 0x1000
 8001dfa:	42b0      	cmp	r0, r6
 8001dfc:	d10f      	bne.n	8001e1e <TIM_TI1_SetConfig+0x62>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8001dfe:	f024 0403 	bic.w	r4, r4, #3
    tmpccmr1 |= TIM_ICSelection;
 8001e02:	4322      	orrs	r2, r4
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
  }
  
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8001e04:	011b      	lsls	r3, r3, #4
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001e06:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8001e0a:	b2db      	uxtb	r3, r3

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001e0c:	f025 050a 	bic.w	r5, r5, #10
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8001e10:	f001 010a 	and.w	r1, r1, #10
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8001e14:	431a      	orrs	r2, r3
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8001e16:	4329      	orrs	r1, r5

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8001e18:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8001e1a:	6201      	str	r1, [r0, #32]
}
 8001e1c:	bd70      	pop	{r4, r5, r6, pc}
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8001e1e:	f044 0201 	orr.w	r2, r4, #1
 8001e22:	e7ef      	b.n	8001e04 <TIM_TI1_SetConfig+0x48>
 8001e24:	40012c00 	.word	0x40012c00

08001e28 <HAL_TIM_IC_ConfigChannel>:
{
 8001e28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(htim);
 8001e2a:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8001e2e:	2b01      	cmp	r3, #1
{
 8001e30:	4604      	mov	r4, r0
 8001e32:	460d      	mov	r5, r1
 8001e34:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 8001e38:	d019      	beq.n	8001e6e <HAL_TIM_IC_ConfigChannel+0x46>
 8001e3a:	2301      	movs	r3, #1
 8001e3c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8001e40:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  if (Channel == TIM_CHANNEL_1)
 8001e44:	b9a2      	cbnz	r2, 8001e70 <HAL_TIM_IC_ConfigChannel+0x48>
    TIM_TI1_SetConfig(htim->Instance,
 8001e46:	68cb      	ldr	r3, [r1, #12]
 8001e48:	6820      	ldr	r0, [r4, #0]
 8001e4a:	c906      	ldmia	r1, {r1, r2}
 8001e4c:	f7ff ffb6 	bl	8001dbc <TIM_TI1_SetConfig>
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8001e50:	6823      	ldr	r3, [r4, #0]
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8001e52:	68a9      	ldr	r1, [r5, #8]
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8001e54:	699a      	ldr	r2, [r3, #24]
 8001e56:	f022 020c 	bic.w	r2, r2, #12
 8001e5a:	619a      	str	r2, [r3, #24]
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8001e5c:	699a      	ldr	r2, [r3, #24]
 8001e5e:	430a      	orrs	r2, r1
 8001e60:	619a      	str	r2, [r3, #24]
  htim->State = HAL_TIM_STATE_READY;
 8001e62:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 8001e64:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8001e66:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8001e6a:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8001e6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if (Channel == TIM_CHANNEL_2)
 8001e70:	2a04      	cmp	r2, #4
 8001e72:	688e      	ldr	r6, [r1, #8]
 8001e74:	6823      	ldr	r3, [r4, #0]
 8001e76:	68e8      	ldr	r0, [r5, #12]
 8001e78:	c982      	ldmia	r1, {r1, r7}
 8001e7a:	d11f      	bne.n	8001ebc <HAL_TIM_IC_ConfigChannel+0x94>
{
  uint32_t tmpccmr1 = 0U;
  uint32_t tmpccer = 0U;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001e7c:	6a1a      	ldr	r2, [r3, #32]
 8001e7e:	f022 0210 	bic.w	r2, r2, #16
 8001e82:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001e84:	699a      	ldr	r2, [r3, #24]
  tmpccer = TIMx->CCER;
 8001e86:	6a1d      	ldr	r5, [r3, #32]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8001e88:	f422 7240 	bic.w	r2, r2, #768	; 0x300
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8001e8c:	ea42 2207 	orr.w	r2, r2, r7, lsl #8

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8001e90:	0300      	lsls	r0, r0, #12
 8001e92:	b280      	uxth	r0, r0
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001e94:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8001e98:	0109      	lsls	r1, r1, #4
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8001e9a:	4302      	orrs	r2, r0
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8001e9c:	f001 01a0 	and.w	r1, r1, #160	; 0xa0
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001ea0:	f025 00a0 	bic.w	r0, r5, #160	; 0xa0
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8001ea4:	4301      	orrs	r1, r0

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8001ea6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001ea8:	6219      	str	r1, [r3, #32]
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8001eaa:	699a      	ldr	r2, [r3, #24]
 8001eac:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8001eb0:	619a      	str	r2, [r3, #24]
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8001eb2:	699a      	ldr	r2, [r3, #24]
 8001eb4:	ea42 2606 	orr.w	r6, r2, r6, lsl #8
 8001eb8:	619e      	str	r6, [r3, #24]
 8001eba:	e7d2      	b.n	8001e62 <HAL_TIM_IC_ConfigChannel+0x3a>
  else if (Channel == TIM_CHANNEL_3)
 8001ebc:	2a08      	cmp	r2, #8
{
  uint32_t tmpccmr2 = 0U;
  uint32_t tmpccer = 0U;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8001ebe:	6a1a      	ldr	r2, [r3, #32]
  else if (Channel == TIM_CHANNEL_3)
 8001ec0:	d11c      	bne.n	8001efc <HAL_TIM_IC_ConfigChannel+0xd4>
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8001ec2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001ec6:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8001ec8:	69da      	ldr	r2, [r3, #28]
  tmpccer = TIMx->CCER;
 8001eca:	6a1d      	ldr	r5, [r3, #32]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8001ecc:	f022 0203 	bic.w	r2, r2, #3
  tmpccmr2 |= TIM_ICSelection;
 8001ed0:	433a      	orrs	r2, r7

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8001ed2:	0100      	lsls	r0, r0, #4
 8001ed4:	b2c0      	uxtb	r0, r0
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8001ed6:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8001eda:	0209      	lsls	r1, r1, #8
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8001edc:	4302      	orrs	r2, r0
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8001ede:	f401 6120 	and.w	r1, r1, #2560	; 0xa00
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8001ee2:	f425 6020 	bic.w	r0, r5, #2560	; 0xa00
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8001ee6:	4301      	orrs	r1, r0

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8001ee8:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8001eea:	6219      	str	r1, [r3, #32]
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8001eec:	69da      	ldr	r2, [r3, #28]
 8001eee:	f022 020c 	bic.w	r2, r2, #12
 8001ef2:	61da      	str	r2, [r3, #28]
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8001ef4:	69da      	ldr	r2, [r3, #28]
 8001ef6:	4316      	orrs	r6, r2
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8001ef8:	61de      	str	r6, [r3, #28]
 8001efa:	e7b2      	b.n	8001e62 <HAL_TIM_IC_ConfigChannel+0x3a>
{
  uint32_t tmpccmr2 = 0U;
  uint32_t tmpccer = 0U;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8001efc:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001f00:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8001f02:	69da      	ldr	r2, [r3, #28]
  tmpccer = TIMx->CCER;
 8001f04:	6a1d      	ldr	r5, [r3, #32]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8001f06:	f422 7240 	bic.w	r2, r2, #768	; 0x300
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8001f0a:	ea42 2207 	orr.w	r2, r2, r7, lsl #8

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8001f0e:	0300      	lsls	r0, r0, #12
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8001f10:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8001f14:	b280      	uxth	r0, r0

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8001f16:	0309      	lsls	r1, r1, #12
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8001f18:	4310      	orrs	r0, r2
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8001f1a:	f401 4120 	and.w	r1, r1, #40960	; 0xa000
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8001f1e:	f425 4220 	bic.w	r2, r5, #40960	; 0xa000
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8001f22:	4311      	orrs	r1, r2

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8001f24:	61d8      	str	r0, [r3, #28]
  TIMx->CCER = tmpccer ;
 8001f26:	6219      	str	r1, [r3, #32]
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8001f28:	69da      	ldr	r2, [r3, #28]
 8001f2a:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8001f2e:	61da      	str	r2, [r3, #28]
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8001f30:	69da      	ldr	r2, [r3, #28]
 8001f32:	ea42 2606 	orr.w	r6, r2, r6, lsl #8
 8001f36:	e7df      	b.n	8001ef8 <HAL_TIM_IC_ConfigChannel+0xd0>

08001f38 <TIM_CCxChannelCmd>:
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8001f38:	6a03      	ldr	r3, [r0, #32]
{
 8001f3a:	b510      	push	{r4, lr}
  tmp = TIM_CCER_CC1E << Channel;
 8001f3c:	2401      	movs	r4, #1
 8001f3e:	408c      	lsls	r4, r1
  TIMx->CCER &= ~tmp;
 8001f40:	ea23 0304 	bic.w	r3, r3, r4
 8001f44:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */ 
  TIMx->CCER |=  (uint32_t)(ChannelState << Channel);
 8001f46:	6a03      	ldr	r3, [r0, #32]
 8001f48:	408a      	lsls	r2, r1
 8001f4a:	431a      	orrs	r2, r3
 8001f4c:	6202      	str	r2, [r0, #32]
 8001f4e:	bd10      	pop	{r4, pc}

08001f50 <HAL_TIM_PWM_Start>:
{
 8001f50:	b510      	push	{r4, lr}
 8001f52:	4604      	mov	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001f54:	2201      	movs	r2, #1
 8001f56:	6800      	ldr	r0, [r0, #0]
 8001f58:	f7ff ffee 	bl	8001f38 <TIM_CCxChannelCmd>
  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)  
 8001f5c:	6823      	ldr	r3, [r4, #0]
 8001f5e:	4a10      	ldr	r2, [pc, #64]	; (8001fa0 <HAL_TIM_PWM_Start+0x50>)
 8001f60:	4293      	cmp	r3, r2
 8001f62:	d013      	beq.n	8001f8c <HAL_TIM_PWM_Start+0x3c>
 8001f64:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001f68:	4293      	cmp	r3, r2
 8001f6a:	d00f      	beq.n	8001f8c <HAL_TIM_PWM_Start+0x3c>
 8001f6c:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 8001f70:	4293      	cmp	r3, r2
 8001f72:	d00b      	beq.n	8001f8c <HAL_TIM_PWM_Start+0x3c>
 8001f74:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001f78:	4293      	cmp	r3, r2
 8001f7a:	d007      	beq.n	8001f8c <HAL_TIM_PWM_Start+0x3c>
 8001f7c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001f80:	4293      	cmp	r3, r2
 8001f82:	d003      	beq.n	8001f8c <HAL_TIM_PWM_Start+0x3c>
 8001f84:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001f88:	4293      	cmp	r3, r2
 8001f8a:	d103      	bne.n	8001f94 <HAL_TIM_PWM_Start+0x44>
    __HAL_TIM_MOE_ENABLE(htim);
 8001f8c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001f8e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001f92:	645a      	str	r2, [r3, #68]	; 0x44
  __HAL_TIM_ENABLE(htim);
 8001f94:	681a      	ldr	r2, [r3, #0]
 8001f96:	f042 0201 	orr.w	r2, r2, #1
 8001f9a:	601a      	str	r2, [r3, #0]
} 
 8001f9c:	2000      	movs	r0, #0
 8001f9e:	bd10      	pop	{r4, pc}
 8001fa0:	40012c00 	.word	0x40012c00

08001fa4 <HAL_TIM_IC_Start_IT>:
{
 8001fa4:	b510      	push	{r4, lr}
 8001fa6:	4604      	mov	r4, r0
  switch (Channel)
 8001fa8:	290c      	cmp	r1, #12
 8001faa:	d80d      	bhi.n	8001fc8 <HAL_TIM_IC_Start_IT+0x24>
 8001fac:	e8df f001 	tbb	[pc, r1]
 8001fb0:	0c0c0c07 	.word	0x0c0c0c07
 8001fb4:	0c0c0c17 	.word	0x0c0c0c17
 8001fb8:	0c0c0c1c 	.word	0x0c0c0c1c
 8001fbc:	21          	.byte	0x21
 8001fbd:	00          	.byte	0x00
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8001fbe:	6802      	ldr	r2, [r0, #0]
 8001fc0:	68d3      	ldr	r3, [r2, #12]
 8001fc2:	f043 0302 	orr.w	r3, r3, #2
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8001fc6:	60d3      	str	r3, [r2, #12]
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001fc8:	6820      	ldr	r0, [r4, #0]
 8001fca:	2201      	movs	r2, #1
 8001fcc:	f7ff ffb4 	bl	8001f38 <TIM_CCxChannelCmd>
  __HAL_TIM_ENABLE(htim);  
 8001fd0:	6822      	ldr	r2, [r4, #0]
 8001fd2:	6813      	ldr	r3, [r2, #0]
 8001fd4:	f043 0301 	orr.w	r3, r3, #1
 8001fd8:	6013      	str	r3, [r2, #0]
} 
 8001fda:	2000      	movs	r0, #0
 8001fdc:	bd10      	pop	{r4, pc}
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8001fde:	6802      	ldr	r2, [r0, #0]
 8001fe0:	68d3      	ldr	r3, [r2, #12]
 8001fe2:	f043 0304 	orr.w	r3, r3, #4
 8001fe6:	e7ee      	b.n	8001fc6 <HAL_TIM_IC_Start_IT+0x22>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8001fe8:	6802      	ldr	r2, [r0, #0]
 8001fea:	68d3      	ldr	r3, [r2, #12]
 8001fec:	f043 0308 	orr.w	r3, r3, #8
 8001ff0:	e7e9      	b.n	8001fc6 <HAL_TIM_IC_Start_IT+0x22>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8001ff2:	6802      	ldr	r2, [r0, #0]
 8001ff4:	68d3      	ldr	r3, [r2, #12]
 8001ff6:	f043 0310 	orr.w	r3, r3, #16
 8001ffa:	e7e4      	b.n	8001fc6 <HAL_TIM_IC_Start_IT+0x22>

08001ffc <TIM_OC5_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U; 

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8001ffc:	6a03      	ldr	r3, [r0, #32]
 8001ffe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002002:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002004:	6a03      	ldr	r3, [r0, #32]
{
 8002006:	b530      	push	{r4, r5, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2; 
 8002008:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800200a:	6d42      	ldr	r2, [r0, #84]	; 0x54

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800200c:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800200e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002012:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpccmrx |= OC_Config->OCMode;
 8002016:	432a      	orrs	r2, r5
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8002018:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC5P;
 800201a:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800201e:	ea43 4305 	orr.w	r3, r3, r5, lsl #16

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8002022:	4d11      	ldr	r5, [pc, #68]	; (8002068 <TIM_OC5_SetConfig+0x6c>)
 8002024:	42a8      	cmp	r0, r5
 8002026:	d013      	beq.n	8002050 <TIM_OC5_SetConfig+0x54>
 8002028:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 800202c:	42a8      	cmp	r0, r5
 800202e:	d00f      	beq.n	8002050 <TIM_OC5_SetConfig+0x54>
 8002030:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 8002034:	42a8      	cmp	r0, r5
 8002036:	d00b      	beq.n	8002050 <TIM_OC5_SetConfig+0x54>
 8002038:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800203c:	42a8      	cmp	r0, r5
 800203e:	d007      	beq.n	8002050 <TIM_OC5_SetConfig+0x54>
 8002040:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002044:	42a8      	cmp	r0, r5
 8002046:	d003      	beq.n	8002050 <TIM_OC5_SetConfig+0x54>
 8002048:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 800204c:	42a8      	cmp	r0, r5
 800204e:	d104      	bne.n	800205a <TIM_OC5_SetConfig+0x5e>
  {   
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8002050:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS5;
 8002052:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8002056:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800205a:	6044      	str	r4, [r0, #4]
  
  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800205c:	6542      	str	r2, [r0, #84]	; 0x54
  
  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800205e:	684a      	ldr	r2, [r1, #4]
 8002060:	6582      	str	r2, [r0, #88]	; 0x58
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 8002062:	6203      	str	r3, [r0, #32]
 8002064:	bd30      	pop	{r4, r5, pc}
 8002066:	bf00      	nop
 8002068:	40012c00 	.word	0x40012c00

0800206c <TIM_OC6_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U; 

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800206c:	6a03      	ldr	r3, [r0, #32]
 800206e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8002072:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002074:	6a03      	ldr	r3, [r0, #32]
{
 8002076:	b530      	push	{r4, r5, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2; 
 8002078:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800207a:	6d42      	ldr	r2, [r0, #84]	; 0x54
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800207c:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800207e:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8002082:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002086:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800208a:	688d      	ldr	r5, [r1, #8]
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800208c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8002090:	ea43 5305 	orr.w	r3, r3, r5, lsl #20

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8002094:	4d10      	ldr	r5, [pc, #64]	; (80020d8 <TIM_OC6_SetConfig+0x6c>)
 8002096:	42a8      	cmp	r0, r5
 8002098:	d013      	beq.n	80020c2 <TIM_OC6_SetConfig+0x56>
 800209a:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 800209e:	42a8      	cmp	r0, r5
 80020a0:	d00f      	beq.n	80020c2 <TIM_OC6_SetConfig+0x56>
 80020a2:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 80020a6:	42a8      	cmp	r0, r5
 80020a8:	d00b      	beq.n	80020c2 <TIM_OC6_SetConfig+0x56>
 80020aa:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80020ae:	42a8      	cmp	r0, r5
 80020b0:	d007      	beq.n	80020c2 <TIM_OC6_SetConfig+0x56>
 80020b2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80020b6:	42a8      	cmp	r0, r5
 80020b8:	d003      	beq.n	80020c2 <TIM_OC6_SetConfig+0x56>
 80020ba:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 80020be:	42a8      	cmp	r0, r5
 80020c0:	d104      	bne.n	80020cc <TIM_OC6_SetConfig+0x60>
  {   
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80020c2:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS6;
 80020c4:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80020c8:	ea44 2485 	orr.w	r4, r4, r5, lsl #10
  }
  
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80020cc:	6044      	str	r4, [r0, #4]
  
  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80020ce:	6542      	str	r2, [r0, #84]	; 0x54
  
  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80020d0:	684a      	ldr	r2, [r1, #4]
 80020d2:	65c2      	str	r2, [r0, #92]	; 0x5c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 80020d4:	6203      	str	r3, [r0, #32]
 80020d6:	bd30      	pop	{r4, r5, pc}
 80020d8:	40012c00 	.word	0x40012c00

080020dc <HAL_TIM_PWM_ConfigChannel>:
{
 80020dc:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 80020de:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80020e2:	2b01      	cmp	r3, #1
{
 80020e4:	4604      	mov	r4, r0
 80020e6:	460d      	mov	r5, r1
 80020e8:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 80020ec:	d010      	beq.n	8002110 <HAL_TIM_PWM_ConfigChannel+0x34>
 80020ee:	2301      	movs	r3, #1
  switch (Channel)
 80020f0:	2a08      	cmp	r2, #8
  __HAL_LOCK(htim);
 80020f2:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 80020f6:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  switch (Channel)
 80020fa:	d043      	beq.n	8002184 <HAL_TIM_PWM_ConfigChannel+0xa8>
 80020fc:	d809      	bhi.n	8002112 <HAL_TIM_PWM_ConfigChannel+0x36>
 80020fe:	b1fa      	cbz	r2, 8002140 <HAL_TIM_PWM_ConfigChannel+0x64>
 8002100:	2a04      	cmp	r2, #4
 8002102:	d02e      	beq.n	8002162 <HAL_TIM_PWM_ConfigChannel+0x86>
  htim->State = HAL_TIM_STATE_READY;
 8002104:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 8002106:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8002108:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800210c:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8002110:	bd38      	pop	{r3, r4, r5, pc}
  switch (Channel)
 8002112:	2a10      	cmp	r2, #16
 8002114:	d047      	beq.n	80021a6 <HAL_TIM_PWM_ConfigChannel+0xca>
 8002116:	2a14      	cmp	r2, #20
 8002118:	d056      	beq.n	80021c8 <HAL_TIM_PWM_ConfigChannel+0xec>
 800211a:	2a0c      	cmp	r2, #12
 800211c:	d1f2      	bne.n	8002104 <HAL_TIM_PWM_ConfigChannel+0x28>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800211e:	6820      	ldr	r0, [r4, #0]
 8002120:	f7ff fe14 	bl	8001d4c <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002124:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;  
 8002126:	6929      	ldr	r1, [r5, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002128:	69da      	ldr	r2, [r3, #28]
 800212a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800212e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002130:	69da      	ldr	r2, [r3, #28]
 8002132:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002136:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;  
 8002138:	69da      	ldr	r2, [r3, #28]
 800213a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800213e:	e030      	b.n	80021a2 <HAL_TIM_PWM_ConfigChannel+0xc6>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002140:	6820      	ldr	r0, [r4, #0]
 8002142:	f7ff fd15 	bl	8001b70 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002146:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002148:	6929      	ldr	r1, [r5, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800214a:	699a      	ldr	r2, [r3, #24]
 800214c:	f042 0208 	orr.w	r2, r2, #8
 8002150:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002152:	699a      	ldr	r2, [r3, #24]
 8002154:	f022 0204 	bic.w	r2, r2, #4
 8002158:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800215a:	699a      	ldr	r2, [r3, #24]
 800215c:	430a      	orrs	r2, r1
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800215e:	619a      	str	r2, [r3, #24]
    break;
 8002160:	e7d0      	b.n	8002104 <HAL_TIM_PWM_ConfigChannel+0x28>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002162:	6820      	ldr	r0, [r4, #0]
 8002164:	f7ff fd58 	bl	8001c18 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002168:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800216a:	6929      	ldr	r1, [r5, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800216c:	699a      	ldr	r2, [r3, #24]
 800216e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002172:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002174:	699a      	ldr	r2, [r3, #24]
 8002176:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800217a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800217c:	699a      	ldr	r2, [r3, #24]
 800217e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002182:	e7ec      	b.n	800215e <HAL_TIM_PWM_ConfigChannel+0x82>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002184:	6820      	ldr	r0, [r4, #0]
 8002186:	f7ff fd95 	bl	8001cb4 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800218a:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;  
 800218c:	6929      	ldr	r1, [r5, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800218e:	69da      	ldr	r2, [r3, #28]
 8002190:	f042 0208 	orr.w	r2, r2, #8
 8002194:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002196:	69da      	ldr	r2, [r3, #28]
 8002198:	f022 0204 	bic.w	r2, r2, #4
 800219c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;  
 800219e:	69da      	ldr	r2, [r3, #28]
 80021a0:	430a      	orrs	r2, r1
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;  
 80021a2:	61da      	str	r2, [r3, #28]
    break;
 80021a4:	e7ae      	b.n	8002104 <HAL_TIM_PWM_ConfigChannel+0x28>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80021a6:	6820      	ldr	r0, [r4, #0]
 80021a8:	f7ff ff28 	bl	8001ffc <TIM_OC5_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80021ac:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR3 |= sConfig->OCFastMode;  
 80021ae:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80021b0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80021b2:	f042 0208 	orr.w	r2, r2, #8
 80021b6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80021b8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80021ba:	f022 0204 	bic.w	r2, r2, #4
 80021be:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;  
 80021c0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80021c2:	430a      	orrs	r2, r1
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;  
 80021c4:	655a      	str	r2, [r3, #84]	; 0x54
    break;
 80021c6:	e79d      	b.n	8002104 <HAL_TIM_PWM_ConfigChannel+0x28>
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80021c8:	6820      	ldr	r0, [r4, #0]
 80021ca:	f7ff ff4f 	bl	800206c <TIM_OC6_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80021ce:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;  
 80021d0:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80021d2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80021d4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80021d8:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80021da:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80021dc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80021e0:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;  
 80021e2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80021e4:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80021e8:	e7ec      	b.n	80021c4 <HAL_TIM_PWM_ConfigChannel+0xe8>
	...

080021ec <HAL_TIMEx_MasterConfigSynchronization>:
  __HAL_LOCK(htim);
 80021ec:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80021f0:	2b01      	cmp	r3, #1
{
 80021f2:	b530      	push	{r4, r5, lr}
  __HAL_LOCK(htim);
 80021f4:	d020      	beq.n	8002238 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
  tmpcr2 = htim->Instance->CR2;
 80021f6:	6802      	ldr	r2, [r0, #0]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80021f8:	4d10      	ldr	r5, [pc, #64]	; (800223c <HAL_TIMEx_MasterConfigSynchronization+0x50>)
  tmpcr2 = htim->Instance->CR2;
 80021fa:	6853      	ldr	r3, [r2, #4]
  tmpsmcr = htim->Instance->SMCR;
 80021fc:	6894      	ldr	r4, [r2, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80021fe:	42aa      	cmp	r2, r5
 8002200:	d007      	beq.n	8002212 <HAL_TIMEx_MasterConfigSynchronization+0x26>
 8002202:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8002206:	42aa      	cmp	r2, r5
 8002208:	d003      	beq.n	8002212 <HAL_TIMEx_MasterConfigSynchronization+0x26>
 800220a:	f505 55e0 	add.w	r5, r5, #7168	; 0x1c00
 800220e:	42aa      	cmp	r2, r5
 8002210:	d103      	bne.n	800221a <HAL_TIMEx_MasterConfigSynchronization+0x2e>
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002212:	684d      	ldr	r5, [r1, #4]
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002214:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002218:	432b      	orrs	r3, r5
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800221a:	680d      	ldr	r5, [r1, #0]
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800221c:	6889      	ldr	r1, [r1, #8]
  tmpcr2 &= ~TIM_CR2_MMS;
 800221e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002222:	432b      	orrs	r3, r5
  tmpsmcr &= ~TIM_SMCR_MSM;
 8002224:	f024 0480 	bic.w	r4, r4, #128	; 0x80
  htim->Instance->CR2 = tmpcr2;
 8002228:	6053      	str	r3, [r2, #4]
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800222a:	4321      	orrs	r1, r4
  __HAL_UNLOCK(htim);
 800222c:	2300      	movs	r3, #0
  htim->Instance->SMCR = tmpsmcr;
 800222e:	6091      	str	r1, [r2, #8]
  __HAL_UNLOCK(htim);
 8002230:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 8002234:	4618      	mov	r0, r3
 8002236:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(htim);
 8002238:	2002      	movs	r0, #2
} 
 800223a:	bd30      	pop	{r4, r5, pc}
 800223c:	40012c00 	.word	0x40012c00

08002240 <HAL_TIMEx_ConfigBreakDeadTime>:
  __HAL_LOCK(htim);
 8002240:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8002244:	2b01      	cmp	r3, #1
{
 8002246:	b510      	push	{r4, lr}
  __HAL_LOCK(htim);
 8002248:	d03c      	beq.n	80022c4 <HAL_TIMEx_ConfigBreakDeadTime+0x84>
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800224a:	68cb      	ldr	r3, [r1, #12]
 800224c:	688a      	ldr	r2, [r1, #8]
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800224e:	4c1e      	ldr	r4, [pc, #120]	; (80022c8 <HAL_TIMEx_ConfigBreakDeadTime+0x88>)
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8002250:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002254:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8002256:	684a      	ldr	r2, [r1, #4]
 8002258:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800225c:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800225e:	680a      	ldr	r2, [r1, #0]
 8002260:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002264:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8002266:	690a      	ldr	r2, [r1, #16]
 8002268:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800226c:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800226e:	694a      	ldr	r2, [r1, #20]
 8002270:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002274:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8002276:	6a8a      	ldr	r2, [r1, #40]	; 0x28
  MODIFY_REG(tmpbdtr, TIM_BDTR_MOE, sBreakDeadTimeConfig->AutomaticOutput);
 8002278:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800227c:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << BDTR_BKF_SHIFT));
 800227e:	698a      	ldr	r2, [r1, #24]
 8002280:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 8002284:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8002288:	6802      	ldr	r2, [r0, #0]
 800228a:	42a2      	cmp	r2, r4
 800228c:	d007      	beq.n	800229e <HAL_TIMEx_ConfigBreakDeadTime+0x5e>
 800228e:	f504 6400 	add.w	r4, r4, #2048	; 0x800
 8002292:	42a2      	cmp	r2, r4
 8002294:	d003      	beq.n	800229e <HAL_TIMEx_ConfigBreakDeadTime+0x5e>
 8002296:	f504 54e0 	add.w	r4, r4, #7168	; 0x1c00
 800229a:	42a2      	cmp	r2, r4
 800229c:	d10c      	bne.n	80022b8 <HAL_TIMEx_ConfigBreakDeadTime+0x78>
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << BDTR_BK2F_SHIFT));
 800229e:	6a4c      	ldr	r4, [r1, #36]	; 0x24
 80022a0:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80022a4:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80022a8:	69cc      	ldr	r4, [r1, #28]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80022aa:	6a09      	ldr	r1, [r1, #32]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80022ac:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80022b0:	4323      	orrs	r3, r4
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80022b2:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 80022b6:	430b      	orrs	r3, r1
  htim->Instance->BDTR = tmpbdtr;
 80022b8:	6453      	str	r3, [r2, #68]	; 0x44
  __HAL_UNLOCK(htim);
 80022ba:	2300      	movs	r3, #0
 80022bc:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 80022c0:	4618      	mov	r0, r3
 80022c2:	bd10      	pop	{r4, pc}
  __HAL_LOCK(htim);
 80022c4:	2002      	movs	r0, #2
}
 80022c6:	bd10      	pop	{r4, pc}
 80022c8:	40012c00 	.word	0x40012c00

080022cc <HAL_TIMEx_CommutationCallback>:
 80022cc:	4770      	bx	lr

080022ce <HAL_TIMEx_BreakCallback>:
 80022ce:	4770      	bx	lr

080022d0 <HAL_TIMEx_Break2Callback>:
{
 80022d0:	4770      	bx	lr

080022d2 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80022d2:	6803      	ldr	r3, [r0, #0]
 80022d4:	681a      	ldr	r2, [r3, #0]
 80022d6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80022da:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80022dc:	689a      	ldr	r2, [r3, #8]
 80022de:	f022 0201 	bic.w	r2, r2, #1
 80022e2:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80022e4:	2320      	movs	r3, #32
 80022e6:	f880 306a 	strb.w	r3, [r0, #106]	; 0x6a
 80022ea:	4770      	bx	lr

080022ec <HAL_UART_Receive_IT>:
  if(huart->RxState == HAL_UART_STATE_READY)
 80022ec:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
 80022f0:	2b20      	cmp	r3, #32
 80022f2:	d13d      	bne.n	8002370 <HAL_UART_Receive_IT+0x84>
    if((pData == NULL ) || (Size == 0U))
 80022f4:	2900      	cmp	r1, #0
 80022f6:	d039      	beq.n	800236c <HAL_UART_Receive_IT+0x80>
 80022f8:	2a00      	cmp	r2, #0
 80022fa:	d037      	beq.n	800236c <HAL_UART_Receive_IT+0x80>
    __HAL_LOCK(huart);
 80022fc:	f890 3068 	ldrb.w	r3, [r0, #104]	; 0x68
 8002300:	2b01      	cmp	r3, #1
 8002302:	d035      	beq.n	8002370 <HAL_UART_Receive_IT+0x84>
 8002304:	2301      	movs	r3, #1
 8002306:	f880 3068 	strb.w	r3, [r0, #104]	; 0x68
    UART_MASK_COMPUTATION(huart);
 800230a:	6883      	ldr	r3, [r0, #8]
    huart->pRxBuffPtr = pData;
 800230c:	6541      	str	r1, [r0, #84]	; 0x54
    UART_MASK_COMPUTATION(huart);
 800230e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    huart->RxXferSize = Size;
 8002312:	f8a0 2058 	strh.w	r2, [r0, #88]	; 0x58
    huart->RxXferCount = Size;
 8002316:	f8a0 205a 	strh.w	r2, [r0, #90]	; 0x5a
    UART_MASK_COMPUTATION(huart);
 800231a:	d119      	bne.n	8002350 <HAL_UART_Receive_IT+0x64>
 800231c:	6903      	ldr	r3, [r0, #16]
 800231e:	b9ab      	cbnz	r3, 800234c <HAL_UART_Receive_IT+0x60>
 8002320:	f240 13ff 	movw	r3, #511	; 0x1ff
 8002324:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002328:	2300      	movs	r3, #0
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800232a:	2222      	movs	r2, #34	; 0x22
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800232c:	66c3      	str	r3, [r0, #108]	; 0x6c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800232e:	f880 206a 	strb.w	r2, [r0, #106]	; 0x6a
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002332:	6802      	ldr	r2, [r0, #0]
    __HAL_UNLOCK(huart);
 8002334:	f880 3068 	strb.w	r3, [r0, #104]	; 0x68
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002338:	6891      	ldr	r1, [r2, #8]
 800233a:	f041 0101 	orr.w	r1, r1, #1
 800233e:	6091      	str	r1, [r2, #8]
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8002340:	6811      	ldr	r1, [r2, #0]
 8002342:	f441 7190 	orr.w	r1, r1, #288	; 0x120
 8002346:	6011      	str	r1, [r2, #0]
    return HAL_OK;
 8002348:	4618      	mov	r0, r3
 800234a:	4770      	bx	lr
    UART_MASK_COMPUTATION(huart);
 800234c:	23ff      	movs	r3, #255	; 0xff
 800234e:	e7e9      	b.n	8002324 <HAL_UART_Receive_IT+0x38>
 8002350:	b923      	cbnz	r3, 800235c <HAL_UART_Receive_IT+0x70>
 8002352:	6903      	ldr	r3, [r0, #16]
 8002354:	2b00      	cmp	r3, #0
 8002356:	d0f9      	beq.n	800234c <HAL_UART_Receive_IT+0x60>
 8002358:	237f      	movs	r3, #127	; 0x7f
 800235a:	e7e3      	b.n	8002324 <HAL_UART_Receive_IT+0x38>
 800235c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002360:	d1e2      	bne.n	8002328 <HAL_UART_Receive_IT+0x3c>
 8002362:	6903      	ldr	r3, [r0, #16]
 8002364:	2b00      	cmp	r3, #0
 8002366:	d0f7      	beq.n	8002358 <HAL_UART_Receive_IT+0x6c>
 8002368:	233f      	movs	r3, #63	; 0x3f
 800236a:	e7db      	b.n	8002324 <HAL_UART_Receive_IT+0x38>
      return HAL_ERROR;
 800236c:	2001      	movs	r0, #1
 800236e:	4770      	bx	lr
    return HAL_BUSY;
 8002370:	2002      	movs	r0, #2
}
 8002372:	4770      	bx	lr

08002374 <HAL_UART_TxCpltCallback>:
 8002374:	4770      	bx	lr

08002376 <HAL_UART_ErrorCallback>:
 8002376:	4770      	bx	lr

08002378 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002378:	b508      	push	{r3, lr}
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)(hdma->Parent);
 800237a:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxXferCount = 0U;
 800237c:	2300      	movs	r3, #0
 800237e:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8002382:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52

  HAL_UART_ErrorCallback(huart);
 8002386:	f7ff fff6 	bl	8002376 <HAL_UART_ErrorCallback>
 800238a:	bd08      	pop	{r3, pc}

0800238c <UART_SetConfig>:
{
 800238c:	b538      	push	{r3, r4, r5, lr}
 800238e:	4604      	mov	r4, r0
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8002390:	6805      	ldr	r5, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002392:	6921      	ldr	r1, [r4, #16]
 8002394:	68a2      	ldr	r2, [r4, #8]
 8002396:	69c3      	ldr	r3, [r0, #28]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8002398:	6828      	ldr	r0, [r5, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800239a:	430a      	orrs	r2, r1
 800239c:	6961      	ldr	r1, [r4, #20]
 800239e:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 80023a0:	4977      	ldr	r1, [pc, #476]	; (8002580 <UART_SetConfig+0x1f4>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80023a2:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 80023a4:	4001      	ands	r1, r0
 80023a6:	430a      	orrs	r2, r1
 80023a8:	602a      	str	r2, [r5, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80023aa:	686a      	ldr	r2, [r5, #4]
 80023ac:	68e1      	ldr	r1, [r4, #12]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 80023ae:	6a20      	ldr	r0, [r4, #32]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80023b0:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 80023b4:	430a      	orrs	r2, r1
 80023b6:	606a      	str	r2, [r5, #4]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 80023b8:	68a9      	ldr	r1, [r5, #8]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 80023ba:	69a2      	ldr	r2, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 80023bc:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 80023c0:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 80023c2:	430a      	orrs	r2, r1
 80023c4:	60aa      	str	r2, [r5, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 80023c6:	4a6f      	ldr	r2, [pc, #444]	; (8002584 <UART_SetConfig+0x1f8>)
 80023c8:	4295      	cmp	r5, r2
 80023ca:	d112      	bne.n	80023f2 <UART_SetConfig+0x66>
 80023cc:	f502 4258 	add.w	r2, r2, #55296	; 0xd800
 80023d0:	496d      	ldr	r1, [pc, #436]	; (8002588 <UART_SetConfig+0x1fc>)
 80023d2:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80023d4:	f002 0203 	and.w	r2, r2, #3
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80023d8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80023dc:	5c8a      	ldrb	r2, [r1, r2]
 80023de:	d066      	beq.n	80024ae <UART_SetConfig+0x122>
    switch (clocksource)
 80023e0:	2a08      	cmp	r2, #8
 80023e2:	d819      	bhi.n	8002418 <UART_SetConfig+0x8c>
 80023e4:	e8df f002 	tbb	[pc, r2]
 80023e8:	189e92c2 	.word	0x189e92c2
 80023ec:	181818a9 	.word	0x181818a9
 80023f0:	ac          	.byte	0xac
 80023f1:	00          	.byte	0x00
  UART_GETCLOCKSOURCE(huart, clocksource);
 80023f2:	4a66      	ldr	r2, [pc, #408]	; (800258c <UART_SetConfig+0x200>)
 80023f4:	4295      	cmp	r5, r2
 80023f6:	d124      	bne.n	8002442 <UART_SetConfig+0xb6>
 80023f8:	f502 32e6 	add.w	r2, r2, #117760	; 0x1cc00
 80023fc:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80023fe:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
 8002402:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8002406:	f000 80a0 	beq.w	800254a <UART_SetConfig+0x1be>
 800240a:	d807      	bhi.n	800241c <UART_SetConfig+0x90>
 800240c:	2a00      	cmp	r2, #0
 800240e:	f000 80aa 	beq.w	8002566 <UART_SetConfig+0x1da>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002412:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002416:	d076      	beq.n	8002506 <UART_SetConfig+0x17a>
        ret = HAL_ERROR;
 8002418:	2001      	movs	r0, #1
  return ret;
 800241a:	bd38      	pop	{r3, r4, r5, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 800241c:	f5b2 3f00 	cmp.w	r2, #131072	; 0x20000
 8002420:	f000 8099 	beq.w	8002556 <UART_SetConfig+0x1ca>
 8002424:	f5b2 3f40 	cmp.w	r2, #196608	; 0x30000
 8002428:	d1f3      	bne.n	8002412 <UART_SetConfig+0x86>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800242a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800242e:	d179      	bne.n	8002524 <UART_SetConfig+0x198>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8002430:	6860      	ldr	r0, [r4, #4]
 8002432:	0843      	lsrs	r3, r0, #1
 8002434:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8002438:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800243c:	fbb3 f3f0 	udiv	r3, r3, r0
 8002440:	e054      	b.n	80024ec <UART_SetConfig+0x160>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002442:	4a53      	ldr	r2, [pc, #332]	; (8002590 <UART_SetConfig+0x204>)
 8002444:	4295      	cmp	r5, r2
 8002446:	d10e      	bne.n	8002466 <UART_SetConfig+0xda>
 8002448:	f502 32e4 	add.w	r2, r2, #116736	; 0x1c800
 800244c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800244e:	f402 2240 	and.w	r2, r2, #786432	; 0xc0000
 8002452:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
 8002456:	d078      	beq.n	800254a <UART_SetConfig+0x1be>
 8002458:	d9d8      	bls.n	800240c <UART_SetConfig+0x80>
 800245a:	f5b2 2f00 	cmp.w	r2, #524288	; 0x80000
 800245e:	d07a      	beq.n	8002556 <UART_SetConfig+0x1ca>
 8002460:	f5b2 2f40 	cmp.w	r2, #786432	; 0xc0000
 8002464:	e7e0      	b.n	8002428 <UART_SetConfig+0x9c>
 8002466:	4a4b      	ldr	r2, [pc, #300]	; (8002594 <UART_SetConfig+0x208>)
 8002468:	4295      	cmp	r5, r2
 800246a:	d10e      	bne.n	800248a <UART_SetConfig+0xfe>
 800246c:	f502 32e2 	add.w	r2, r2, #115712	; 0x1c400
 8002470:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002472:	f402 1240 	and.w	r2, r2, #3145728	; 0x300000
 8002476:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 800247a:	d066      	beq.n	800254a <UART_SetConfig+0x1be>
 800247c:	d9c6      	bls.n	800240c <UART_SetConfig+0x80>
 800247e:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
 8002482:	d068      	beq.n	8002556 <UART_SetConfig+0x1ca>
 8002484:	f5b2 1f40 	cmp.w	r2, #3145728	; 0x300000
 8002488:	e7ce      	b.n	8002428 <UART_SetConfig+0x9c>
 800248a:	4a43      	ldr	r2, [pc, #268]	; (8002598 <UART_SetConfig+0x20c>)
 800248c:	4295      	cmp	r5, r2
 800248e:	d1c0      	bne.n	8002412 <UART_SetConfig+0x86>
 8002490:	f502 32e0 	add.w	r2, r2, #114688	; 0x1c000
 8002494:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002496:	f402 0240 	and.w	r2, r2, #12582912	; 0xc00000
 800249a:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
 800249e:	d054      	beq.n	800254a <UART_SetConfig+0x1be>
 80024a0:	d9b4      	bls.n	800240c <UART_SetConfig+0x80>
 80024a2:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
 80024a6:	d056      	beq.n	8002556 <UART_SetConfig+0x1ca>
 80024a8:	f5b2 0f40 	cmp.w	r2, #12582912	; 0xc00000
 80024ac:	e7bc      	b.n	8002428 <UART_SetConfig+0x9c>
    switch (clocksource)
 80024ae:	2a08      	cmp	r2, #8
 80024b0:	d829      	bhi.n	8002506 <UART_SetConfig+0x17a>
 80024b2:	a301      	add	r3, pc, #4	; (adr r3, 80024b8 <UART_SetConfig+0x12c>)
 80024b4:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
 80024b8:	080024dd 	.word	0x080024dd
 80024bc:	08002501 	.word	0x08002501
 80024c0:	08002431 	.word	0x08002431
 80024c4:	08002507 	.word	0x08002507
 80024c8:	08002551 	.word	0x08002551
 80024cc:	08002507 	.word	0x08002507
 80024d0:	08002507 	.word	0x08002507
 80024d4:	08002507 	.word	0x08002507
 80024d8:	0800255d 	.word	0x0800255d
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80024dc:	f7ff f880 	bl	80015e0 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 80024e0:	6861      	ldr	r1, [r4, #4]
 80024e2:	084a      	lsrs	r2, r1, #1
 80024e4:	eb02 0340 	add.w	r3, r2, r0, lsl #1
 80024e8:	fbb3 f3f1 	udiv	r3, r3, r1
 80024ec:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 80024ee:	2000      	movs	r0, #0
    brrtemp = usartdiv & 0xFFF0U;
 80024f0:	f023 020f 	bic.w	r2, r3, #15
    huart->Instance->BRR = brrtemp;
 80024f4:	6821      	ldr	r1, [r4, #0]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80024f6:	f3c3 0342 	ubfx	r3, r3, #1, #3
    huart->Instance->BRR = brrtemp;
 80024fa:	4313      	orrs	r3, r2
 80024fc:	60cb      	str	r3, [r1, #12]
 80024fe:	bd38      	pop	{r3, r4, r5, pc}
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8002500:	f7ff f886 	bl	8001610 <HAL_RCC_GetPCLK2Freq>
 8002504:	e7ec      	b.n	80024e0 <UART_SetConfig+0x154>
        ret = HAL_ERROR;
 8002506:	2001      	movs	r0, #1
  uint16_t usartdiv                   = 0x0000U;
 8002508:	2300      	movs	r3, #0
 800250a:	e7f1      	b.n	80024f0 <UART_SetConfig+0x164>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 800250c:	f7ff f880 	bl	8001610 <HAL_RCC_GetPCLK2Freq>
 8002510:	6863      	ldr	r3, [r4, #4]
 8002512:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8002516:	fbb0 f0f3 	udiv	r0, r0, r3
 800251a:	4b1a      	ldr	r3, [pc, #104]	; (8002584 <UART_SetConfig+0x1f8>)
 800251c:	b280      	uxth	r0, r0
 800251e:	60d8      	str	r0, [r3, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8002520:	2000      	movs	r0, #0
        break;
 8002522:	bd38      	pop	{r3, r4, r5, pc}
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8002524:	6862      	ldr	r2, [r4, #4]
 8002526:	0853      	lsrs	r3, r2, #1
 8002528:	f503 03f4 	add.w	r3, r3, #7995392	; 0x7a0000
 800252c:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8002530:	fbb3 f3f2 	udiv	r3, r3, r2
 8002534:	b29b      	uxth	r3, r3
 8002536:	60eb      	str	r3, [r5, #12]
 8002538:	e7f2      	b.n	8002520 <UART_SetConfig+0x194>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800253a:	f7fe ff5d 	bl	80013f8 <HAL_RCC_GetSysClockFreq>
 800253e:	e017      	b.n	8002570 <UART_SetConfig+0x1e4>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8002540:	6862      	ldr	r2, [r4, #4]
 8002542:	0853      	lsrs	r3, r2, #1
 8002544:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8002548:	e7f2      	b.n	8002530 <UART_SetConfig+0x1a4>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800254a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800254e:	d1f4      	bne.n	800253a <UART_SetConfig+0x1ae>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8002550:	f7fe ff52 	bl	80013f8 <HAL_RCC_GetSysClockFreq>
 8002554:	e7c4      	b.n	80024e0 <UART_SetConfig+0x154>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002556:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800255a:	d1f1      	bne.n	8002540 <UART_SetConfig+0x1b4>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800255c:	6860      	ldr	r0, [r4, #4]
 800255e:	0843      	lsrs	r3, r0, #1
 8002560:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8002564:	e76a      	b.n	800243c <UART_SetConfig+0xb0>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002566:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800256a:	d0b7      	beq.n	80024dc <UART_SetConfig+0x150>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 800256c:	f7ff f838 	bl	80015e0 <HAL_RCC_GetPCLK1Freq>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8002570:	6863      	ldr	r3, [r4, #4]
 8002572:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8002576:	fbb0 f0f3 	udiv	r0, r0, r3
 800257a:	b280      	uxth	r0, r0
 800257c:	60e8      	str	r0, [r5, #12]
 800257e:	e7cf      	b.n	8002520 <UART_SetConfig+0x194>
 8002580:	efff69f3 	.word	0xefff69f3
 8002584:	40013800 	.word	0x40013800
 8002588:	08004614 	.word	0x08004614
 800258c:	40004400 	.word	0x40004400
 8002590:	40004800 	.word	0x40004800
 8002594:	40004c00 	.word	0x40004c00
 8002598:	40005000 	.word	0x40005000

0800259c <UART_AdvFeatureConfig>:
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800259c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800259e:	07da      	lsls	r2, r3, #31
{
 80025a0:	b510      	push	{r4, lr}
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80025a2:	d506      	bpl.n	80025b2 <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80025a4:	6801      	ldr	r1, [r0, #0]
 80025a6:	6a84      	ldr	r4, [r0, #40]	; 0x28
 80025a8:	684a      	ldr	r2, [r1, #4]
 80025aa:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 80025ae:	4322      	orrs	r2, r4
 80025b0:	604a      	str	r2, [r1, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80025b2:	079c      	lsls	r4, r3, #30
 80025b4:	d506      	bpl.n	80025c4 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80025b6:	6801      	ldr	r1, [r0, #0]
 80025b8:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 80025ba:	684a      	ldr	r2, [r1, #4]
 80025bc:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80025c0:	4322      	orrs	r2, r4
 80025c2:	604a      	str	r2, [r1, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80025c4:	0759      	lsls	r1, r3, #29
 80025c6:	d506      	bpl.n	80025d6 <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80025c8:	6801      	ldr	r1, [r0, #0]
 80025ca:	6b04      	ldr	r4, [r0, #48]	; 0x30
 80025cc:	684a      	ldr	r2, [r1, #4]
 80025ce:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80025d2:	4322      	orrs	r2, r4
 80025d4:	604a      	str	r2, [r1, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80025d6:	071a      	lsls	r2, r3, #28
 80025d8:	d506      	bpl.n	80025e8 <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80025da:	6801      	ldr	r1, [r0, #0]
 80025dc:	6b44      	ldr	r4, [r0, #52]	; 0x34
 80025de:	684a      	ldr	r2, [r1, #4]
 80025e0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80025e4:	4322      	orrs	r2, r4
 80025e6:	604a      	str	r2, [r1, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80025e8:	06dc      	lsls	r4, r3, #27
 80025ea:	d506      	bpl.n	80025fa <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80025ec:	6801      	ldr	r1, [r0, #0]
 80025ee:	6b84      	ldr	r4, [r0, #56]	; 0x38
 80025f0:	688a      	ldr	r2, [r1, #8]
 80025f2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80025f6:	4322      	orrs	r2, r4
 80025f8:	608a      	str	r2, [r1, #8]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80025fa:	0699      	lsls	r1, r3, #26
 80025fc:	d506      	bpl.n	800260c <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80025fe:	6801      	ldr	r1, [r0, #0]
 8002600:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8002602:	688a      	ldr	r2, [r1, #8]
 8002604:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002608:	4322      	orrs	r2, r4
 800260a:	608a      	str	r2, [r1, #8]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800260c:	065a      	lsls	r2, r3, #25
 800260e:	d50f      	bpl.n	8002630 <UART_AdvFeatureConfig+0x94>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002610:	6801      	ldr	r1, [r0, #0]
 8002612:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8002614:	684a      	ldr	r2, [r1, #4]
 8002616:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 800261a:	4322      	orrs	r2, r4
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800261c:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002620:	604a      	str	r2, [r1, #4]
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002622:	d105      	bne.n	8002630 <UART_AdvFeatureConfig+0x94>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002624:	684a      	ldr	r2, [r1, #4]
 8002626:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8002628:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 800262c:	4322      	orrs	r2, r4
 800262e:	604a      	str	r2, [r1, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002630:	061b      	lsls	r3, r3, #24
 8002632:	d506      	bpl.n	8002642 <UART_AdvFeatureConfig+0xa6>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002634:	6802      	ldr	r2, [r0, #0]
 8002636:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8002638:	6853      	ldr	r3, [r2, #4]
 800263a:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 800263e:	430b      	orrs	r3, r1
 8002640:	6053      	str	r3, [r2, #4]
 8002642:	bd10      	pop	{r4, pc}

08002644 <UART_WaitOnFlagUntilTimeout>:
{
 8002644:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002648:	9d06      	ldr	r5, [sp, #24]
 800264a:	4604      	mov	r4, r0
 800264c:	460f      	mov	r7, r1
 800264e:	4616      	mov	r6, r2
 8002650:	4698      	mov	r8, r3
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002652:	6821      	ldr	r1, [r4, #0]
 8002654:	69ca      	ldr	r2, [r1, #28]
 8002656:	ea37 0302 	bics.w	r3, r7, r2
 800265a:	bf0c      	ite	eq
 800265c:	2201      	moveq	r2, #1
 800265e:	2200      	movne	r2, #0
 8002660:	42b2      	cmp	r2, r6
 8002662:	d002      	beq.n	800266a <UART_WaitOnFlagUntilTimeout+0x26>
  return HAL_OK;
 8002664:	2000      	movs	r0, #0
}
 8002666:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(Timeout != HAL_MAX_DELAY)
 800266a:	1c6b      	adds	r3, r5, #1
 800266c:	d0f2      	beq.n	8002654 <UART_WaitOnFlagUntilTimeout+0x10>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 800266e:	b99d      	cbnz	r5, 8002698 <UART_WaitOnFlagUntilTimeout+0x54>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002670:	6823      	ldr	r3, [r4, #0]
 8002672:	681a      	ldr	r2, [r3, #0]
 8002674:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002678:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800267a:	689a      	ldr	r2, [r3, #8]
 800267c:	f022 0201 	bic.w	r2, r2, #1
 8002680:	609a      	str	r2, [r3, #8]
        huart->gState  = HAL_UART_STATE_READY;
 8002682:	2320      	movs	r3, #32
 8002684:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
        huart->RxState = HAL_UART_STATE_READY;
 8002688:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
        __HAL_UNLOCK(huart);
 800268c:	2300      	movs	r3, #0
 800268e:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
 8002692:	2003      	movs	r0, #3
 8002694:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8002698:	f7fe faa2 	bl	8000be0 <HAL_GetTick>
 800269c:	eba0 0008 	sub.w	r0, r0, r8
 80026a0:	4285      	cmp	r5, r0
 80026a2:	d2d6      	bcs.n	8002652 <UART_WaitOnFlagUntilTimeout+0xe>
 80026a4:	e7e4      	b.n	8002670 <UART_WaitOnFlagUntilTimeout+0x2c>

080026a6 <HAL_UART_Transmit>:
{
 80026a6:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80026aa:	461f      	mov	r7, r3
  if(huart->gState == HAL_UART_STATE_READY)
 80026ac:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 80026b0:	2b20      	cmp	r3, #32
{
 80026b2:	4604      	mov	r4, r0
 80026b4:	460d      	mov	r5, r1
 80026b6:	4690      	mov	r8, r2
  if(huart->gState == HAL_UART_STATE_READY)
 80026b8:	d14c      	bne.n	8002754 <HAL_UART_Transmit+0xae>
    if((pData == NULL ) || (Size == 0U))
 80026ba:	2900      	cmp	r1, #0
 80026bc:	d048      	beq.n	8002750 <HAL_UART_Transmit+0xaa>
 80026be:	2a00      	cmp	r2, #0
 80026c0:	d046      	beq.n	8002750 <HAL_UART_Transmit+0xaa>
    __HAL_LOCK(huart);
 80026c2:	f890 3068 	ldrb.w	r3, [r0, #104]	; 0x68
 80026c6:	2b01      	cmp	r3, #1
 80026c8:	d044      	beq.n	8002754 <HAL_UART_Transmit+0xae>
 80026ca:	2301      	movs	r3, #1
 80026cc:	f880 3068 	strb.w	r3, [r0, #104]	; 0x68
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80026d0:	2300      	movs	r3, #0
 80026d2:	66c3      	str	r3, [r0, #108]	; 0x6c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80026d4:	2321      	movs	r3, #33	; 0x21
 80026d6:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
    tickstart = HAL_GetTick();
 80026da:	f7fe fa81 	bl	8000be0 <HAL_GetTick>
    huart->TxXferSize = Size;
 80026de:	f8a4 8050 	strh.w	r8, [r4, #80]	; 0x50
    tickstart = HAL_GetTick();
 80026e2:	4606      	mov	r6, r0
    huart->TxXferCount = Size;
 80026e4:	f8a4 8052 	strh.w	r8, [r4, #82]	; 0x52
    while(huart->TxXferCount > 0U)
 80026e8:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
 80026ec:	b292      	uxth	r2, r2
 80026ee:	b962      	cbnz	r2, 800270a <HAL_UART_Transmit+0x64>
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80026f0:	9700      	str	r7, [sp, #0]
 80026f2:	4633      	mov	r3, r6
 80026f4:	2140      	movs	r1, #64	; 0x40
 80026f6:	4620      	mov	r0, r4
 80026f8:	f7ff ffa4 	bl	8002644 <UART_WaitOnFlagUntilTimeout>
 80026fc:	b998      	cbnz	r0, 8002726 <HAL_UART_Transmit+0x80>
    huart->gState = HAL_UART_STATE_READY;
 80026fe:	2320      	movs	r3, #32
 8002700:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
    __HAL_UNLOCK(huart);
 8002704:	f884 0068 	strb.w	r0, [r4, #104]	; 0x68
    return HAL_OK;
 8002708:	e00e      	b.n	8002728 <HAL_UART_Transmit+0x82>
      huart->TxXferCount--;
 800270a:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800270e:	9700      	str	r7, [sp, #0]
      huart->TxXferCount--;
 8002710:	3b01      	subs	r3, #1
 8002712:	b29b      	uxth	r3, r3
 8002714:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002718:	2200      	movs	r2, #0
 800271a:	4633      	mov	r3, r6
 800271c:	2180      	movs	r1, #128	; 0x80
 800271e:	4620      	mov	r0, r4
 8002720:	f7ff ff90 	bl	8002644 <UART_WaitOnFlagUntilTimeout>
 8002724:	b118      	cbz	r0, 800272e <HAL_UART_Transmit+0x88>
        return HAL_TIMEOUT;
 8002726:	2003      	movs	r0, #3
}
 8002728:	b002      	add	sp, #8
 800272a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800272e:	68a3      	ldr	r3, [r4, #8]
 8002730:	6822      	ldr	r2, [r4, #0]
 8002732:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002736:	d107      	bne.n	8002748 <HAL_UART_Transmit+0xa2>
 8002738:	6923      	ldr	r3, [r4, #16]
 800273a:	b92b      	cbnz	r3, 8002748 <HAL_UART_Transmit+0xa2>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 800273c:	f835 3b02 	ldrh.w	r3, [r5], #2
 8002740:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002744:	8513      	strh	r3, [r2, #40]	; 0x28
        pData += 2U;
 8002746:	e7cf      	b.n	80026e8 <HAL_UART_Transmit+0x42>
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFFU);
 8002748:	782b      	ldrb	r3, [r5, #0]
 800274a:	8513      	strh	r3, [r2, #40]	; 0x28
 800274c:	3501      	adds	r5, #1
 800274e:	e7cb      	b.n	80026e8 <HAL_UART_Transmit+0x42>
      return  HAL_ERROR;
 8002750:	2001      	movs	r0, #1
 8002752:	e7e9      	b.n	8002728 <HAL_UART_Transmit+0x82>
    return HAL_BUSY;
 8002754:	2002      	movs	r0, #2
 8002756:	e7e7      	b.n	8002728 <HAL_UART_Transmit+0x82>

08002758 <UART_CheckIdleState>:
{
 8002758:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800275a:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800275c:	2600      	movs	r6, #0
 800275e:	66c6      	str	r6, [r0, #108]	; 0x6c
  tickstart = HAL_GetTick();
 8002760:	f7fe fa3e 	bl	8000be0 <HAL_GetTick>
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002764:	6823      	ldr	r3, [r4, #0]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	071a      	lsls	r2, r3, #28
  tickstart = HAL_GetTick();
 800276a:	4605      	mov	r5, r0
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800276c:	d417      	bmi.n	800279e <UART_CheckIdleState+0x46>
  if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800276e:	6823      	ldr	r3, [r4, #0]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	075b      	lsls	r3, r3, #29
 8002774:	d50a      	bpl.n	800278c <UART_CheckIdleState+0x34>
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002776:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800277a:	9300      	str	r3, [sp, #0]
 800277c:	2200      	movs	r2, #0
 800277e:	462b      	mov	r3, r5
 8002780:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8002784:	4620      	mov	r0, r4
 8002786:	f7ff ff5d 	bl	8002644 <UART_WaitOnFlagUntilTimeout>
 800278a:	b9a0      	cbnz	r0, 80027b6 <UART_CheckIdleState+0x5e>
  huart->gState  = HAL_UART_STATE_READY;
 800278c:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 800278e:	2000      	movs	r0, #0
  huart->gState  = HAL_UART_STATE_READY;
 8002790:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  __HAL_UNLOCK(huart);
 8002794:	f884 0068 	strb.w	r0, [r4, #104]	; 0x68
  huart->RxState = HAL_UART_STATE_READY;
 8002798:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
  return HAL_OK;
 800279c:	e00c      	b.n	80027b8 <UART_CheckIdleState+0x60>
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800279e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80027a2:	9300      	str	r3, [sp, #0]
 80027a4:	4632      	mov	r2, r6
 80027a6:	4603      	mov	r3, r0
 80027a8:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80027ac:	4620      	mov	r0, r4
 80027ae:	f7ff ff49 	bl	8002644 <UART_WaitOnFlagUntilTimeout>
 80027b2:	2800      	cmp	r0, #0
 80027b4:	d0db      	beq.n	800276e <UART_CheckIdleState+0x16>
      return HAL_TIMEOUT;
 80027b6:	2003      	movs	r0, #3
}
 80027b8:	b002      	add	sp, #8
 80027ba:	bd70      	pop	{r4, r5, r6, pc}

080027bc <HAL_UART_Init>:
{
 80027bc:	b510      	push	{r4, lr}
  if(huart == NULL)
 80027be:	4604      	mov	r4, r0
 80027c0:	b360      	cbz	r0, 800281c <HAL_UART_Init+0x60>
  if(huart->gState == HAL_UART_STATE_RESET)
 80027c2:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 80027c6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80027ca:	b91b      	cbnz	r3, 80027d4 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 80027cc:	f880 2068 	strb.w	r2, [r0, #104]	; 0x68
    HAL_UART_MspInit(huart);
 80027d0:	f001 f9c4 	bl	8003b5c <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 80027d4:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80027d6:	2324      	movs	r3, #36	; 0x24
 80027d8:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  __HAL_UART_DISABLE(huart);
 80027dc:	6813      	ldr	r3, [r2, #0]
 80027de:	f023 0301 	bic.w	r3, r3, #1
 80027e2:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 80027e4:	4620      	mov	r0, r4
 80027e6:	f7ff fdd1 	bl	800238c <UART_SetConfig>
 80027ea:	2801      	cmp	r0, #1
 80027ec:	d016      	beq.n	800281c <HAL_UART_Init+0x60>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80027ee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80027f0:	b113      	cbz	r3, 80027f8 <HAL_UART_Init+0x3c>
    UART_AdvFeatureConfig(huart);
 80027f2:	4620      	mov	r0, r4
 80027f4:	f7ff fed2 	bl	800259c <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80027f8:	6823      	ldr	r3, [r4, #0]
 80027fa:	685a      	ldr	r2, [r3, #4]
 80027fc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002800:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002802:	689a      	ldr	r2, [r3, #8]
 8002804:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002808:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 800280a:	681a      	ldr	r2, [r3, #0]
 800280c:	f042 0201 	orr.w	r2, r2, #1
  return (UART_CheckIdleState(huart));
 8002810:	4620      	mov	r0, r4
  __HAL_UART_ENABLE(huart);
 8002812:	601a      	str	r2, [r3, #0]
}
 8002814:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return (UART_CheckIdleState(huart));
 8002818:	f7ff bf9e 	b.w	8002758 <UART_CheckIdleState>
}
 800281c:	2001      	movs	r0, #1
 800281e:	bd10      	pop	{r4, pc}

08002820 <UART_Transmit_IT>:
HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
  uint16_t* tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002820:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 8002824:	2b21      	cmp	r3, #33	; 0x21
 8002826:	d127      	bne.n	8002878 <UART_Transmit_IT+0x58>
  {
    if(huart->TxXferCount == 0U)
 8002828:	f8b0 3052 	ldrh.w	r3, [r0, #82]	; 0x52
 800282c:	6802      	ldr	r2, [r0, #0]
 800282e:	b29b      	uxth	r3, r3
 8002830:	b94b      	cbnz	r3, 8002846 <UART_Transmit_IT+0x26>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8002832:	6811      	ldr	r1, [r2, #0]
 8002834:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8002838:	6011      	str	r1, [r2, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800283a:	6811      	ldr	r1, [r2, #0]
 800283c:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 8002840:	6011      	str	r1, [r2, #0]
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0xFFU);
      }
      huart->TxXferCount--;

      return HAL_OK;
 8002842:	2000      	movs	r0, #0
 8002844:	4770      	bx	lr
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002846:	6883      	ldr	r3, [r0, #8]
 8002848:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800284c:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 800284e:	d10e      	bne.n	800286e <UART_Transmit_IT+0x4e>
 8002850:	6901      	ldr	r1, [r0, #16]
 8002852:	b961      	cbnz	r1, 800286e <UART_Transmit_IT+0x4e>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 8002854:	f833 1b02 	ldrh.w	r1, [r3], #2
 8002858:	f3c1 0108 	ubfx	r1, r1, #0, #9
 800285c:	8511      	strh	r1, [r2, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 800285e:	64c3      	str	r3, [r0, #76]	; 0x4c
      huart->TxXferCount--;
 8002860:	f8b0 3052 	ldrh.w	r3, [r0, #82]	; 0x52
 8002864:	3b01      	subs	r3, #1
 8002866:	b29b      	uxth	r3, r3
 8002868:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
 800286c:	e7e9      	b.n	8002842 <UART_Transmit_IT+0x22>
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0xFFU);
 800286e:	1c59      	adds	r1, r3, #1
 8002870:	64c1      	str	r1, [r0, #76]	; 0x4c
 8002872:	781b      	ldrb	r3, [r3, #0]
 8002874:	8513      	strh	r3, [r2, #40]	; 0x28
 8002876:	e7f3      	b.n	8002860 <UART_Transmit_IT+0x40>
    }
  }
  else
  {
    return HAL_BUSY;
 8002878:	2002      	movs	r0, #2
  }
}
 800287a:	4770      	bx	lr

0800287c <UART_EndTransmit_IT>:
  * @retval HAL status
  */
HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800287c:	6801      	ldr	r1, [r0, #0]
{
 800287e:	b508      	push	{r3, lr}
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8002880:	680b      	ldr	r3, [r1, #0]
 8002882:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002886:	600b      	str	r3, [r1, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002888:	2320      	movs	r3, #32
 800288a:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69

  HAL_UART_TxCpltCallback(huart);
 800288e:	f7ff fd71 	bl	8002374 <HAL_UART_TxCpltCallback>

  return HAL_OK;
}
 8002892:	2000      	movs	r0, #0
 8002894:	bd08      	pop	{r3, pc}

08002896 <UART_Receive_IT>:
  uint16_t* tmp;
  uint16_t  uhMask = huart->Mask;
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if(huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002896:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
 800289a:	2b22      	cmp	r3, #34	; 0x22
{
 800289c:	b510      	push	{r4, lr}
 800289e:	6803      	ldr	r3, [r0, #0]
  if(huart->RxState == HAL_UART_STATE_BUSY_RX)
 80028a0:	d129      	bne.n	80028f6 <UART_Receive_IT+0x60>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80028a2:	8c99      	ldrh	r1, [r3, #36]	; 0x24
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80028a4:	6883      	ldr	r3, [r0, #8]
  uint16_t  uhMask = huart->Mask;
 80028a6:	f8b0 205c 	ldrh.w	r2, [r0, #92]	; 0x5c
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80028aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80028ae:	ea02 0201 	and.w	r2, r2, r1
 80028b2:	6d43      	ldr	r3, [r0, #84]	; 0x54
 80028b4:	d11b      	bne.n	80028ee <UART_Receive_IT+0x58>
 80028b6:	6901      	ldr	r1, [r0, #16]
 80028b8:	b9c9      	cbnz	r1, 80028ee <UART_Receive_IT+0x58>
    {
      tmp = (uint16_t*) huart->pRxBuffPtr ;
      *tmp = (uint16_t)(uhdata & uhMask);
 80028ba:	f823 2b02 	strh.w	r2, [r3], #2
      huart->pRxBuffPtr +=2U;
 80028be:	6543      	str	r3, [r0, #84]	; 0x54
    else
    {
      *huart->pRxBuffPtr++ = (uint8_t)(uhdata & (uint8_t)uhMask);
    }

    if(--huart->RxXferCount == 0U)
 80028c0:	f8b0 405a 	ldrh.w	r4, [r0, #90]	; 0x5a
 80028c4:	3c01      	subs	r4, #1
 80028c6:	b2a4      	uxth	r4, r4
 80028c8:	f8a0 405a 	strh.w	r4, [r0, #90]	; 0x5a
 80028cc:	b96c      	cbnz	r4, 80028ea <UART_Receive_IT+0x54>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80028ce:	6803      	ldr	r3, [r0, #0]
 80028d0:	681a      	ldr	r2, [r3, #0]
 80028d2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80028d6:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80028d8:	689a      	ldr	r2, [r3, #8]
 80028da:	f022 0201 	bic.w	r2, r2, #1
 80028de:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80028e0:	2320      	movs	r3, #32
 80028e2:	f880 306a 	strb.w	r3, [r0, #106]	; 0x6a

      HAL_UART_RxCpltCallback(huart);
 80028e6:	f000 f8ed 	bl	8002ac4 <HAL_UART_RxCpltCallback>

      return HAL_OK;
    }

    return HAL_OK;
 80028ea:	2000      	movs	r0, #0
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);

    return HAL_BUSY;
  }
}
 80028ec:	bd10      	pop	{r4, pc}
      *huart->pRxBuffPtr++ = (uint8_t)(uhdata & (uint8_t)uhMask);
 80028ee:	1c59      	adds	r1, r3, #1
 80028f0:	6541      	str	r1, [r0, #84]	; 0x54
 80028f2:	701a      	strb	r2, [r3, #0]
 80028f4:	e7e4      	b.n	80028c0 <UART_Receive_IT+0x2a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80028f6:	699a      	ldr	r2, [r3, #24]
 80028f8:	f042 0208 	orr.w	r2, r2, #8
 80028fc:	619a      	str	r2, [r3, #24]
    return HAL_BUSY;
 80028fe:	2002      	movs	r0, #2
 8002900:	bd10      	pop	{r4, pc}
	...

08002904 <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002904:	6802      	ldr	r2, [r0, #0]
 8002906:	69d3      	ldr	r3, [r2, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002908:	6811      	ldr	r1, [r2, #0]
{
 800290a:	b570      	push	{r4, r5, r6, lr}
  if (errorflags == RESET)
 800290c:	f013 050f 	ands.w	r5, r3, #15
{
 8002910:	4604      	mov	r4, r0
  if (errorflags == RESET)
 8002912:	d107      	bne.n	8002924 <HAL_UART_IRQHandler+0x20>
    if(((isrflags & USART_ISR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002914:	069e      	lsls	r6, r3, #26
 8002916:	d505      	bpl.n	8002924 <HAL_UART_IRQHandler+0x20>
 8002918:	068e      	lsls	r6, r1, #26
 800291a:	d503      	bpl.n	8002924 <HAL_UART_IRQHandler+0x20>
}
 800291c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      UART_Receive_IT(huart);
 8002920:	f7ff bfb9 	b.w	8002896 <UART_Receive_IT>
  cr3its = READ_REG(huart->Instance->CR3);
 8002924:	6890      	ldr	r0, [r2, #8]
  if(   (errorflags != RESET)
 8002926:	2d00      	cmp	r5, #0
 8002928:	d05c      	beq.n	80029e4 <HAL_UART_IRQHandler+0xe0>
     && (   ((cr3its & USART_CR3_EIE) != RESET)
 800292a:	f010 0501 	ands.w	r5, r0, #1
 800292e:	d102      	bne.n	8002936 <HAL_UART_IRQHandler+0x32>
         || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)) )
 8002930:	f411 7f90 	tst.w	r1, #288	; 0x120
 8002934:	d056      	beq.n	80029e4 <HAL_UART_IRQHandler+0xe0>
    if(((isrflags & USART_ISR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002936:	07d8      	lsls	r0, r3, #31
 8002938:	d507      	bpl.n	800294a <HAL_UART_IRQHandler+0x46>
 800293a:	05ce      	lsls	r6, r1, #23
 800293c:	d505      	bpl.n	800294a <HAL_UART_IRQHandler+0x46>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_PEF);
 800293e:	2001      	movs	r0, #1
 8002940:	6210      	str	r0, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002942:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8002944:	f040 0001 	orr.w	r0, r0, #1
 8002948:	66e0      	str	r0, [r4, #108]	; 0x6c
    if(((isrflags & USART_ISR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800294a:	0798      	lsls	r0, r3, #30
 800294c:	d506      	bpl.n	800295c <HAL_UART_IRQHandler+0x58>
 800294e:	b12d      	cbz	r5, 800295c <HAL_UART_IRQHandler+0x58>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_FEF);
 8002950:	2002      	movs	r0, #2
 8002952:	6210      	str	r0, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002954:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8002956:	f040 0004 	orr.w	r0, r0, #4
 800295a:	66e0      	str	r0, [r4, #108]	; 0x6c
    if(((isrflags & USART_ISR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800295c:	075e      	lsls	r6, r3, #29
 800295e:	d506      	bpl.n	800296e <HAL_UART_IRQHandler+0x6a>
 8002960:	b12d      	cbz	r5, 800296e <HAL_UART_IRQHandler+0x6a>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_NEF);
 8002962:	2004      	movs	r0, #4
 8002964:	6210      	str	r0, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002966:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8002968:	f040 0002 	orr.w	r0, r0, #2
 800296c:	66e0      	str	r0, [r4, #108]	; 0x6c
    if(((isrflags & USART_ISR_ORE) != RESET) &&
 800296e:	0718      	lsls	r0, r3, #28
 8002970:	d507      	bpl.n	8002982 <HAL_UART_IRQHandler+0x7e>
 8002972:	068e      	lsls	r6, r1, #26
 8002974:	d400      	bmi.n	8002978 <HAL_UART_IRQHandler+0x74>
       (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8002976:	b125      	cbz	r5, 8002982 <HAL_UART_IRQHandler+0x7e>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_OREF);
 8002978:	2008      	movs	r0, #8
 800297a:	6210      	str	r0, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800297c:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 800297e:	4302      	orrs	r2, r0
 8002980:	66e2      	str	r2, [r4, #108]	; 0x6c
    if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002982:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8002984:	2a00      	cmp	r2, #0
 8002986:	d050      	beq.n	8002a2a <HAL_UART_IRQHandler+0x126>
      if(((isrflags & USART_ISR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002988:	0698      	lsls	r0, r3, #26
 800298a:	d504      	bpl.n	8002996 <HAL_UART_IRQHandler+0x92>
 800298c:	068a      	lsls	r2, r1, #26
 800298e:	d502      	bpl.n	8002996 <HAL_UART_IRQHandler+0x92>
        UART_Receive_IT(huart);
 8002990:	4620      	mov	r0, r4
 8002992:	f7ff ff80 	bl	8002896 <UART_Receive_IT>
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 8002996:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8002998:	071b      	lsls	r3, r3, #28
        UART_EndRxTransfer(huart);
 800299a:	4620      	mov	r0, r4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 800299c:	d404      	bmi.n	80029a8 <HAL_UART_IRQHandler+0xa4>
          (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)))
 800299e:	6823      	ldr	r3, [r4, #0]
 80029a0:	689d      	ldr	r5, [r3, #8]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 80029a2:	f015 0540 	ands.w	r5, r5, #64	; 0x40
 80029a6:	d019      	beq.n	80029dc <HAL_UART_IRQHandler+0xd8>
        UART_EndRxTransfer(huart);
 80029a8:	f7ff fc93 	bl	80022d2 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80029ac:	6823      	ldr	r3, [r4, #0]
 80029ae:	689a      	ldr	r2, [r3, #8]
 80029b0:	0656      	lsls	r6, r2, #25
 80029b2:	d50f      	bpl.n	80029d4 <HAL_UART_IRQHandler+0xd0>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80029b4:	689a      	ldr	r2, [r3, #8]
          if(huart->hdmarx != NULL)
 80029b6:	6e60      	ldr	r0, [r4, #100]	; 0x64
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80029b8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80029bc:	609a      	str	r2, [r3, #8]
          if(huart->hdmarx != NULL)
 80029be:	b148      	cbz	r0, 80029d4 <HAL_UART_IRQHandler+0xd0>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80029c0:	4b1a      	ldr	r3, [pc, #104]	; (8002a2c <HAL_UART_IRQHandler+0x128>)
 80029c2:	6343      	str	r3, [r0, #52]	; 0x34
            if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80029c4:	f7fe f99b 	bl	8000cfe <HAL_DMA_Abort_IT>
 80029c8:	b378      	cbz	r0, 8002a2a <HAL_UART_IRQHandler+0x126>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80029ca:	6e60      	ldr	r0, [r4, #100]	; 0x64
}
 80029cc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80029d0:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80029d2:	4718      	bx	r3
            HAL_UART_ErrorCallback(huart);
 80029d4:	4620      	mov	r0, r4
 80029d6:	f7ff fcce 	bl	8002376 <HAL_UART_ErrorCallback>
 80029da:	bd70      	pop	{r4, r5, r6, pc}
        HAL_UART_ErrorCallback(huart);
 80029dc:	f7ff fccb 	bl	8002376 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80029e0:	66e5      	str	r5, [r4, #108]	; 0x6c
 80029e2:	bd70      	pop	{r4, r5, r6, pc}
  if(((isrflags & USART_ISR_WUF) != RESET) && ((cr3its & USART_CR3_WUFIE) != RESET))
 80029e4:	02dd      	lsls	r5, r3, #11
 80029e6:	d50e      	bpl.n	8002a06 <HAL_UART_IRQHandler+0x102>
 80029e8:	0246      	lsls	r6, r0, #9
 80029ea:	d50c      	bpl.n	8002a06 <HAL_UART_IRQHandler+0x102>
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_WUF);
 80029ec:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80029f0:	6213      	str	r3, [r2, #32]
    huart->gState  = HAL_UART_STATE_READY;
 80029f2:	2320      	movs	r3, #32
 80029f4:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
    HAL_UARTEx_WakeupCallback(huart);
 80029f8:	4620      	mov	r0, r4
    huart->RxState = HAL_UART_STATE_READY;
 80029fa:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
}
 80029fe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HAL_UARTEx_WakeupCallback(huart);
 8002a02:	f000 b815 	b.w	8002a30 <HAL_UARTEx_WakeupCallback>
  if(((isrflags & USART_ISR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002a06:	061d      	lsls	r5, r3, #24
 8002a08:	d506      	bpl.n	8002a18 <HAL_UART_IRQHandler+0x114>
 8002a0a:	0608      	lsls	r0, r1, #24
 8002a0c:	d504      	bpl.n	8002a18 <HAL_UART_IRQHandler+0x114>
    UART_Transmit_IT(huart);
 8002a0e:	4620      	mov	r0, r4
}
 8002a10:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    UART_Transmit_IT(huart);
 8002a14:	f7ff bf04 	b.w	8002820 <UART_Transmit_IT>
  if(((isrflags & USART_ISR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002a18:	065a      	lsls	r2, r3, #25
 8002a1a:	d506      	bpl.n	8002a2a <HAL_UART_IRQHandler+0x126>
 8002a1c:	064b      	lsls	r3, r1, #25
 8002a1e:	d504      	bpl.n	8002a2a <HAL_UART_IRQHandler+0x126>
    UART_EndTransmit_IT(huart);
 8002a20:	4620      	mov	r0, r4
}
 8002a22:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    UART_EndTransmit_IT(huart);
 8002a26:	f7ff bf29 	b.w	800287c <UART_EndTransmit_IT>
 8002a2a:	bd70      	pop	{r4, r5, r6, pc}
 8002a2c:	08002379 	.word	0x08002379

08002a30 <HAL_UARTEx_WakeupCallback>:
  * @brief  UART wakeup from Stop mode callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8002a30:	4770      	bx	lr
	...

08002a34 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002a34:	b510      	push	{r4, lr}
 8002a36:	b0a6      	sub	sp, #152	; 0x98
  RCC_PeriphCLKInitTypeDef PeriphClkInit;

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002a38:	2301      	movs	r3, #1
 8002a3a:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = 16;
 8002a3c:	2310      	movs	r3, #16
 8002a3e:	930a      	str	r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002a40:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002a44:	930d      	str	r3, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8002a46:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002a4a:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8002a4c:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002a4e:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8002a50:	2300      	movs	r3, #0
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002a52:	9406      	str	r4, [sp, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002a54:	940c      	str	r4, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8002a56:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002a58:	f7fe fa50 	bl	8000efc <HAL_RCC_OscConfig>
 8002a5c:	b100      	cbz	r0, 8002a60 <SystemClock_Config+0x2c>
 8002a5e:	e7fe      	b.n	8002a5e <SystemClock_Config+0x2a>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002a60:	230f      	movs	r3, #15
 8002a62:	9301      	str	r3, [sp, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002a64:	9003      	str	r0, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002a66:	f44f 6380 	mov.w	r3, #1024	; 0x400
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002a6a:	9005      	str	r0, [sp, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002a6c:	4621      	mov	r1, r4
 8002a6e:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002a70:	9402      	str	r4, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002a72:	9304      	str	r3, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002a74:	f7fe fcec 	bl	8001450 <HAL_RCC_ClockConfig>
 8002a78:	b100      	cbz	r0, 8002a7c <SystemClock_Config+0x48>
 8002a7a:	e7fe      	b.n	8002a7a <SystemClock_Config+0x46>
  {
    _Error_Handler(__FILE__, __LINE__);
  }

  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_UART4
 8002a7c:	4b10      	ldr	r3, [pc, #64]	; (8002ac0 <SystemClock_Config+0x8c>)
                              |RCC_PERIPHCLK_TIM1|RCC_PERIPHCLK_TIM15
                              |RCC_PERIPHCLK_TIM8|RCC_PERIPHCLK_TIM34;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002a7e:	9013      	str	r0, [sp, #76]	; 0x4c
  PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8002a80:	9015      	str	r0, [sp, #84]	; 0x54
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 8002a82:	901d      	str	r0, [sp, #116]	; 0x74
  PeriphClkInit.Tim15ClockSelection = RCC_TIM15CLK_HCLK;
 8002a84:	9021      	str	r0, [sp, #132]	; 0x84
  PeriphClkInit.Tim8ClockSelection = RCC_TIM8CLK_HCLK;
 8002a86:	9020      	str	r0, [sp, #128]	; 0x80
  PeriphClkInit.Tim34ClockSelection = RCC_TIM34CLK_HCLK;
 8002a88:	901f      	str	r0, [sp, #124]	; 0x7c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002a8a:	a810      	add	r0, sp, #64	; 0x40
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_UART4
 8002a8c:	9310      	str	r3, [sp, #64]	; 0x40
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002a8e:	f7fe fdd7 	bl	8001640 <HAL_RCCEx_PeriphCLKConfig>
 8002a92:	4604      	mov	r4, r0
 8002a94:	b100      	cbz	r0, 8002a98 <SystemClock_Config+0x64>
 8002a96:	e7fe      	b.n	8002a96 <SystemClock_Config+0x62>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8002a98:	f7fe fd9c 	bl	80015d4 <HAL_RCC_GetHCLKFreq>
 8002a9c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002aa0:	fbb0 f0f3 	udiv	r0, r0, r3
 8002aa4:	f7fe f904 	bl	8000cb0 <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8002aa8:	2004      	movs	r0, #4
 8002aaa:	f7fe f917 	bl	8000cdc <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8002aae:	4622      	mov	r2, r4
 8002ab0:	4621      	mov	r1, r4
 8002ab2:	f04f 30ff 	mov.w	r0, #4294967295
 8002ab6:	f7fe f8bb 	bl	8000c30 <HAL_NVIC_SetPriority>
}
 8002aba:	b026      	add	sp, #152	; 0x98
 8002abc:	bd10      	pop	{r4, pc}
 8002abe:	bf00      	nop
 8002ac0:	0060300a 	.word	0x0060300a

08002ac4 <HAL_UART_RxCpltCallback>:
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

}

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8002ac4:	b538      	push	{r3, r4, r5, lr}
	if(huart == &huart4){
 8002ac6:	4b12      	ldr	r3, [pc, #72]	; (8002b10 <HAL_UART_RxCpltCallback+0x4c>)
 8002ac8:	4298      	cmp	r0, r3
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8002aca:	4604      	mov	r4, r0
	if(huart == &huart4){
 8002acc:	d10e      	bne.n	8002aec <HAL_UART_RxCpltCallback+0x28>
		flag = 1;
 8002ace:	4b11      	ldr	r3, [pc, #68]	; (8002b14 <HAL_UART_RxCpltCallback+0x50>)
		HAL_UART_Transmit(&huart2,&rx_data,1,0xFFFF);
 8002ad0:	4911      	ldr	r1, [pc, #68]	; (8002b18 <HAL_UART_RxCpltCallback+0x54>)
 8002ad2:	4812      	ldr	r0, [pc, #72]	; (8002b1c <HAL_UART_RxCpltCallback+0x58>)
		flag = 1;
 8002ad4:	2501      	movs	r5, #1
 8002ad6:	601d      	str	r5, [r3, #0]
		HAL_UART_Transmit(&huart2,&rx_data,1,0xFFFF);
 8002ad8:	462a      	mov	r2, r5
 8002ada:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002ade:	f7ff fde2 	bl	80026a6 <HAL_UART_Transmit>
		//HAL_GPIO_TogglePin(LD2_GPIO_Port,LD2_Pin);
		HAL_UART_Receive_IT(&huart4,&rx_data,1);
 8002ae2:	462a      	mov	r2, r5
 8002ae4:	490c      	ldr	r1, [pc, #48]	; (8002b18 <HAL_UART_RxCpltCallback+0x54>)
 8002ae6:	4620      	mov	r0, r4
 8002ae8:	f7ff fc00 	bl	80022ec <HAL_UART_Receive_IT>
	}
	if(huart == &huart2){
 8002aec:	4b0b      	ldr	r3, [pc, #44]	; (8002b1c <HAL_UART_RxCpltCallback+0x58>)
 8002aee:	429c      	cmp	r4, r3
 8002af0:	d10d      	bne.n	8002b0e <HAL_UART_RxCpltCallback+0x4a>
		HAL_UART_Transmit(&huart4,&rx_data,1,0xFFFF);
 8002af2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002af6:	2201      	movs	r2, #1
 8002af8:	4907      	ldr	r1, [pc, #28]	; (8002b18 <HAL_UART_RxCpltCallback+0x54>)
 8002afa:	4805      	ldr	r0, [pc, #20]	; (8002b10 <HAL_UART_RxCpltCallback+0x4c>)
 8002afc:	f7ff fdd3 	bl	80026a6 <HAL_UART_Transmit>
		//flag = 1;
		HAL_UART_Receive_IT(&huart2,&rx_data,1);
 8002b00:	4620      	mov	r0, r4
 8002b02:	2201      	movs	r2, #1
 8002b04:	4904      	ldr	r1, [pc, #16]	; (8002b18 <HAL_UART_RxCpltCallback+0x54>)
	}
}
 8002b06:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		HAL_UART_Receive_IT(&huart2,&rx_data,1);
 8002b0a:	f7ff bbef 	b.w	80022ec <HAL_UART_Receive_IT>
 8002b0e:	bd38      	pop	{r3, r4, r5, pc}
 8002b10:	20000234 	.word	0x20000234
 8002b14:	20000000 	.word	0x20000000
 8002b18:	20000050 	.word	0x20000050
 8002b1c:	200002a4 	.word	0x200002a4

08002b20 <turn_left>:
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK){
		_Error_Handler(__FILE__, __LINE__);
	}
	HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_3);
}
void turn_left(int binf,int bin,int ainf,int ain){
 8002b20:	b570      	push	{r4, r5, r6, lr}
 8002b22:	461d      	mov	r5, r3
	isforward = 1;
 8002b24:	4b1e      	ldr	r3, [pc, #120]	; (8002ba0 <turn_left+0x80>)
void turn_left(int binf,int bin,int ainf,int ain){
 8002b26:	b088      	sub	sp, #32
 8002b28:	4614      	mov	r4, r2
	isforward = 1;
 8002b2a:	2201      	movs	r2, #1
 8002b2c:	601a      	str	r2, [r3, #0]
	TIM_OC_InitTypeDef sConfigOC;
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002b2e:	2360      	movs	r3, #96	; 0x60
void turn_left(int binf,int bin,int ainf,int ain){
 8002b30:	4606      	mov	r6, r0
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002b32:	9301      	str	r3, [sp, #4]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
	//uint8_t tmp[] = " Turn Left\n\r";
	//HAL_UART_Transmit(&huart2,tmp,strlen((char*)tmp),0xFFFF);

	sConfigOC.Pulse = bin;
 8002b34:	9102      	str	r1, [sp, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002b36:	2300      	movs	r3, #0
	if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK){ // BIN
 8002b38:	220c      	movs	r2, #12
 8002b3a:	a901      	add	r1, sp, #4
 8002b3c:	4819      	ldr	r0, [pc, #100]	; (8002ba4 <turn_left+0x84>)
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002b3e:	9303      	str	r3, [sp, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002b40:	9305      	str	r3, [sp, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK){ // BIN
 8002b42:	f7ff facb 	bl	80020dc <HAL_TIM_PWM_ConfigChannel>
 8002b46:	b100      	cbz	r0, 8002b4a <turn_left+0x2a>
 8002b48:	e7fe      	b.n	8002b48 <turn_left+0x28>
		_Error_Handler(__FILE__, __LINE__);
	}
	HAL_TIM_PWM_Start(&htim4,TIM_CHANNEL_4);
 8002b4a:	210c      	movs	r1, #12
 8002b4c:	4815      	ldr	r0, [pc, #84]	; (8002ba4 <turn_left+0x84>)
 8002b4e:	f7ff f9ff 	bl	8001f50 <HAL_TIM_PWM_Start>
	sConfigOC.Pulse = binf;  // 2
	if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK){
 8002b52:	2208      	movs	r2, #8
 8002b54:	a901      	add	r1, sp, #4
 8002b56:	4813      	ldr	r0, [pc, #76]	; (8002ba4 <turn_left+0x84>)
	sConfigOC.Pulse = binf;  // 2
 8002b58:	9602      	str	r6, [sp, #8]
	if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK){
 8002b5a:	f7ff fabf 	bl	80020dc <HAL_TIM_PWM_ConfigChannel>
 8002b5e:	b100      	cbz	r0, 8002b62 <turn_left+0x42>
 8002b60:	e7fe      	b.n	8002b60 <turn_left+0x40>
		_Error_Handler(__FILE__, __LINE__);
	}
	HAL_TIM_PWM_Start(&htim4,TIM_CHANNEL_3);
 8002b62:	2108      	movs	r1, #8
 8002b64:	480f      	ldr	r0, [pc, #60]	; (8002ba4 <turn_left+0x84>)
 8002b66:	f7ff f9f3 	bl	8001f50 <HAL_TIM_PWM_Start>

	sConfigOC.Pulse = ain;
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK){ // AIN
 8002b6a:	220c      	movs	r2, #12
 8002b6c:	a901      	add	r1, sp, #4
 8002b6e:	480e      	ldr	r0, [pc, #56]	; (8002ba8 <turn_left+0x88>)
	sConfigOC.Pulse = ain;
 8002b70:	9502      	str	r5, [sp, #8]
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK){ // AIN
 8002b72:	f7ff fab3 	bl	80020dc <HAL_TIM_PWM_ConfigChannel>
 8002b76:	b100      	cbz	r0, 8002b7a <turn_left+0x5a>
 8002b78:	e7fe      	b.n	8002b78 <turn_left+0x58>
		_Error_Handler(__FILE__, __LINE__);
	}
	HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_4);
 8002b7a:	210c      	movs	r1, #12
 8002b7c:	480a      	ldr	r0, [pc, #40]	; (8002ba8 <turn_left+0x88>)
 8002b7e:	f7ff f9e7 	bl	8001f50 <HAL_TIM_PWM_Start>
	sConfigOC.Pulse = ainf;
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK){
 8002b82:	2208      	movs	r2, #8
 8002b84:	a901      	add	r1, sp, #4
 8002b86:	4808      	ldr	r0, [pc, #32]	; (8002ba8 <turn_left+0x88>)
	sConfigOC.Pulse = ainf;
 8002b88:	9402      	str	r4, [sp, #8]
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK){
 8002b8a:	f7ff faa7 	bl	80020dc <HAL_TIM_PWM_ConfigChannel>
 8002b8e:	b100      	cbz	r0, 8002b92 <turn_left+0x72>
 8002b90:	e7fe      	b.n	8002b90 <turn_left+0x70>
		_Error_Handler(__FILE__, __LINE__);
	}
	HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_3);
 8002b92:	2108      	movs	r1, #8
 8002b94:	4804      	ldr	r0, [pc, #16]	; (8002ba8 <turn_left+0x88>)
 8002b96:	f7ff f9db 	bl	8001f50 <HAL_TIM_PWM_Start>
}
 8002b9a:	b008      	add	sp, #32
 8002b9c:	bd70      	pop	{r4, r5, r6, pc}
 8002b9e:	bf00      	nop
 8002ba0:	20000014 	.word	0x20000014
 8002ba4:	20000134 	.word	0x20000134
 8002ba8:	200001b4 	.word	0x200001b4

08002bac <backward>:
void backward(int input){
 8002bac:	b530      	push	{r4, r5, lr}
	isforward = 0;
 8002bae:	4a1f      	ldr	r2, [pc, #124]	; (8002c2c <backward+0x80>)
void backward(int input){
 8002bb0:	b089      	sub	sp, #36	; 0x24
	isforward = 0;
 8002bb2:	2300      	movs	r3, #0
 8002bb4:	6013      	str	r3, [r2, #0]
	//uint8_t tmp[] = " backward\n\r";
	//HAL_UART_Transmit(&huart2,tmp,strlen((char*)tmp),0xFFFF);
	TIM_OC_InitTypeDef sConfigOC;
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002bb6:	2260      	movs	r2, #96	; 0x60
 8002bb8:	9201      	str	r2, [sp, #4]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;

	sConfigOC.Pulse = input;
 8002bba:	9002      	str	r0, [sp, #8]
void backward(int input){
 8002bbc:	4604      	mov	r4, r0
	if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK){ // BIN
 8002bbe:	220c      	movs	r2, #12
 8002bc0:	a901      	add	r1, sp, #4
 8002bc2:	481b      	ldr	r0, [pc, #108]	; (8002c30 <backward+0x84>)
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002bc4:	9303      	str	r3, [sp, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002bc6:	9305      	str	r3, [sp, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK){ // BIN
 8002bc8:	f7ff fa88 	bl	80020dc <HAL_TIM_PWM_ConfigChannel>
 8002bcc:	4605      	mov	r5, r0
 8002bce:	b100      	cbz	r0, 8002bd2 <backward+0x26>
 8002bd0:	e7fe      	b.n	8002bd0 <backward+0x24>
		_Error_Handler(__FILE__, __LINE__);
	}
	HAL_TIM_PWM_Start(&htim4,TIM_CHANNEL_4);
 8002bd2:	210c      	movs	r1, #12
 8002bd4:	4816      	ldr	r0, [pc, #88]	; (8002c30 <backward+0x84>)
 8002bd6:	f7ff f9bb 	bl	8001f50 <HAL_TIM_PWM_Start>
	sConfigOC.Pulse = 0;
	if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK){
 8002bda:	2208      	movs	r2, #8
 8002bdc:	a901      	add	r1, sp, #4
 8002bde:	4814      	ldr	r0, [pc, #80]	; (8002c30 <backward+0x84>)
	sConfigOC.Pulse = 0;
 8002be0:	9502      	str	r5, [sp, #8]
	if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK){
 8002be2:	f7ff fa7b 	bl	80020dc <HAL_TIM_PWM_ConfigChannel>
 8002be6:	b100      	cbz	r0, 8002bea <backward+0x3e>
 8002be8:	e7fe      	b.n	8002be8 <backward+0x3c>
		_Error_Handler(__FILE__, __LINE__);
	}
	HAL_TIM_PWM_Start(&htim4,TIM_CHANNEL_3);
 8002bea:	2108      	movs	r1, #8
 8002bec:	4810      	ldr	r0, [pc, #64]	; (8002c30 <backward+0x84>)
 8002bee:	f7ff f9af 	bl	8001f50 <HAL_TIM_PWM_Start>

	sConfigOC.Pulse = input - 2;
 8002bf2:	3c02      	subs	r4, #2
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK){ // AIN
 8002bf4:	220c      	movs	r2, #12
 8002bf6:	a901      	add	r1, sp, #4
 8002bf8:	480e      	ldr	r0, [pc, #56]	; (8002c34 <backward+0x88>)
	sConfigOC.Pulse = input - 2;
 8002bfa:	9402      	str	r4, [sp, #8]
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK){ // AIN
 8002bfc:	f7ff fa6e 	bl	80020dc <HAL_TIM_PWM_ConfigChannel>
 8002c00:	4604      	mov	r4, r0
 8002c02:	b100      	cbz	r0, 8002c06 <backward+0x5a>
 8002c04:	e7fe      	b.n	8002c04 <backward+0x58>
		_Error_Handler(__FILE__, __LINE__);
	}
	HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_4);
 8002c06:	210c      	movs	r1, #12
 8002c08:	480a      	ldr	r0, [pc, #40]	; (8002c34 <backward+0x88>)
 8002c0a:	f7ff f9a1 	bl	8001f50 <HAL_TIM_PWM_Start>
	sConfigOC.Pulse = 0;
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK){
 8002c0e:	2208      	movs	r2, #8
 8002c10:	a901      	add	r1, sp, #4
 8002c12:	4808      	ldr	r0, [pc, #32]	; (8002c34 <backward+0x88>)
	sConfigOC.Pulse = 0;
 8002c14:	9402      	str	r4, [sp, #8]
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK){
 8002c16:	f7ff fa61 	bl	80020dc <HAL_TIM_PWM_ConfigChannel>
 8002c1a:	b100      	cbz	r0, 8002c1e <backward+0x72>
 8002c1c:	e7fe      	b.n	8002c1c <backward+0x70>
		_Error_Handler(__FILE__, __LINE__);
	}
	HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_3);
 8002c1e:	2108      	movs	r1, #8
 8002c20:	4804      	ldr	r0, [pc, #16]	; (8002c34 <backward+0x88>)
 8002c22:	f7ff f995 	bl	8001f50 <HAL_TIM_PWM_Start>
}
 8002c26:	b009      	add	sp, #36	; 0x24
 8002c28:	bd30      	pop	{r4, r5, pc}
 8002c2a:	bf00      	nop
 8002c2c:	20000014 	.word	0x20000014
 8002c30:	20000134 	.word	0x20000134
 8002c34:	200001b4 	.word	0x200001b4

08002c38 <stop>:
void stop(){
 8002c38:	b510      	push	{r4, lr}
	isforward = 0;
	uint8_t tmp[] = " Stop\n\r";
 8002c3a:	4a27      	ldr	r2, [pc, #156]	; (8002cd8 <stop+0xa0>)
	isforward = 0;
 8002c3c:	4b27      	ldr	r3, [pc, #156]	; (8002cdc <stop+0xa4>)
	uint8_t tmp[] = " Stop\n\r";
 8002c3e:	6810      	ldr	r0, [r2, #0]
 8002c40:	6851      	ldr	r1, [r2, #4]
void stop(){
 8002c42:	b08a      	sub	sp, #40	; 0x28
	isforward = 0;
 8002c44:	2400      	movs	r4, #0
 8002c46:	601c      	str	r4, [r3, #0]
	uint8_t tmp[] = " Stop\n\r";
 8002c48:	ab01      	add	r3, sp, #4
 8002c4a:	c303      	stmia	r3!, {r0, r1}
	HAL_UART_Transmit(&huart2,tmp,strlen((char*)tmp),0xFFFF);
 8002c4c:	a801      	add	r0, sp, #4
 8002c4e:	f7fd fac7 	bl	80001e0 <strlen>
 8002c52:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002c56:	b282      	uxth	r2, r0
 8002c58:	a901      	add	r1, sp, #4
 8002c5a:	4821      	ldr	r0, [pc, #132]	; (8002ce0 <stop+0xa8>)
 8002c5c:	f7ff fd23 	bl	80026a6 <HAL_UART_Transmit>
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;

	sConfigOC.Pulse = 0;
	if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK){ // BIN
 8002c60:	220c      	movs	r2, #12
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002c62:	2360      	movs	r3, #96	; 0x60
	if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK){ // BIN
 8002c64:	eb0d 0102 	add.w	r1, sp, r2
 8002c68:	481e      	ldr	r0, [pc, #120]	; (8002ce4 <stop+0xac>)
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002c6a:	9405      	str	r4, [sp, #20]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002c6c:	9407      	str	r4, [sp, #28]
	sConfigOC.Pulse = 0;
 8002c6e:	9404      	str	r4, [sp, #16]
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002c70:	9303      	str	r3, [sp, #12]
	if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK){ // BIN
 8002c72:	f7ff fa33 	bl	80020dc <HAL_TIM_PWM_ConfigChannel>
 8002c76:	4604      	mov	r4, r0
 8002c78:	b100      	cbz	r0, 8002c7c <stop+0x44>
 8002c7a:	e7fe      	b.n	8002c7a <stop+0x42>
		_Error_Handler(__FILE__, __LINE__);
	}
	HAL_TIM_PWM_Start(&htim4,TIM_CHANNEL_4);
 8002c7c:	210c      	movs	r1, #12
 8002c7e:	4819      	ldr	r0, [pc, #100]	; (8002ce4 <stop+0xac>)
 8002c80:	f7ff f966 	bl	8001f50 <HAL_TIM_PWM_Start>
	sConfigOC.Pulse = 0;
	if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK){
 8002c84:	2208      	movs	r2, #8
 8002c86:	a903      	add	r1, sp, #12
 8002c88:	4816      	ldr	r0, [pc, #88]	; (8002ce4 <stop+0xac>)
	sConfigOC.Pulse = 0;
 8002c8a:	9404      	str	r4, [sp, #16]
	if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK){
 8002c8c:	f7ff fa26 	bl	80020dc <HAL_TIM_PWM_ConfigChannel>
 8002c90:	4604      	mov	r4, r0
 8002c92:	b100      	cbz	r0, 8002c96 <stop+0x5e>
 8002c94:	e7fe      	b.n	8002c94 <stop+0x5c>
		_Error_Handler(__FILE__, __LINE__);
	}
	HAL_TIM_PWM_Start(&htim4,TIM_CHANNEL_3);
 8002c96:	2108      	movs	r1, #8
 8002c98:	4812      	ldr	r0, [pc, #72]	; (8002ce4 <stop+0xac>)
 8002c9a:	f7ff f959 	bl	8001f50 <HAL_TIM_PWM_Start>

	sConfigOC.Pulse = 0;
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK){ // AIN
 8002c9e:	220c      	movs	r2, #12
 8002ca0:	eb0d 0102 	add.w	r1, sp, r2
 8002ca4:	4810      	ldr	r0, [pc, #64]	; (8002ce8 <stop+0xb0>)
	sConfigOC.Pulse = 0;
 8002ca6:	9404      	str	r4, [sp, #16]
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK){ // AIN
 8002ca8:	f7ff fa18 	bl	80020dc <HAL_TIM_PWM_ConfigChannel>
 8002cac:	4604      	mov	r4, r0
 8002cae:	b100      	cbz	r0, 8002cb2 <stop+0x7a>
 8002cb0:	e7fe      	b.n	8002cb0 <stop+0x78>
		_Error_Handler(__FILE__, __LINE__);
	}
	HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_4);
 8002cb2:	210c      	movs	r1, #12
 8002cb4:	480c      	ldr	r0, [pc, #48]	; (8002ce8 <stop+0xb0>)
 8002cb6:	f7ff f94b 	bl	8001f50 <HAL_TIM_PWM_Start>
	sConfigOC.Pulse = 0;
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK){
 8002cba:	2208      	movs	r2, #8
 8002cbc:	a903      	add	r1, sp, #12
 8002cbe:	480a      	ldr	r0, [pc, #40]	; (8002ce8 <stop+0xb0>)
	sConfigOC.Pulse = 0;
 8002cc0:	9404      	str	r4, [sp, #16]
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK){
 8002cc2:	f7ff fa0b 	bl	80020dc <HAL_TIM_PWM_ConfigChannel>
 8002cc6:	b100      	cbz	r0, 8002cca <stop+0x92>
 8002cc8:	e7fe      	b.n	8002cc8 <stop+0x90>
		_Error_Handler(__FILE__, __LINE__);
	}
	HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_3);
 8002cca:	2108      	movs	r1, #8
 8002ccc:	4806      	ldr	r0, [pc, #24]	; (8002ce8 <stop+0xb0>)
 8002cce:	f7ff f93f 	bl	8001f50 <HAL_TIM_PWM_Start>
}
 8002cd2:	b00a      	add	sp, #40	; 0x28
 8002cd4:	bd10      	pop	{r4, pc}
 8002cd6:	bf00      	nop
 8002cd8:	080046c8 	.word	0x080046c8
 8002cdc:	20000014 	.word	0x20000014
 8002ce0:	200002a4 	.word	0x200002a4
 8002ce4:	20000134 	.word	0x20000134
 8002ce8:	200001b4 	.word	0x200001b4

08002cec <forward>:
void forward(int input){
 8002cec:	b530      	push	{r4, r5, lr}
	isforward = 1;
 8002cee:	4b1f      	ldr	r3, [pc, #124]	; (8002d6c <forward+0x80>)
void forward(int input){
 8002cf0:	b089      	sub	sp, #36	; 0x24
	isforward = 1;
 8002cf2:	2201      	movs	r2, #1
 8002cf4:	601a      	str	r2, [r3, #0]
	//uint8_t tmp[] = " forward\n\r";
	//HAL_UART_Transmit(&huart2,tmp,strlen((char*)tmp),0xFFFF);
	TIM_OC_InitTypeDef sConfigOC;
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002cf6:	2360      	movs	r3, #96	; 0x60
void forward(int input){
 8002cf8:	4604      	mov	r4, r0
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002cfa:	9301      	str	r3, [sp, #4]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;

	sConfigOC.Pulse = 0;
	if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK){ // BIN
 8002cfc:	220c      	movs	r2, #12
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002cfe:	2300      	movs	r3, #0
	if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK){ // BIN
 8002d00:	a901      	add	r1, sp, #4
 8002d02:	481b      	ldr	r0, [pc, #108]	; (8002d70 <forward+0x84>)
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002d04:	9303      	str	r3, [sp, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002d06:	9305      	str	r3, [sp, #20]
	sConfigOC.Pulse = 0;
 8002d08:	9302      	str	r3, [sp, #8]
	if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK){ // BIN
 8002d0a:	f7ff f9e7 	bl	80020dc <HAL_TIM_PWM_ConfigChannel>
 8002d0e:	b100      	cbz	r0, 8002d12 <forward+0x26>
 8002d10:	e7fe      	b.n	8002d10 <forward+0x24>
		_Error_Handler(__FILE__, __LINE__);
	}
	HAL_TIM_PWM_Start(&htim4,TIM_CHANNEL_4);
 8002d12:	210c      	movs	r1, #12
 8002d14:	4816      	ldr	r0, [pc, #88]	; (8002d70 <forward+0x84>)
 8002d16:	f7ff f91b 	bl	8001f50 <HAL_TIM_PWM_Start>
	sConfigOC.Pulse = input;
	if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK){
 8002d1a:	2208      	movs	r2, #8
 8002d1c:	a901      	add	r1, sp, #4
 8002d1e:	4814      	ldr	r0, [pc, #80]	; (8002d70 <forward+0x84>)
	sConfigOC.Pulse = input;
 8002d20:	9402      	str	r4, [sp, #8]
	if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK){
 8002d22:	f7ff f9db 	bl	80020dc <HAL_TIM_PWM_ConfigChannel>
 8002d26:	4605      	mov	r5, r0
 8002d28:	b100      	cbz	r0, 8002d2c <forward+0x40>
 8002d2a:	e7fe      	b.n	8002d2a <forward+0x3e>
		_Error_Handler(__FILE__, __LINE__);
	}
	HAL_TIM_PWM_Start(&htim4,TIM_CHANNEL_3);
 8002d2c:	2108      	movs	r1, #8
 8002d2e:	4810      	ldr	r0, [pc, #64]	; (8002d70 <forward+0x84>)
 8002d30:	f7ff f90e 	bl	8001f50 <HAL_TIM_PWM_Start>

	sConfigOC.Pulse = 0;
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK){ // AIN
 8002d34:	220c      	movs	r2, #12
 8002d36:	a901      	add	r1, sp, #4
 8002d38:	480e      	ldr	r0, [pc, #56]	; (8002d74 <forward+0x88>)
	sConfigOC.Pulse = 0;
 8002d3a:	9502      	str	r5, [sp, #8]
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK){ // AIN
 8002d3c:	f7ff f9ce 	bl	80020dc <HAL_TIM_PWM_ConfigChannel>
 8002d40:	b100      	cbz	r0, 8002d44 <forward+0x58>
 8002d42:	e7fe      	b.n	8002d42 <forward+0x56>
		_Error_Handler(__FILE__, __LINE__);
	}
	HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_4);
 8002d44:	210c      	movs	r1, #12
 8002d46:	480b      	ldr	r0, [pc, #44]	; (8002d74 <forward+0x88>)
 8002d48:	f7ff f902 	bl	8001f50 <HAL_TIM_PWM_Start>
	sConfigOC.Pulse = input - 2; //right
 8002d4c:	3c02      	subs	r4, #2
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK){
 8002d4e:	2208      	movs	r2, #8
 8002d50:	a901      	add	r1, sp, #4
 8002d52:	4808      	ldr	r0, [pc, #32]	; (8002d74 <forward+0x88>)
	sConfigOC.Pulse = input - 2; //right
 8002d54:	9402      	str	r4, [sp, #8]
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK){
 8002d56:	f7ff f9c1 	bl	80020dc <HAL_TIM_PWM_ConfigChannel>
 8002d5a:	b100      	cbz	r0, 8002d5e <forward+0x72>
 8002d5c:	e7fe      	b.n	8002d5c <forward+0x70>
		_Error_Handler(__FILE__, __LINE__);
	}
	HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_3);
 8002d5e:	2108      	movs	r1, #8
 8002d60:	4804      	ldr	r0, [pc, #16]	; (8002d74 <forward+0x88>)
 8002d62:	f7ff f8f5 	bl	8001f50 <HAL_TIM_PWM_Start>
}
 8002d66:	b009      	add	sp, #36	; 0x24
 8002d68:	bd30      	pop	{r4, r5, pc}
 8002d6a:	bf00      	nop
 8002d6c:	20000014 	.word	0x20000014
 8002d70:	20000134 	.word	0x20000134
 8002d74:	200001b4 	.word	0x200001b4

08002d78 <initwifi>:

void initwifi(void){
 8002d78:	b530      	push	{r4, r5, lr}
 8002d7a:	b099      	sub	sp, #100	; 0x64
	for(int i = 0;i < 9;i++){
		HAL_UART_Transmit(&huart4,cmd[i],strlen((char*)cmd[i]),0xFFFF);
		HAL_Delay(1000);
	}*/

	uint8_t tmmp[] = "AT\r\nAT+CWMODE=2\r\nAT+CWSAP=\"jameschu\",\"123456789\",1,4\r\nAT+CIPMUX=1\r\nAT+CIPSERVER=1,8080\r\n";
 8002d7c:	2259      	movs	r2, #89	; 0x59
 8002d7e:	490d      	ldr	r1, [pc, #52]	; (8002db4 <initwifi+0x3c>)
	for(int i = 0;i < strlen((char*)tmmp);++i){
		HAL_UART_Transmit(&huart4,&tmmp[i],1,0xFFFF);
 8002d80:	4d0d      	ldr	r5, [pc, #52]	; (8002db8 <initwifi+0x40>)
	uint8_t tmmp[] = "AT\r\nAT+CWMODE=2\r\nAT+CWSAP=\"jameschu\",\"123456789\",1,4\r\nAT+CIPMUX=1\r\nAT+CIPSERVER=1,8080\r\n";
 8002d82:	a801      	add	r0, sp, #4
 8002d84:	f000 fff6 	bl	8003d74 <memcpy>
	for(int i = 0;i < strlen((char*)tmmp);++i){
 8002d88:	2400      	movs	r4, #0
 8002d8a:	a801      	add	r0, sp, #4
 8002d8c:	f7fd fa28 	bl	80001e0 <strlen>
 8002d90:	42a0      	cmp	r0, r4
 8002d92:	d801      	bhi.n	8002d98 <initwifi+0x20>
		HAL_Delay(10);
	}
}
 8002d94:	b019      	add	sp, #100	; 0x64
 8002d96:	bd30      	pop	{r4, r5, pc}
		HAL_UART_Transmit(&huart4,&tmmp[i],1,0xFFFF);
 8002d98:	a901      	add	r1, sp, #4
 8002d9a:	4421      	add	r1, r4
 8002d9c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002da0:	2201      	movs	r2, #1
 8002da2:	4628      	mov	r0, r5
 8002da4:	f7ff fc7f 	bl	80026a6 <HAL_UART_Transmit>
		HAL_Delay(10);
 8002da8:	200a      	movs	r0, #10
 8002daa:	f7fd ff1f 	bl	8000bec <HAL_Delay>
	for(int i = 0;i < strlen((char*)tmmp);++i){
 8002dae:	3401      	adds	r4, #1
 8002db0:	e7eb      	b.n	8002d8a <initwifi+0x12>
 8002db2:	bf00      	nop
 8002db4:	08004618 	.word	0x08004618
 8002db8:	20000234 	.word	0x20000234

08002dbc <main>:
{
 8002dbc:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 8002dc0:	b0a3      	sub	sp, #140	; 0x8c
  HAL_Init();
 8002dc2:	f7fd fef3 	bl	8000bac <HAL_Init>
  SystemClock_Config();
 8002dc6:	f7ff fe35 	bl	8002a34 <SystemClock_Config>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002dca:	4b97      	ldr	r3, [pc, #604]	; (8003028 <main+0x26c>)
 8002dcc:	695a      	ldr	r2, [r3, #20]
 8002dce:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8002dd2:	615a      	str	r2, [r3, #20]
 8002dd4:	695a      	ldr	r2, [r3, #20]
 8002dd6:	f402 2200 	and.w	r2, r2, #524288	; 0x80000
 8002dda:	9205      	str	r2, [sp, #20]
 8002ddc:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002dde:	695a      	ldr	r2, [r3, #20]
 8002de0:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8002de4:	615a      	str	r2, [r3, #20]
 8002de6:	695a      	ldr	r2, [r3, #20]
 8002de8:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
 8002dec:	9206      	str	r2, [sp, #24]
 8002dee:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002df0:	695a      	ldr	r2, [r3, #20]
 8002df2:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8002df6:	615a      	str	r2, [r3, #20]
 8002df8:	695a      	ldr	r2, [r3, #20]
 8002dfa:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8002dfe:	9207      	str	r2, [sp, #28]
 8002e00:	9a07      	ldr	r2, [sp, #28]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e02:	695a      	ldr	r2, [r3, #20]
 8002e04:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8002e08:	615a      	str	r2, [r3, #20]
 8002e0a:	695b      	ldr	r3, [r3, #20]
 8002e0c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002e10:	9308      	str	r3, [sp, #32]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8002e12:	2200      	movs	r2, #0
 8002e14:	2120      	movs	r1, #32
 8002e16:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e1a:	9b08      	ldr	r3, [sp, #32]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8002e1c:	f7fe f864 	bl	8000ee8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_RESET);
 8002e20:	2200      	movs	r2, #0
 8002e22:	2120      	movs	r1, #32
 8002e24:	4881      	ldr	r0, [pc, #516]	; (800302c <main+0x270>)
 8002e26:	f7fe f85f 	bl	8000ee8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	2170      	movs	r1, #112	; 0x70
 8002e2e:	4880      	ldr	r0, [pc, #512]	; (8003030 <main+0x274>)
 8002e30:	f7fe f85a 	bl	8000ee8 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = B1_Pin;
 8002e34:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e38:	2400      	movs	r4, #0
  GPIO_InitStruct.Pin = B1_Pin;
 8002e3a:	9317      	str	r3, [sp, #92]	; 0x5c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002e3c:	a917      	add	r1, sp, #92	; 0x5c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002e3e:	4b7d      	ldr	r3, [pc, #500]	; (8003034 <main+0x278>)
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002e40:	487a      	ldr	r0, [pc, #488]	; (800302c <main+0x270>)
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002e42:	9318      	str	r3, [sp, #96]	; 0x60
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002e44:	2501      	movs	r5, #1
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002e46:	2620      	movs	r6, #32
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e48:	9419      	str	r4, [sp, #100]	; 0x64
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002e4a:	f7fd ff7d 	bl	8000d48 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e4e:	a917      	add	r1, sp, #92	; 0x5c
 8002e50:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002e54:	9617      	str	r6, [sp, #92]	; 0x5c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002e56:	9518      	str	r5, [sp, #96]	; 0x60
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e58:	9419      	str	r4, [sp, #100]	; 0x64
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e5a:	941a      	str	r4, [sp, #104]	; 0x68
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e5c:	f7fd ff74 	bl	8000d48 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002e60:	a917      	add	r1, sp, #92	; 0x5c
 8002e62:	4872      	ldr	r0, [pc, #456]	; (800302c <main+0x270>)
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002e64:	9617      	str	r6, [sp, #92]	; 0x5c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002e66:	9518      	str	r5, [sp, #96]	; 0x60
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e68:	9419      	str	r4, [sp, #100]	; 0x64
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e6a:	941a      	str	r4, [sp, #104]	; 0x68
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002e6c:	f7fd ff6c 	bl	8000d48 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8002e70:	2370      	movs	r3, #112	; 0x70
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e72:	486f      	ldr	r0, [pc, #444]	; (8003030 <main+0x274>)
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8002e74:	9317      	str	r3, [sp, #92]	; 0x5c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e76:	a917      	add	r1, sp, #92	; 0x5c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002e78:	9518      	str	r5, [sp, #96]	; 0x60
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e7a:	9419      	str	r4, [sp, #100]	; 0x64
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e7c:	941a      	str	r4, [sp, #104]	; 0x68
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e7e:	f7fd ff63 	bl	8000d48 <HAL_GPIO_Init>
  huart2.Instance = USART2;
 8002e82:	486d      	ldr	r0, [pc, #436]	; (8003038 <main+0x27c>)
  huart2.Init.BaudRate = 115200;
 8002e84:	4b6d      	ldr	r3, [pc, #436]	; (800303c <main+0x280>)
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002e86:	6084      	str	r4, [r0, #8]
  huart2.Init.BaudRate = 115200;
 8002e88:	f44f 36e1 	mov.w	r6, #115200	; 0x1c200
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002e8c:	250c      	movs	r5, #12
  huart2.Init.BaudRate = 115200;
 8002e8e:	e880 0048 	stmia.w	r0, {r3, r6}
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002e92:	60c4      	str	r4, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002e94:	6104      	str	r4, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002e96:	6145      	str	r5, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002e98:	6184      	str	r4, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002e9a:	61c4      	str	r4, [r0, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002e9c:	6204      	str	r4, [r0, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002e9e:	6244      	str	r4, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002ea0:	f7ff fc8c 	bl	80027bc <HAL_UART_Init>
 8002ea4:	b100      	cbz	r0, 8002ea8 <main+0xec>
 8002ea6:	e7fe      	b.n	8002ea6 <main+0xea>
  huart4.Instance = UART4;
 8002ea8:	4b65      	ldr	r3, [pc, #404]	; (8003040 <main+0x284>)
 8002eaa:	4a66      	ldr	r2, [pc, #408]	; (8003044 <main+0x288>)
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8002eac:	6098      	str	r0, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8002eae:	60d8      	str	r0, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8002eb0:	6118      	str	r0, [r3, #16]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002eb2:	6198      	str	r0, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8002eb4:	61d8      	str	r0, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002eb6:	6218      	str	r0, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002eb8:	6258      	str	r0, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8002eba:	4618      	mov	r0, r3
  huart4.Init.BaudRate = 115200;
 8002ebc:	e883 0044 	stmia.w	r3, {r2, r6}
  huart4.Init.Mode = UART_MODE_TX_RX;
 8002ec0:	615d      	str	r5, [r3, #20]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8002ec2:	f7ff fc7b 	bl	80027bc <HAL_UART_Init>
 8002ec6:	b100      	cbz	r0, 8002eca <main+0x10e>
 8002ec8:	e7fe      	b.n	8002ec8 <main+0x10c>
  htim3.Instance = TIM3;
 8002eca:	4c5f      	ldr	r4, [pc, #380]	; (8003048 <main+0x28c>)
  htim3.Init.Prescaler = 17999;
 8002ecc:	4b5f      	ldr	r3, [pc, #380]	; (800304c <main+0x290>)
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ece:	60a0      	str	r0, [r4, #8]
  htim3.Init.Prescaler = 17999;
 8002ed0:	f244 694f 	movw	r9, #17999	; 0x464f
  htim3.Init.Period = 9;
 8002ed4:	f04f 0809 	mov.w	r8, #9
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002ed8:	6120      	str	r0, [r4, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002eda:	61a0      	str	r0, [r4, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002edc:	4620      	mov	r0, r4
  htim3.Init.Prescaler = 17999;
 8002ede:	e884 0208 	stmia.w	r4, {r3, r9}
  htim3.Init.Period = 9;
 8002ee2:	f8c4 800c 	str.w	r8, [r4, #12]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002ee6:	f7fe fe0f 	bl	8001b08 <HAL_TIM_PWM_Init>
 8002eea:	b100      	cbz	r0, 8002eee <main+0x132>
 8002eec:	e7fe      	b.n	8002eec <main+0x130>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002eee:	9010      	str	r0, [sp, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002ef0:	9012      	str	r0, [sp, #72]	; 0x48
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002ef2:	a910      	add	r1, sp, #64	; 0x40
 8002ef4:	4620      	mov	r0, r4
 8002ef6:	f7ff f979 	bl	80021ec <HAL_TIMEx_MasterConfigSynchronization>
 8002efa:	b100      	cbz	r0, 8002efe <main+0x142>
 8002efc:	e7fe      	b.n	8002efc <main+0x140>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002efe:	2760      	movs	r7, #96	; 0x60
  sConfigOC.Pulse = 0;
 8002f00:	9018      	str	r0, [sp, #96]	; 0x60
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002f02:	9019      	str	r0, [sp, #100]	; 0x64
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002f04:	901b      	str	r0, [sp, #108]	; 0x6c
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002f06:	2208      	movs	r2, #8
 8002f08:	a917      	add	r1, sp, #92	; 0x5c
 8002f0a:	4620      	mov	r0, r4
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002f0c:	9717      	str	r7, [sp, #92]	; 0x5c
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002f0e:	f7ff f8e5 	bl	80020dc <HAL_TIM_PWM_ConfigChannel>
 8002f12:	b100      	cbz	r0, 8002f16 <main+0x15a>
 8002f14:	e7fe      	b.n	8002f14 <main+0x158>
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002f16:	462a      	mov	r2, r5
 8002f18:	a917      	add	r1, sp, #92	; 0x5c
 8002f1a:	4620      	mov	r0, r4
 8002f1c:	f7ff f8de 	bl	80020dc <HAL_TIM_PWM_ConfigChannel>
 8002f20:	4606      	mov	r6, r0
 8002f22:	b100      	cbz	r0, 8002f26 <main+0x16a>
 8002f24:	e7fe      	b.n	8002f24 <main+0x168>
  HAL_TIM_MspPostInit(&htim3);
 8002f26:	4620      	mov	r0, r4
  htim4.Instance = TIM4;
 8002f28:	4c49      	ldr	r4, [pc, #292]	; (8003050 <main+0x294>)
  HAL_TIM_MspPostInit(&htim3);
 8002f2a:	f000 fdc3 	bl	8003ab4 <HAL_TIM_MspPostInit>
  htim4.Instance = TIM4;
 8002f2e:	4b49      	ldr	r3, [pc, #292]	; (8003054 <main+0x298>)
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002f30:	60a6      	str	r6, [r4, #8]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8002f32:	4620      	mov	r0, r4
  htim4.Init.Prescaler = 17999;
 8002f34:	e884 0208 	stmia.w	r4, {r3, r9}
  htim4.Init.Period = 9;
 8002f38:	f8c4 800c 	str.w	r8, [r4, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002f3c:	6126      	str	r6, [r4, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002f3e:	61a6      	str	r6, [r4, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8002f40:	f7fe fde2 	bl	8001b08 <HAL_TIM_PWM_Init>
 8002f44:	b100      	cbz	r0, 8002f48 <main+0x18c>
 8002f46:	e7fe      	b.n	8002f46 <main+0x18a>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002f48:	9010      	str	r0, [sp, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002f4a:	9012      	str	r0, [sp, #72]	; 0x48
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002f4c:	a910      	add	r1, sp, #64	; 0x40
 8002f4e:	4620      	mov	r0, r4
 8002f50:	f7ff f94c 	bl	80021ec <HAL_TIMEx_MasterConfigSynchronization>
 8002f54:	b100      	cbz	r0, 8002f58 <main+0x19c>
 8002f56:	e7fe      	b.n	8002f56 <main+0x19a>
  sConfigOC.Pulse = 0;
 8002f58:	9018      	str	r0, [sp, #96]	; 0x60
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002f5a:	9019      	str	r0, [sp, #100]	; 0x64
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002f5c:	901b      	str	r0, [sp, #108]	; 0x6c
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002f5e:	2208      	movs	r2, #8
 8002f60:	a917      	add	r1, sp, #92	; 0x5c
 8002f62:	4620      	mov	r0, r4
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002f64:	9717      	str	r7, [sp, #92]	; 0x5c
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002f66:	f7ff f8b9 	bl	80020dc <HAL_TIM_PWM_ConfigChannel>
 8002f6a:	b100      	cbz	r0, 8002f6e <main+0x1b2>
 8002f6c:	e7fe      	b.n	8002f6c <main+0x1b0>
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002f6e:	462a      	mov	r2, r5
 8002f70:	a917      	add	r1, sp, #92	; 0x5c
 8002f72:	4620      	mov	r0, r4
 8002f74:	f7ff f8b2 	bl	80020dc <HAL_TIM_PWM_ConfigChannel>
 8002f78:	b100      	cbz	r0, 8002f7c <main+0x1c0>
 8002f7a:	e7fe      	b.n	8002f7a <main+0x1be>
  HAL_TIM_MspPostInit(&htim4);
 8002f7c:	4834      	ldr	r0, [pc, #208]	; (8003050 <main+0x294>)
  htim8.Instance = TIM8;
 8002f7e:	4c36      	ldr	r4, [pc, #216]	; (8003058 <main+0x29c>)
  HAL_TIM_MspPostInit(&htim4);
 8002f80:	f000 fd98 	bl	8003ab4 <HAL_TIM_MspPostInit>
  htim8.Init.Prescaler = 719;
 8002f84:	4b35      	ldr	r3, [pc, #212]	; (800305c <main+0x2a0>)
 8002f86:	f240 28cf 	movw	r8, #719	; 0x2cf
 8002f8a:	e884 0108 	stmia.w	r4, {r3, r8}
  htim8.Init.Period = 10000;
 8002f8e:	f242 7710 	movw	r7, #10000	; 0x2710
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002f92:	2300      	movs	r3, #0
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8002f94:	4620      	mov	r0, r4
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002f96:	60a3      	str	r3, [r4, #8]
  htim8.Init.Period = 10000;
 8002f98:	60e7      	str	r7, [r4, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002f9a:	6123      	str	r3, [r4, #16]
  htim8.Init.RepetitionCounter = 0;
 8002f9c:	6163      	str	r3, [r4, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002f9e:	61a3      	str	r3, [r4, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8002fa0:	f7fe fdb2 	bl	8001b08 <HAL_TIM_PWM_Init>
 8002fa4:	b100      	cbz	r0, 8002fa8 <main+0x1ec>
 8002fa6:	e7fe      	b.n	8002fa6 <main+0x1ea>
  if (HAL_TIM_IC_Init(&htim8) != HAL_OK)
 8002fa8:	4620      	mov	r0, r4
 8002faa:	f7fe fdc7 	bl	8001b3c <HAL_TIM_IC_Init>
 8002fae:	b100      	cbz	r0, 8002fb2 <main+0x1f6>
 8002fb0:	e7fe      	b.n	8002fb0 <main+0x1f4>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002fb2:	9009      	str	r0, [sp, #36]	; 0x24
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002fb4:	900a      	str	r0, [sp, #40]	; 0x28
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002fb6:	900b      	str	r0, [sp, #44]	; 0x2c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8002fb8:	a909      	add	r1, sp, #36	; 0x24
 8002fba:	4620      	mov	r0, r4
 8002fbc:	f7ff f916 	bl	80021ec <HAL_TIMEx_MasterConfigSynchronization>
 8002fc0:	4602      	mov	r2, r0
 8002fc2:	b100      	cbz	r0, 8002fc6 <main+0x20a>
 8002fc4:	e7fe      	b.n	8002fc4 <main+0x208>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002fc6:	2660      	movs	r6, #96	; 0x60
  sConfigOC.Pulse = 1;
 8002fc8:	2501      	movs	r5, #1
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002fca:	9012      	str	r0, [sp, #72]	; 0x48
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002fcc:	9013      	str	r0, [sp, #76]	; 0x4c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002fce:	9014      	str	r0, [sp, #80]	; 0x50
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002fd0:	9015      	str	r0, [sp, #84]	; 0x54
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002fd2:	9016      	str	r0, [sp, #88]	; 0x58
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002fd4:	a910      	add	r1, sp, #64	; 0x40
 8002fd6:	4620      	mov	r0, r4
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002fd8:	9610      	str	r6, [sp, #64]	; 0x40
  sConfigOC.Pulse = 1;
 8002fda:	9511      	str	r5, [sp, #68]	; 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002fdc:	f7ff f87e 	bl	80020dc <HAL_TIM_PWM_ConfigChannel>
 8002fe0:	b100      	cbz	r0, 8002fe4 <main+0x228>
 8002fe2:	e7fe      	b.n	8002fe2 <main+0x226>
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 8002fe4:	230a      	movs	r3, #10
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002fe6:	900e      	str	r0, [sp, #56]	; 0x38
  sConfigIC.ICFilter = 0;
 8002fe8:	900f      	str	r0, [sp, #60]	; 0x3c
  if (HAL_TIM_IC_ConfigChannel(&htim8, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8002fea:	2204      	movs	r2, #4
 8002fec:	a90c      	add	r1, sp, #48	; 0x30
 8002fee:	4620      	mov	r0, r4
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 8002ff0:	930c      	str	r3, [sp, #48]	; 0x30
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002ff2:	950d      	str	r5, [sp, #52]	; 0x34
  if (HAL_TIM_IC_ConfigChannel(&htim8, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8002ff4:	f7fe ff18 	bl	8001e28 <HAL_TIM_IC_ConfigChannel>
 8002ff8:	b100      	cbz	r0, 8002ffc <main+0x240>
 8002ffa:	e7fe      	b.n	8002ffa <main+0x23e>
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002ffc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003000:	9017      	str	r0, [sp, #92]	; 0x5c
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003002:	9018      	str	r0, [sp, #96]	; 0x60
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003004:	9019      	str	r0, [sp, #100]	; 0x64
  sBreakDeadTimeConfig.DeadTime = 0;
 8003006:	901a      	str	r0, [sp, #104]	; 0x68
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003008:	901b      	str	r0, [sp, #108]	; 0x6c
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800300a:	931c      	str	r3, [sp, #112]	; 0x70
  sBreakDeadTimeConfig.BreakFilter = 0;
 800300c:	901d      	str	r0, [sp, #116]	; 0x74
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800300e:	901e      	str	r0, [sp, #120]	; 0x78
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8003010:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
  sBreakDeadTimeConfig.Break2Filter = 0;
 8003014:	9020      	str	r0, [sp, #128]	; 0x80
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003016:	9021      	str	r0, [sp, #132]	; 0x84
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8003018:	a917      	add	r1, sp, #92	; 0x5c
 800301a:	4620      	mov	r0, r4
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800301c:	931f      	str	r3, [sp, #124]	; 0x7c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 800301e:	f7ff f90f 	bl	8002240 <HAL_TIMEx_ConfigBreakDeadTime>
 8003022:	4681      	mov	r9, r0
 8003024:	b1e0      	cbz	r0, 8003060 <main+0x2a4>
 8003026:	e7fe      	b.n	8003026 <main+0x26a>
 8003028:	40021000 	.word	0x40021000
 800302c:	48000800 	.word	0x48000800
 8003030:	48000400 	.word	0x48000400
 8003034:	10210000 	.word	0x10210000
 8003038:	200002a4 	.word	0x200002a4
 800303c:	40004400 	.word	0x40004400
 8003040:	20000234 	.word	0x20000234
 8003044:	40004c00 	.word	0x40004c00
 8003048:	200001b4 	.word	0x200001b4
 800304c:	40000400 	.word	0x40000400
 8003050:	20000134 	.word	0x20000134
 8003054:	40000800 	.word	0x40000800
 8003058:	200000f4 	.word	0x200000f4
 800305c:	40013400 	.word	0x40013400
  HAL_TIM_MspPostInit(&htim8);
 8003060:	4620      	mov	r0, r4
  htim1.Instance = TIM1;
 8003062:	4c79      	ldr	r4, [pc, #484]	; (8003248 <main+0x48c>)
  HAL_TIM_MspPostInit(&htim8);
 8003064:	f000 fd26 	bl	8003ab4 <HAL_TIM_MspPostInit>
  htim1.Instance = TIM1;
 8003068:	4b78      	ldr	r3, [pc, #480]	; (800324c <main+0x490>)
  htim1.Init.Period = 10000;
 800306a:	60e7      	str	r7, [r4, #12]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800306c:	4620      	mov	r0, r4
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800306e:	e884 0308 	stmia.w	r4, {r3, r8, r9}
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003072:	f8c4 9010 	str.w	r9, [r4, #16]
  htim1.Init.RepetitionCounter = 0;
 8003076:	f8c4 9014 	str.w	r9, [r4, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800307a:	f8c4 9018 	str.w	r9, [r4, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800307e:	f7fe fd43 	bl	8001b08 <HAL_TIM_PWM_Init>
 8003082:	b100      	cbz	r0, 8003086 <main+0x2ca>
 8003084:	e7fe      	b.n	8003084 <main+0x2c8>
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 8003086:	4620      	mov	r0, r4
 8003088:	f7fe fd58 	bl	8001b3c <HAL_TIM_IC_Init>
 800308c:	b100      	cbz	r0, 8003090 <main+0x2d4>
 800308e:	e7fe      	b.n	800308e <main+0x2d2>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003090:	9009      	str	r0, [sp, #36]	; 0x24
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8003092:	900a      	str	r0, [sp, #40]	; 0x28
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003094:	900b      	str	r0, [sp, #44]	; 0x2c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003096:	a909      	add	r1, sp, #36	; 0x24
 8003098:	4620      	mov	r0, r4
 800309a:	f7ff f8a7 	bl	80021ec <HAL_TIMEx_MasterConfigSynchronization>
 800309e:	4602      	mov	r2, r0
 80030a0:	b100      	cbz	r0, 80030a4 <main+0x2e8>
 80030a2:	e7fe      	b.n	80030a2 <main+0x2e6>
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80030a4:	9012      	str	r0, [sp, #72]	; 0x48
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80030a6:	9013      	str	r0, [sp, #76]	; 0x4c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80030a8:	9014      	str	r0, [sp, #80]	; 0x50
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80030aa:	9015      	str	r0, [sp, #84]	; 0x54
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80030ac:	9016      	str	r0, [sp, #88]	; 0x58
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80030ae:	a910      	add	r1, sp, #64	; 0x40
 80030b0:	4620      	mov	r0, r4
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80030b2:	9610      	str	r6, [sp, #64]	; 0x40
  sConfigOC.Pulse = 1;
 80030b4:	9511      	str	r5, [sp, #68]	; 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80030b6:	f7ff f811 	bl	80020dc <HAL_TIM_PWM_ConfigChannel>
 80030ba:	b100      	cbz	r0, 80030be <main+0x302>
 80030bc:	e7fe      	b.n	80030bc <main+0x300>
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80030be:	2300      	movs	r3, #0
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 80030c0:	f04f 080a 	mov.w	r8, #10
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80030c4:	2601      	movs	r6, #1
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 80030c6:	2204      	movs	r2, #4
 80030c8:	a90c      	add	r1, sp, #48	; 0x30
 80030ca:	485f      	ldr	r0, [pc, #380]	; (8003248 <main+0x48c>)
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 80030cc:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80030d0:	960d      	str	r6, [sp, #52]	; 0x34
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80030d2:	930e      	str	r3, [sp, #56]	; 0x38
  sConfigIC.ICFilter = 0;
 80030d4:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 80030d6:	f7fe fea7 	bl	8001e28 <HAL_TIM_IC_ConfigChannel>
 80030da:	b100      	cbz	r0, 80030de <main+0x322>
 80030dc:	e7fe      	b.n	80030dc <main+0x320>
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80030de:	9017      	str	r0, [sp, #92]	; 0x5c
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80030e0:	9018      	str	r0, [sp, #96]	; 0x60
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80030e2:	9019      	str	r0, [sp, #100]	; 0x64
  sBreakDeadTimeConfig.DeadTime = 0;
 80030e4:	901a      	str	r0, [sp, #104]	; 0x68
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80030e6:	901b      	str	r0, [sp, #108]	; 0x6c
  sBreakDeadTimeConfig.BreakFilter = 0;
 80030e8:	901d      	str	r0, [sp, #116]	; 0x74
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80030ea:	901e      	str	r0, [sp, #120]	; 0x78
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80030ec:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
  sBreakDeadTimeConfig.Break2Filter = 0;
 80030f0:	9020      	str	r0, [sp, #128]	; 0x80
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80030f2:	9021      	str	r0, [sp, #132]	; 0x84
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80030f4:	f44f 5700 	mov.w	r7, #8192	; 0x2000
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80030f8:	a917      	add	r1, sp, #92	; 0x5c
 80030fa:	4853      	ldr	r0, [pc, #332]	; (8003248 <main+0x48c>)
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80030fc:	971c      	str	r7, [sp, #112]	; 0x70
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80030fe:	931f      	str	r3, [sp, #124]	; 0x7c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8003100:	f7ff f89e 	bl	8002240 <HAL_TIMEx_ConfigBreakDeadTime>
 8003104:	4605      	mov	r5, r0
 8003106:	b100      	cbz	r0, 800310a <main+0x34e>
 8003108:	e7fe      	b.n	8003108 <main+0x34c>
  HAL_TIM_MspPostInit(&htim1);
 800310a:	484f      	ldr	r0, [pc, #316]	; (8003248 <main+0x48c>)
  htim15.Instance = TIM15;
 800310c:	4c50      	ldr	r4, [pc, #320]	; (8003250 <main+0x494>)
  HAL_TIM_MspPostInit(&htim1);
 800310e:	f000 fcd1 	bl	8003ab4 <HAL_TIM_MspPostInit>
  htim15.Init.Prescaler = 719;
 8003112:	4a50      	ldr	r2, [pc, #320]	; (8003254 <main+0x498>)
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003114:	60a5      	str	r5, [r4, #8]
  htim15.Init.Prescaler = 719;
 8003116:	f240 23cf 	movw	r3, #719	; 0x2cf
 800311a:	e884 000c 	stmia.w	r4, {r2, r3}
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 800311e:	4620      	mov	r0, r4
  htim15.Init.Period = 10000;
 8003120:	f242 7310 	movw	r3, #10000	; 0x2710
 8003124:	60e3      	str	r3, [r4, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003126:	6125      	str	r5, [r4, #16]
  htim15.Init.RepetitionCounter = 0;
 8003128:	6165      	str	r5, [r4, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800312a:	61a5      	str	r5, [r4, #24]
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 800312c:	f7fe fcec 	bl	8001b08 <HAL_TIM_PWM_Init>
 8003130:	b100      	cbz	r0, 8003134 <main+0x378>
 8003132:	e7fe      	b.n	8003132 <main+0x376>
  if (HAL_TIM_IC_Init(&htim15) != HAL_OK)
 8003134:	4620      	mov	r0, r4
 8003136:	f7fe fd01 	bl	8001b3c <HAL_TIM_IC_Init>
 800313a:	b100      	cbz	r0, 800313e <main+0x382>
 800313c:	e7fe      	b.n	800313c <main+0x380>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800313e:	9009      	str	r0, [sp, #36]	; 0x24
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003140:	900b      	str	r0, [sp, #44]	; 0x2c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8003142:	a909      	add	r1, sp, #36	; 0x24
 8003144:	4620      	mov	r0, r4
 8003146:	f7ff f851 	bl	80021ec <HAL_TIMEx_MasterConfigSynchronization>
 800314a:	4602      	mov	r2, r0
 800314c:	b100      	cbz	r0, 8003150 <main+0x394>
 800314e:	e7fe      	b.n	800314e <main+0x392>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003150:	2360      	movs	r3, #96	; 0x60
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003152:	9012      	str	r0, [sp, #72]	; 0x48
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003154:	9013      	str	r0, [sp, #76]	; 0x4c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003156:	9014      	str	r0, [sp, #80]	; 0x50
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003158:	9015      	str	r0, [sp, #84]	; 0x54
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800315a:	9016      	str	r0, [sp, #88]	; 0x58
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800315c:	a910      	add	r1, sp, #64	; 0x40
 800315e:	4620      	mov	r0, r4
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003160:	9310      	str	r3, [sp, #64]	; 0x40
  sConfigOC.Pulse = 1;
 8003162:	9611      	str	r6, [sp, #68]	; 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003164:	f7fe ffba 	bl	80020dc <HAL_TIM_PWM_ConfigChannel>
 8003168:	b100      	cbz	r0, 800316c <main+0x3b0>
 800316a:	e7fe      	b.n	800316a <main+0x3ae>
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800316c:	900e      	str	r0, [sp, #56]	; 0x38
  sConfigIC.ICFilter = 0;
 800316e:	900f      	str	r0, [sp, #60]	; 0x3c
  if (HAL_TIM_IC_ConfigChannel(&htim15, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8003170:	2204      	movs	r2, #4
 8003172:	a90c      	add	r1, sp, #48	; 0x30
 8003174:	4620      	mov	r0, r4
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 8003176:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800317a:	960d      	str	r6, [sp, #52]	; 0x34
  if (HAL_TIM_IC_ConfigChannel(&htim15, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 800317c:	f7fe fe54 	bl	8001e28 <HAL_TIM_IC_ConfigChannel>
 8003180:	b100      	cbz	r0, 8003184 <main+0x3c8>
 8003182:	e7fe      	b.n	8003182 <main+0x3c6>
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003184:	9017      	str	r0, [sp, #92]	; 0x5c
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003186:	9018      	str	r0, [sp, #96]	; 0x60
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003188:	9019      	str	r0, [sp, #100]	; 0x64
  sBreakDeadTimeConfig.DeadTime = 0;
 800318a:	901a      	str	r0, [sp, #104]	; 0x68
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800318c:	901b      	str	r0, [sp, #108]	; 0x6c
  sBreakDeadTimeConfig.BreakFilter = 0;
 800318e:	901d      	str	r0, [sp, #116]	; 0x74
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003190:	9021      	str	r0, [sp, #132]	; 0x84
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 8003192:	a917      	add	r1, sp, #92	; 0x5c
 8003194:	4620      	mov	r0, r4
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003196:	971c      	str	r7, [sp, #112]	; 0x70
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 8003198:	f7ff f852 	bl	8002240 <HAL_TIMEx_ConfigBreakDeadTime>
 800319c:	4605      	mov	r5, r0
 800319e:	b100      	cbz	r0, 80031a2 <main+0x3e6>
 80031a0:	e7fe      	b.n	80031a0 <main+0x3e4>
  HAL_TIM_MspPostInit(&htim15);
 80031a2:	4620      	mov	r0, r4
 80031a4:	f000 fc86 	bl	8003ab4 <HAL_TIM_MspPostInit>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_SET); // set nsleep to high voltage
 80031a8:	4632      	mov	r2, r6
 80031aa:	2120      	movs	r1, #32
 80031ac:	482a      	ldr	r0, [pc, #168]	; (8003258 <main+0x49c>)
 80031ae:	f7fd fe9b 	bl	8000ee8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 80031b2:	4632      	mov	r2, r6
 80031b4:	2120      	movs	r1, #32
 80031b6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80031ba:	f7fd fe95 	bl	8000ee8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 80031be:	462a      	mov	r2, r5
 80031c0:	2110      	movs	r1, #16
 80031c2:	4826      	ldr	r0, [pc, #152]	; (800325c <main+0x4a0>)
 80031c4:	f7fd fe90 	bl	8000ee8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 80031c8:	462a      	mov	r2, r5
 80031ca:	2120      	movs	r1, #32
 80031cc:	4823      	ldr	r0, [pc, #140]	; (800325c <main+0x4a0>)
 80031ce:	f7fd fe8b 	bl	8000ee8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 80031d2:	462a      	mov	r2, r5
 80031d4:	2140      	movs	r1, #64	; 0x40
 80031d6:	4821      	ldr	r0, [pc, #132]	; (800325c <main+0x4a0>)
 80031d8:	f7fd fe86 	bl	8000ee8 <HAL_GPIO_WritePin>
	HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_3); // AIN right wheel
 80031dc:	2108      	movs	r1, #8
 80031de:	4820      	ldr	r0, [pc, #128]	; (8003260 <main+0x4a4>)
 80031e0:	f7fe feb6 	bl	8001f50 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_4);
 80031e4:	210c      	movs	r1, #12
 80031e6:	481e      	ldr	r0, [pc, #120]	; (8003260 <main+0x4a4>)
 80031e8:	f7fe feb2 	bl	8001f50 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4,TIM_CHANNEL_3); // BIN left wheel
 80031ec:	2108      	movs	r1, #8
 80031ee:	481d      	ldr	r0, [pc, #116]	; (8003264 <main+0x4a8>)
 80031f0:	f7fe feae 	bl	8001f50 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4,TIM_CHANNEL_4);
 80031f4:	210c      	movs	r1, #12
 80031f6:	481b      	ldr	r0, [pc, #108]	; (8003264 <main+0x4a8>)
 80031f8:	f7fe feaa 	bl	8001f50 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim8,TIM_CHANNEL_1);                  // trigger
 80031fc:	4629      	mov	r1, r5
 80031fe:	481a      	ldr	r0, [pc, #104]	; (8003268 <main+0x4ac>)
 8003200:	f7fe fea6 	bl	8001f50 <HAL_TIM_PWM_Start>
	if(HAL_TIM_IC_Start_IT(&htim8,TIM_CHANNEL_2) != HAL_OK){  // echo
 8003204:	2104      	movs	r1, #4
 8003206:	4818      	ldr	r0, [pc, #96]	; (8003268 <main+0x4ac>)
 8003208:	f7fe fecc 	bl	8001fa4 <HAL_TIM_IC_Start_IT>
 800320c:	4604      	mov	r4, r0
 800320e:	b100      	cbz	r0, 8003212 <main+0x456>
 8003210:	e7fe      	b.n	8003210 <main+0x454>
	HAL_Delay(3);
 8003212:	2003      	movs	r0, #3
 8003214:	f7fd fcea 	bl	8000bec <HAL_Delay>
	HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_1);
 8003218:	4621      	mov	r1, r4
 800321a:	480b      	ldr	r0, [pc, #44]	; (8003248 <main+0x48c>)
 800321c:	f7fe fe98 	bl	8001f50 <HAL_TIM_PWM_Start>
	if(HAL_TIM_IC_Start_IT(&htim1,TIM_CHANNEL_2) != HAL_OK){
 8003220:	2104      	movs	r1, #4
 8003222:	4809      	ldr	r0, [pc, #36]	; (8003248 <main+0x48c>)
 8003224:	f7fe febe 	bl	8001fa4 <HAL_TIM_IC_Start_IT>
 8003228:	b100      	cbz	r0, 800322c <main+0x470>
 800322a:	e7fe      	b.n	800322a <main+0x46e>
	HAL_Delay(3);
 800322c:	2003      	movs	r0, #3
 800322e:	f7fd fcdd 	bl	8000bec <HAL_Delay>
	HAL_TIM_PWM_Start(&htim15,TIM_CHANNEL_1);
 8003232:	2100      	movs	r1, #0
 8003234:	4806      	ldr	r0, [pc, #24]	; (8003250 <main+0x494>)
 8003236:	f7fe fe8b 	bl	8001f50 <HAL_TIM_PWM_Start>
	if(HAL_TIM_IC_Start_IT(&htim15,TIM_CHANNEL_2) != HAL_OK){
 800323a:	2104      	movs	r1, #4
 800323c:	4804      	ldr	r0, [pc, #16]	; (8003250 <main+0x494>)
 800323e:	f7fe feb1 	bl	8001fa4 <HAL_TIM_IC_Start_IT>
 8003242:	b198      	cbz	r0, 800326c <main+0x4b0>
 8003244:	e7fe      	b.n	8003244 <main+0x488>
 8003246:	bf00      	nop
 8003248:	200001f4 	.word	0x200001f4
 800324c:	40012c00 	.word	0x40012c00
 8003250:	20000174 	.word	0x20000174
 8003254:	40014000 	.word	0x40014000
 8003258:	48000800 	.word	0x48000800
 800325c:	48000400 	.word	0x48000400
 8003260:	200001b4 	.word	0x200001b4
 8003264:	20000134 	.word	0x20000134
 8003268:	200000f4 	.word	0x200000f4
	HAL_UART_Receive_IT(&huart4,&rx_data,1);
 800326c:	2201      	movs	r2, #1
 800326e:	49bd      	ldr	r1, [pc, #756]	; (8003564 <main+0x7a8>)
 8003270:	48bd      	ldr	r0, [pc, #756]	; (8003568 <main+0x7ac>)
 8003272:	f7ff f83b 	bl	80022ec <HAL_UART_Receive_IT>
	HAL_UART_Receive_IT(&huart2,&rx_data,1);
 8003276:	2201      	movs	r2, #1
 8003278:	49ba      	ldr	r1, [pc, #744]	; (8003564 <main+0x7a8>)
 800327a:	48bc      	ldr	r0, [pc, #752]	; (800356c <main+0x7b0>)
 800327c:	f7ff f836 	bl	80022ec <HAL_UART_Receive_IT>
	initwifi();
 8003280:	f7ff fd7a 	bl	8002d78 <initwifi>
		if(flag){
 8003284:	4dba      	ldr	r5, [pc, #744]	; (8003570 <main+0x7b4>)
 8003286:	4cbb      	ldr	r4, [pc, #748]	; (8003574 <main+0x7b8>)
 8003288:	462e      	mov	r6, r5
 800328a:	682b      	ldr	r3, [r5, #0]
 800328c:	b15b      	cbz	r3, 80032a6 <main+0x4ea>
			if(rx_data == 'm'){ // self_move
 800328e:	4bb5      	ldr	r3, [pc, #724]	; (8003564 <main+0x7a8>)
 8003290:	7818      	ldrb	r0, [r3, #0]
 8003292:	286d      	cmp	r0, #109	; 0x6d
 8003294:	f040 8239 	bne.w	800370a <main+0x94e>
				self_move = 1;
 8003298:	2301      	movs	r3, #1
				self_move = 0;
 800329a:	6023      	str	r3, [r4, #0]
				speed = 5;
 800329c:	4bb6      	ldr	r3, [pc, #728]	; (8003578 <main+0x7bc>)
 800329e:	2205      	movs	r2, #5
 80032a0:	601a      	str	r2, [r3, #0]
			flag = 0;
 80032a2:	2300      	movs	r3, #0
 80032a4:	6033      	str	r3, [r6, #0]
		if(self_move){
 80032a6:	6823      	ldr	r3, [r4, #0]
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d0ee      	beq.n	800328a <main+0x4ce>
			if(front_distance != 0 && last_front_distance != 0 && front_distance < turn_threshold && (front_distance - last_front_distance) < 0 && isforward){ // hit front
 80032ac:	4bb3      	ldr	r3, [pc, #716]	; (800357c <main+0x7c0>)
 80032ae:	f8df a2f4 	ldr.w	sl, [pc, #756]	; 80035a4 <main+0x7e8>
 80032b2:	e9d3 4500 	ldrd	r4, r5, [r3]
 80032b6:	2200      	movs	r2, #0
 80032b8:	2300      	movs	r3, #0
 80032ba:	4620      	mov	r0, r4
 80032bc:	4629      	mov	r1, r5
 80032be:	f7fd fc07 	bl	8000ad0 <__aeabi_dcmpeq>
 80032c2:	2800      	cmp	r0, #0
 80032c4:	f040 809e 	bne.w	8003404 <main+0x648>
 80032c8:	f8df 82dc 	ldr.w	r8, [pc, #732]	; 80035a8 <main+0x7ec>
 80032cc:	e9d8 6700 	ldrd	r6, r7, [r8]
 80032d0:	2200      	movs	r2, #0
 80032d2:	2300      	movs	r3, #0
 80032d4:	4630      	mov	r0, r6
 80032d6:	4639      	mov	r1, r7
 80032d8:	f7fd fbfa 	bl	8000ad0 <__aeabi_dcmpeq>
 80032dc:	2800      	cmp	r0, #0
 80032de:	f040 8091 	bne.w	8003404 <main+0x648>
 80032e2:	f8df 92b8 	ldr.w	r9, [pc, #696]	; 800359c <main+0x7e0>
 80032e6:	f8d9 0000 	ldr.w	r0, [r9]
 80032ea:	f7fd f923 	bl	8000534 <__aeabi_i2d>
 80032ee:	4602      	mov	r2, r0
 80032f0:	460b      	mov	r3, r1
 80032f2:	4620      	mov	r0, r4
 80032f4:	4629      	mov	r1, r5
 80032f6:	f7fd fbf5 	bl	8000ae4 <__aeabi_dcmplt>
 80032fa:	2800      	cmp	r0, #0
 80032fc:	f000 8082 	beq.w	8003404 <main+0x648>
 8003300:	4632      	mov	r2, r6
 8003302:	463b      	mov	r3, r7
 8003304:	4620      	mov	r0, r4
 8003306:	4629      	mov	r1, r5
 8003308:	f7fc ffc6 	bl	8000298 <__aeabi_dsub>
 800330c:	2200      	movs	r2, #0
 800330e:	2300      	movs	r3, #0
 8003310:	f7fd fbe8 	bl	8000ae4 <__aeabi_dcmplt>
 8003314:	2800      	cmp	r0, #0
 8003316:	d075      	beq.n	8003404 <main+0x648>
 8003318:	4b99      	ldr	r3, [pc, #612]	; (8003580 <main+0x7c4>)
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	2b00      	cmp	r3, #0
 800331e:	d071      	beq.n	8003404 <main+0x648>
				sprintf(tmp,"front turn %d %d\n\r",(int)front_distance,(int)last_front_distance);
 8003320:	4630      	mov	r0, r6
 8003322:	4639      	mov	r1, r7
 8003324:	f7fd fc06 	bl	8000b34 <__aeabi_d2iz>
 8003328:	4629      	mov	r1, r5
 800332a:	4606      	mov	r6, r0
 800332c:	4620      	mov	r0, r4
 800332e:	f7fd fc01 	bl	8000b34 <__aeabi_d2iz>
 8003332:	4633      	mov	r3, r6
 8003334:	4602      	mov	r2, r0
 8003336:	4993      	ldr	r1, [pc, #588]	; (8003584 <main+0x7c8>)
 8003338:	4e8f      	ldr	r6, [pc, #572]	; (8003578 <main+0x7bc>)
 800333a:	a817      	add	r0, sp, #92	; 0x5c
 800333c:	f000 fd26 	bl	8003d8c <siprintf>
				HAL_UART_Transmit(&huart2,tmp,strlen((char*)tmp),0xFFFF);
 8003340:	a817      	add	r0, sp, #92	; 0x5c
 8003342:	f7fc ff4d 	bl	80001e0 <strlen>
 8003346:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800334a:	b282      	uxth	r2, r0
 800334c:	a917      	add	r1, sp, #92	; 0x5c
 800334e:	4887      	ldr	r0, [pc, #540]	; (800356c <main+0x7b0>)
 8003350:	f7ff f9a9 	bl	80026a6 <HAL_UART_Transmit>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
 8003354:	2201      	movs	r2, #1
 8003356:	2110      	movs	r1, #16
 8003358:	488b      	ldr	r0, [pc, #556]	; (8003588 <main+0x7cc>)
 800335a:	f7fd fdc5 	bl	8000ee8 <HAL_GPIO_WritePin>
				if(right_distance < left_distance){
 800335e:	4b8b      	ldr	r3, [pc, #556]	; (800358c <main+0x7d0>)
 8003360:	e9da 0100 	ldrd	r0, r1, [sl]
 8003364:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003368:	f7fd fbbc 	bl	8000ae4 <__aeabi_dcmplt>
 800336c:	2800      	cmp	r0, #0
 800336e:	f000 8209 	beq.w	8003784 <main+0x9c8>
					sprintf(tmp,"turn left\n\r");
 8003372:	4987      	ldr	r1, [pc, #540]	; (8003590 <main+0x7d4>)
					while((front_distance < turn_threshold || last_front_distance < turn_threshold) || (right_distance - last_right_distance) < 0) //|| (right_distance - last_right_distance) < 0)
 8003374:	4f87      	ldr	r7, [pc, #540]	; (8003594 <main+0x7d8>)
					sprintf(tmp,"turn left\n\r");
 8003376:	a817      	add	r0, sp, #92	; 0x5c
 8003378:	f000 fd2c 	bl	8003dd4 <strcpy>
					HAL_UART_Transmit(&huart2,tmp,strlen((char*)tmp),0xFFFF);
 800337c:	a817      	add	r0, sp, #92	; 0x5c
 800337e:	f7fc ff2f 	bl	80001e0 <strlen>
 8003382:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003386:	b282      	uxth	r2, r0
 8003388:	a917      	add	r1, sp, #92	; 0x5c
 800338a:	4878      	ldr	r0, [pc, #480]	; (800356c <main+0x7b0>)
 800338c:	f7ff f98b 	bl	80026a6 <HAL_UART_Transmit>
					while((front_distance < turn_threshold || last_front_distance < turn_threshold) || (right_distance - last_right_distance) < 0) //|| (right_distance - last_right_distance) < 0)
 8003390:	f8d9 0000 	ldr.w	r0, [r9]
 8003394:	f7fd f8ce 	bl	8000534 <__aeabi_i2d>
 8003398:	4b78      	ldr	r3, [pc, #480]	; (800357c <main+0x7c0>)
 800339a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800339e:	4604      	mov	r4, r0
 80033a0:	460d      	mov	r5, r1
 80033a2:	f7fd fbbd 	bl	8000b20 <__aeabi_dcmpgt>
 80033a6:	2800      	cmp	r0, #0
 80033a8:	f040 81e5 	bne.w	8003776 <main+0x9ba>
 80033ac:	e9d8 2300 	ldrd	r2, r3, [r8]
 80033b0:	4620      	mov	r0, r4
 80033b2:	4629      	mov	r1, r5
 80033b4:	f7fd fbb4 	bl	8000b20 <__aeabi_dcmpgt>
 80033b8:	2800      	cmp	r0, #0
 80033ba:	f040 81dc 	bne.w	8003776 <main+0x9ba>
 80033be:	e9d7 2300 	ldrd	r2, r3, [r7]
 80033c2:	e9da 0100 	ldrd	r0, r1, [sl]
 80033c6:	f7fc ff67 	bl	8000298 <__aeabi_dsub>
 80033ca:	2200      	movs	r2, #0
 80033cc:	2300      	movs	r3, #0
 80033ce:	f7fd fb89 	bl	8000ae4 <__aeabi_dcmplt>
 80033d2:	2800      	cmp	r0, #0
 80033d4:	f040 81cf 	bne.w	8003776 <main+0x9ba>
				sprintf(tmp,"out\n\r");
 80033d8:	496f      	ldr	r1, [pc, #444]	; (8003598 <main+0x7dc>)
 80033da:	a817      	add	r0, sp, #92	; 0x5c
 80033dc:	f000 fcfa 	bl	8003dd4 <strcpy>
				HAL_UART_Transmit(&huart2,tmp,strlen((char*)tmp),0xFFFF);
 80033e0:	a817      	add	r0, sp, #92	; 0x5c
 80033e2:	f7fc fefd 	bl	80001e0 <strlen>
 80033e6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80033ea:	b282      	uxth	r2, r0
 80033ec:	a917      	add	r1, sp, #92	; 0x5c
 80033ee:	485f      	ldr	r0, [pc, #380]	; (800356c <main+0x7b0>)
 80033f0:	f7ff f959 	bl	80026a6 <HAL_UART_Transmit>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 80033f4:	4864      	ldr	r0, [pc, #400]	; (8003588 <main+0x7cc>)
 80033f6:	2200      	movs	r2, #0
 80033f8:	2110      	movs	r1, #16
 80033fa:	f7fd fd75 	bl	8000ee8 <HAL_GPIO_WritePin>
				forward(speed);
 80033fe:	6830      	ldr	r0, [r6, #0]
 8003400:	f7ff fc74 	bl	8002cec <forward>
			if(right_distance != 0 && last_right_distance != 0 && (right_distance < right_side_threshold || last_right_distance < right_side_threshold ) && (right_distance - last_right_distance) < 0  && front_distance > turn_threshold && isforward){ // hit right
 8003404:	e9da 4500 	ldrd	r4, r5, [sl]
 8003408:	2200      	movs	r2, #0
 800340a:	2300      	movs	r3, #0
 800340c:	4620      	mov	r0, r4
 800340e:	4629      	mov	r1, r5
 8003410:	f7fd fb5e 	bl	8000ad0 <__aeabi_dcmpeq>
 8003414:	2800      	cmp	r0, #0
 8003416:	f040 80a2 	bne.w	800355e <main+0x7a2>
 800341a:	f8df 8178 	ldr.w	r8, [pc, #376]	; 8003594 <main+0x7d8>
 800341e:	e9d8 6700 	ldrd	r6, r7, [r8]
 8003422:	2200      	movs	r2, #0
 8003424:	2300      	movs	r3, #0
 8003426:	4630      	mov	r0, r6
 8003428:	4639      	mov	r1, r7
 800342a:	f7fd fb51 	bl	8000ad0 <__aeabi_dcmpeq>
 800342e:	f8cd 800c 	str.w	r8, [sp, #12]
 8003432:	2800      	cmp	r0, #0
 8003434:	f040 8093 	bne.w	800355e <main+0x7a2>
 8003438:	f8df b170 	ldr.w	fp, [pc, #368]	; 80035ac <main+0x7f0>
 800343c:	f8db 0000 	ldr.w	r0, [fp]
 8003440:	f7fd f878 	bl	8000534 <__aeabi_i2d>
 8003444:	4680      	mov	r8, r0
 8003446:	4689      	mov	r9, r1
 8003448:	4602      	mov	r2, r0
 800344a:	460b      	mov	r3, r1
 800344c:	4620      	mov	r0, r4
 800344e:	4629      	mov	r1, r5
 8003450:	f7fd fb48 	bl	8000ae4 <__aeabi_dcmplt>
 8003454:	b938      	cbnz	r0, 8003466 <main+0x6aa>
 8003456:	4642      	mov	r2, r8
 8003458:	464b      	mov	r3, r9
 800345a:	4630      	mov	r0, r6
 800345c:	4639      	mov	r1, r7
 800345e:	f7fd fb41 	bl	8000ae4 <__aeabi_dcmplt>
 8003462:	2800      	cmp	r0, #0
 8003464:	d07b      	beq.n	800355e <main+0x7a2>
 8003466:	4632      	mov	r2, r6
 8003468:	463b      	mov	r3, r7
 800346a:	4620      	mov	r0, r4
 800346c:	4629      	mov	r1, r5
 800346e:	f7fc ff13 	bl	8000298 <__aeabi_dsub>
 8003472:	2200      	movs	r2, #0
 8003474:	2300      	movs	r3, #0
 8003476:	f7fd fb35 	bl	8000ae4 <__aeabi_dcmplt>
 800347a:	2800      	cmp	r0, #0
 800347c:	d06f      	beq.n	800355e <main+0x7a2>
 800347e:	4b47      	ldr	r3, [pc, #284]	; (800359c <main+0x7e0>)
 8003480:	6818      	ldr	r0, [r3, #0]
 8003482:	f7fd f857 	bl	8000534 <__aeabi_i2d>
 8003486:	4b3d      	ldr	r3, [pc, #244]	; (800357c <main+0x7c0>)
 8003488:	e9d3 2300 	ldrd	r2, r3, [r3]
 800348c:	f7fd fb2a 	bl	8000ae4 <__aeabi_dcmplt>
 8003490:	2800      	cmp	r0, #0
 8003492:	d064      	beq.n	800355e <main+0x7a2>
 8003494:	4b3a      	ldr	r3, [pc, #232]	; (8003580 <main+0x7c4>)
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	2b00      	cmp	r3, #0
 800349a:	d060      	beq.n	800355e <main+0x7a2>
				sprintf(tmp,"right stop %d %d\n\r",(int)right_distance,(int)last_right_distance);
 800349c:	4630      	mov	r0, r6
 800349e:	4639      	mov	r1, r7
 80034a0:	f7fd fb48 	bl	8000b34 <__aeabi_d2iz>
 80034a4:	4629      	mov	r1, r5
 80034a6:	4606      	mov	r6, r0
 80034a8:	4620      	mov	r0, r4
 80034aa:	f7fd fb43 	bl	8000b34 <__aeabi_d2iz>
 80034ae:	4633      	mov	r3, r6
 80034b0:	4602      	mov	r2, r0
 80034b2:	493b      	ldr	r1, [pc, #236]	; (80035a0 <main+0x7e4>)
					turn_left(0,speed,speed-4,0); //turn_left(0,speed,speed,0); // origin (right_distance < 5)?turn_left(speed-2,0,speed+1,0):turn_left(speed-2,0,speed,0);
 80034b4:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 8003578 <main+0x7bc>
				sprintf(tmp,"right stop %d %d\n\r",(int)right_distance,(int)last_right_distance);
 80034b8:	a817      	add	r0, sp, #92	; 0x5c
 80034ba:	f000 fc67 	bl	8003d8c <siprintf>
				HAL_UART_Transmit(&huart2,tmp,strlen((char*)tmp),0xFFFF);
 80034be:	a817      	add	r0, sp, #92	; 0x5c
 80034c0:	f7fc fe8e 	bl	80001e0 <strlen>
 80034c4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80034c8:	b282      	uxth	r2, r0
 80034ca:	a917      	add	r1, sp, #92	; 0x5c
 80034cc:	4827      	ldr	r0, [pc, #156]	; (800356c <main+0x7b0>)
 80034ce:	f7ff f8ea 	bl	80026a6 <HAL_UART_Transmit>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 80034d2:	2201      	movs	r2, #1
 80034d4:	2120      	movs	r1, #32
 80034d6:	482c      	ldr	r0, [pc, #176]	; (8003588 <main+0x7cc>)
 80034d8:	f7fd fd06 	bl	8000ee8 <HAL_GPIO_WritePin>
					turn_left(0,speed,speed-4,0); //turn_left(0,speed,speed,0); // origin (right_distance < 5)?turn_left(speed-2,0,speed+1,0):turn_left(speed-2,0,speed,0);
 80034dc:	f8d8 1000 	ldr.w	r1, [r8]
 80034e0:	2300      	movs	r3, #0
 80034e2:	1f0a      	subs	r2, r1, #4
 80034e4:	4618      	mov	r0, r3
 80034e6:	f7ff fb1b 	bl	8002b20 <turn_left>
				while((right_distance - last_right_distance) < 0 && (right_distance < right_side_threshold || last_right_distance < right_side_threshold ) && front_distance > turn_threshold);//&& front_distance != last_front_distance
 80034ea:	9b03      	ldr	r3, [sp, #12]
 80034ec:	e9da 6700 	ldrd	r6, r7, [sl]
 80034f0:	ed93 7b00 	vldr	d7, [r3]
 80034f4:	4630      	mov	r0, r6
 80034f6:	ec53 2b17 	vmov	r2, r3, d7
 80034fa:	4639      	mov	r1, r7
 80034fc:	ed8d 7b00 	vstr	d7, [sp]
 8003500:	f7fc feca 	bl	8000298 <__aeabi_dsub>
 8003504:	2200      	movs	r2, #0
 8003506:	2300      	movs	r3, #0
 8003508:	f7fd faec 	bl	8000ae4 <__aeabi_dcmplt>
 800350c:	b1f0      	cbz	r0, 800354c <main+0x790>
 800350e:	f8db 0000 	ldr.w	r0, [fp]
 8003512:	f7fd f80f 	bl	8000534 <__aeabi_i2d>
 8003516:	4604      	mov	r4, r0
 8003518:	460d      	mov	r5, r1
 800351a:	4602      	mov	r2, r0
 800351c:	460b      	mov	r3, r1
 800351e:	4630      	mov	r0, r6
 8003520:	4639      	mov	r1, r7
 8003522:	f7fd fadf 	bl	8000ae4 <__aeabi_dcmplt>
 8003526:	b930      	cbnz	r0, 8003536 <main+0x77a>
 8003528:	4622      	mov	r2, r4
 800352a:	462b      	mov	r3, r5
 800352c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003530:	f7fd fad8 	bl	8000ae4 <__aeabi_dcmplt>
 8003534:	b150      	cbz	r0, 800354c <main+0x790>
 8003536:	4b19      	ldr	r3, [pc, #100]	; (800359c <main+0x7e0>)
 8003538:	6818      	ldr	r0, [r3, #0]
 800353a:	f7fc fffb 	bl	8000534 <__aeabi_i2d>
 800353e:	4b0f      	ldr	r3, [pc, #60]	; (800357c <main+0x7c0>)
 8003540:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003544:	f7fd face 	bl	8000ae4 <__aeabi_dcmplt>
 8003548:	2800      	cmp	r0, #0
 800354a:	d1c7      	bne.n	80034dc <main+0x720>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 800354c:	480e      	ldr	r0, [pc, #56]	; (8003588 <main+0x7cc>)
 800354e:	2200      	movs	r2, #0
 8003550:	2120      	movs	r1, #32
 8003552:	f7fd fcc9 	bl	8000ee8 <HAL_GPIO_WritePin>
				forward(speed);
 8003556:	f8d8 0000 	ldr.w	r0, [r8]
 800355a:	f7ff fbc7 	bl	8002cec <forward>
			if(left_distance != 0 && last_left_distance != 0 && (left_distance < left_side_threshold || last_left_distance < left_side_threshold ) && (left_distance - last_left_distance) < 0  && front_distance > turn_threshold && isforward){ // hit left
 800355e:	4b0b      	ldr	r3, [pc, #44]	; (800358c <main+0x7d0>)
 8003560:	e026      	b.n	80035b0 <main+0x7f4>
 8003562:	bf00      	nop
 8003564:	20000050 	.word	0x20000050
 8003568:	20000234 	.word	0x20000234
 800356c:	200002a4 	.word	0x200002a4
 8003570:	20000000 	.word	0x20000000
 8003574:	20000054 	.word	0x20000054
 8003578:	20000058 	.word	0x20000058
 800357c:	20000008 	.word	0x20000008
 8003580:	20000014 	.word	0x20000014
 8003584:	08004671 	.word	0x08004671
 8003588:	48000400 	.word	0x48000400
 800358c:	20000030 	.word	0x20000030
 8003590:	08004684 	.word	0x08004684
 8003594:	20000028 	.word	0x20000028
 8003598:	08004690 	.word	0x08004690
 800359c:	2000005c 	.word	0x2000005c
 80035a0:	080046a3 	.word	0x080046a3
 80035a4:	20000040 	.word	0x20000040
 80035a8:	20000018 	.word	0x20000018
 80035ac:	2000004c 	.word	0x2000004c
 80035b0:	e9d3 6700 	ldrd	r6, r7, [r3]
 80035b4:	2200      	movs	r2, #0
 80035b6:	2300      	movs	r3, #0
 80035b8:	4630      	mov	r0, r6
 80035ba:	4639      	mov	r1, r7
 80035bc:	f7fd fa88 	bl	8000ad0 <__aeabi_dcmpeq>
 80035c0:	2800      	cmp	r0, #0
 80035c2:	f47f ae5f 	bne.w	8003284 <main+0x4c8>
 80035c6:	4c8b      	ldr	r4, [pc, #556]	; (80037f4 <main+0xa38>)
 80035c8:	e9d4 ab00 	ldrd	sl, fp, [r4]
 80035cc:	2200      	movs	r2, #0
 80035ce:	2300      	movs	r3, #0
 80035d0:	4650      	mov	r0, sl
 80035d2:	4659      	mov	r1, fp
 80035d4:	f7fd fa7c 	bl	8000ad0 <__aeabi_dcmpeq>
 80035d8:	9403      	str	r4, [sp, #12]
 80035da:	2800      	cmp	r0, #0
 80035dc:	f47f ae52 	bne.w	8003284 <main+0x4c8>
 80035e0:	4d85      	ldr	r5, [pc, #532]	; (80037f8 <main+0xa3c>)
 80035e2:	6828      	ldr	r0, [r5, #0]
 80035e4:	f7fc ffa6 	bl	8000534 <__aeabi_i2d>
 80035e8:	4680      	mov	r8, r0
 80035ea:	4689      	mov	r9, r1
 80035ec:	4602      	mov	r2, r0
 80035ee:	460b      	mov	r3, r1
 80035f0:	4630      	mov	r0, r6
 80035f2:	4639      	mov	r1, r7
 80035f4:	f7fd fa76 	bl	8000ae4 <__aeabi_dcmplt>
 80035f8:	b940      	cbnz	r0, 800360c <main+0x850>
 80035fa:	4642      	mov	r2, r8
 80035fc:	464b      	mov	r3, r9
 80035fe:	4650      	mov	r0, sl
 8003600:	4659      	mov	r1, fp
 8003602:	f7fd fa6f 	bl	8000ae4 <__aeabi_dcmplt>
 8003606:	2800      	cmp	r0, #0
 8003608:	f43f ae3c 	beq.w	8003284 <main+0x4c8>
 800360c:	4652      	mov	r2, sl
 800360e:	465b      	mov	r3, fp
 8003610:	4630      	mov	r0, r6
 8003612:	4639      	mov	r1, r7
 8003614:	f7fc fe40 	bl	8000298 <__aeabi_dsub>
 8003618:	2200      	movs	r2, #0
 800361a:	2300      	movs	r3, #0
 800361c:	f7fd fa62 	bl	8000ae4 <__aeabi_dcmplt>
 8003620:	2800      	cmp	r0, #0
 8003622:	f43f ae2f 	beq.w	8003284 <main+0x4c8>
 8003626:	4c75      	ldr	r4, [pc, #468]	; (80037fc <main+0xa40>)
 8003628:	6820      	ldr	r0, [r4, #0]
 800362a:	f7fc ff83 	bl	8000534 <__aeabi_i2d>
 800362e:	4b74      	ldr	r3, [pc, #464]	; (8003800 <main+0xa44>)
 8003630:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003634:	f7fd fa56 	bl	8000ae4 <__aeabi_dcmplt>
 8003638:	2800      	cmp	r0, #0
 800363a:	f43f ae23 	beq.w	8003284 <main+0x4c8>
 800363e:	4b71      	ldr	r3, [pc, #452]	; (8003804 <main+0xa48>)
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	2b00      	cmp	r3, #0
 8003644:	f43f ae1e 	beq.w	8003284 <main+0x4c8>
				sprintf(tmp,"left stop %d %d\n\r",(int)left_distance,(int)last_left_distance);
 8003648:	4650      	mov	r0, sl
 800364a:	4659      	mov	r1, fp
 800364c:	f7fd fa72 	bl	8000b34 <__aeabi_d2iz>
 8003650:	4639      	mov	r1, r7
 8003652:	4680      	mov	r8, r0
 8003654:	4630      	mov	r0, r6
 8003656:	f7fd fa6d 	bl	8000b34 <__aeabi_d2iz>
 800365a:	4643      	mov	r3, r8
 800365c:	4602      	mov	r2, r0
 800365e:	496a      	ldr	r1, [pc, #424]	; (8003808 <main+0xa4c>)
					turn_right(speed,0,0,speed); //turn_right(speed,0,0,speed); // (left_distance < 5)?turn_right(speed+1,0,speed-2,0):turn_right(speed,0,speed-2,0);
 8003660:	f8df a1b4 	ldr.w	sl, [pc, #436]	; 8003818 <main+0xa5c>
				sprintf(tmp,"left stop %d %d\n\r",(int)left_distance,(int)last_left_distance);
 8003664:	a817      	add	r0, sp, #92	; 0x5c
 8003666:	f000 fb91 	bl	8003d8c <siprintf>
				HAL_UART_Transmit(&huart2,tmp,strlen((char*)tmp),0xFFFF);
 800366a:	a817      	add	r0, sp, #92	; 0x5c
 800366c:	f7fc fdb8 	bl	80001e0 <strlen>
 8003670:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003674:	b282      	uxth	r2, r0
 8003676:	a917      	add	r1, sp, #92	; 0x5c
 8003678:	4864      	ldr	r0, [pc, #400]	; (800380c <main+0xa50>)
 800367a:	f7ff f814 	bl	80026a6 <HAL_UART_Transmit>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 800367e:	2201      	movs	r2, #1
 8003680:	2140      	movs	r1, #64	; 0x40
 8003682:	4863      	ldr	r0, [pc, #396]	; (8003810 <main+0xa54>)
 8003684:	f7fd fc30 	bl	8000ee8 <HAL_GPIO_WritePin>
					turn_right(speed,0,0,speed); //turn_right(speed,0,0,speed); // (left_distance < 5)?turn_right(speed+1,0,speed-2,0):turn_right(speed,0,speed-2,0);
 8003688:	f8da 3000 	ldr.w	r3, [sl]
 800368c:	2200      	movs	r2, #0
 800368e:	4611      	mov	r1, r2
 8003690:	4618      	mov	r0, r3
 8003692:	f7ff fa45 	bl	8002b20 <turn_left>
				while((left_distance - last_left_distance) < 0 && (left_distance < left_side_threshold || last_left_distance < left_side_threshold ) && front_distance > turn_threshold);// && front_distance != last_front_distance
 8003696:	4b5f      	ldr	r3, [pc, #380]	; (8003814 <main+0xa58>)
 8003698:	e9d3 8900 	ldrd	r8, r9, [r3]
 800369c:	9b03      	ldr	r3, [sp, #12]
 800369e:	ed93 7b00 	vldr	d7, [r3]
 80036a2:	4640      	mov	r0, r8
 80036a4:	ec53 2b17 	vmov	r2, r3, d7
 80036a8:	4649      	mov	r1, r9
 80036aa:	ed8d 7b00 	vstr	d7, [sp]
 80036ae:	f7fc fdf3 	bl	8000298 <__aeabi_dsub>
 80036b2:	2200      	movs	r2, #0
 80036b4:	2300      	movs	r3, #0
 80036b6:	f7fd fa15 	bl	8000ae4 <__aeabi_dcmplt>
 80036ba:	b1e0      	cbz	r0, 80036f6 <main+0x93a>
 80036bc:	6828      	ldr	r0, [r5, #0]
 80036be:	f7fc ff39 	bl	8000534 <__aeabi_i2d>
 80036c2:	4606      	mov	r6, r0
 80036c4:	460f      	mov	r7, r1
 80036c6:	4602      	mov	r2, r0
 80036c8:	460b      	mov	r3, r1
 80036ca:	4640      	mov	r0, r8
 80036cc:	4649      	mov	r1, r9
 80036ce:	f7fd fa09 	bl	8000ae4 <__aeabi_dcmplt>
 80036d2:	b930      	cbnz	r0, 80036e2 <main+0x926>
 80036d4:	4632      	mov	r2, r6
 80036d6:	463b      	mov	r3, r7
 80036d8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80036dc:	f7fd fa02 	bl	8000ae4 <__aeabi_dcmplt>
 80036e0:	b148      	cbz	r0, 80036f6 <main+0x93a>
 80036e2:	6820      	ldr	r0, [r4, #0]
 80036e4:	f7fc ff26 	bl	8000534 <__aeabi_i2d>
 80036e8:	4b45      	ldr	r3, [pc, #276]	; (8003800 <main+0xa44>)
 80036ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036ee:	f7fd f9f9 	bl	8000ae4 <__aeabi_dcmplt>
 80036f2:	2800      	cmp	r0, #0
 80036f4:	d1c8      	bne.n	8003688 <main+0x8cc>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 80036f6:	2200      	movs	r2, #0
 80036f8:	2140      	movs	r1, #64	; 0x40
 80036fa:	4845      	ldr	r0, [pc, #276]	; (8003810 <main+0xa54>)
 80036fc:	f7fd fbf4 	bl	8000ee8 <HAL_GPIO_WritePin>
				forward(speed);
 8003700:	f8da 0000 	ldr.w	r0, [sl]
 8003704:	f7ff faf2 	bl	8002cec <forward>
 8003708:	e5bc      	b.n	8003284 <main+0x4c8>
			else if(rx_data == 'c'){ // user control
 800370a:	2863      	cmp	r0, #99	; 0x63
 800370c:	d101      	bne.n	8003712 <main+0x956>
				self_move = 0;
 800370e:	2300      	movs	r3, #0
 8003710:	e5c3      	b.n	800329a <main+0x4de>
			else if(rx_data == 'r'){ // turn right
 8003712:	2872      	cmp	r0, #114	; 0x72
 8003714:	d10c      	bne.n	8003730 <main+0x974>
				turn_right(speed,0,0,0); // origin turn_right(speed,0,speed-2,0);
 8003716:	4840      	ldr	r0, [pc, #256]	; (8003818 <main+0xa5c>)
 8003718:	2300      	movs	r3, #0
 800371a:	6800      	ldr	r0, [r0, #0]
 800371c:	461a      	mov	r2, r3
 800371e:	4619      	mov	r1, r3
				turn_left(0,0,speed,0); // origin turn_left(speed-2,0,speed,0);
 8003720:	f7ff f9fe 	bl	8002b20 <turn_left>
				HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8003724:	2120      	movs	r1, #32
 8003726:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800372a:	f7fd fbe2 	bl	8000ef2 <HAL_GPIO_TogglePin>
 800372e:	e5b8      	b.n	80032a2 <main+0x4e6>
			else if(rx_data == 'l'){
 8003730:	286c      	cmp	r0, #108	; 0x6c
 8003732:	d105      	bne.n	8003740 <main+0x984>
				turn_left(0,0,speed,0); // origin turn_left(speed-2,0,speed,0);
 8003734:	4a38      	ldr	r2, [pc, #224]	; (8003818 <main+0xa5c>)
 8003736:	2300      	movs	r3, #0
 8003738:	6812      	ldr	r2, [r2, #0]
 800373a:	4619      	mov	r1, r3
 800373c:	4618      	mov	r0, r3
 800373e:	e7ef      	b.n	8003720 <main+0x964>
			else if(rx_data == 'b'){
 8003740:	2862      	cmp	r0, #98	; 0x62
 8003742:	d104      	bne.n	800374e <main+0x992>
				backward(speed);
 8003744:	4b34      	ldr	r3, [pc, #208]	; (8003818 <main+0xa5c>)
 8003746:	6818      	ldr	r0, [r3, #0]
 8003748:	f7ff fa30 	bl	8002bac <backward>
 800374c:	e7ea      	b.n	8003724 <main+0x968>
			else if(rx_data == 'x'){
 800374e:	2878      	cmp	r0, #120	; 0x78
 8003750:	d102      	bne.n	8003758 <main+0x99c>
				stop();
 8003752:	f7ff fa71 	bl	8002c38 <stop>
 8003756:	e7e5      	b.n	8003724 <main+0x968>
			else if(rx_data == 'f'){
 8003758:	2866      	cmp	r0, #102	; 0x66
 800375a:	d104      	bne.n	8003766 <main+0x9aa>
				forward(speed);
 800375c:	4b2e      	ldr	r3, [pc, #184]	; (8003818 <main+0xa5c>)
 800375e:	6818      	ldr	r0, [r3, #0]
				forward(speed);
 8003760:	f7ff fac4 	bl	8002cec <forward>
 8003764:	e7de      	b.n	8003724 <main+0x968>
			else if(rx_data - '0' <= 5 && rx_data - '0' >= 0){ //(input >=0 && input <= 5){
 8003766:	3830      	subs	r0, #48	; 0x30
 8003768:	b2c3      	uxtb	r3, r0
 800376a:	2b05      	cmp	r3, #5
 800376c:	f63f ad99 	bhi.w	80032a2 <main+0x4e6>
				speed = rx_data - '0';
 8003770:	4b29      	ldr	r3, [pc, #164]	; (8003818 <main+0xa5c>)
 8003772:	6018      	str	r0, [r3, #0]
 8003774:	e7f4      	b.n	8003760 <main+0x9a4>
						turn_left(0,speed,speed,0);
 8003776:	6832      	ldr	r2, [r6, #0]
 8003778:	2300      	movs	r3, #0
 800377a:	4611      	mov	r1, r2
 800377c:	4618      	mov	r0, r3
 800377e:	f7ff f9cf 	bl	8002b20 <turn_left>
 8003782:	e605      	b.n	8003390 <main+0x5d4>
					sprintf(tmp,"turn right\n\r");
 8003784:	4925      	ldr	r1, [pc, #148]	; (800381c <main+0xa60>)
					while((front_distance < turn_threshold || last_front_distance < turn_threshold) || (left_distance - last_left_distance) < 0) // || (left_distance - last_left_distance) < 0)  && front_distance != last_front_distance
 8003786:	4f1b      	ldr	r7, [pc, #108]	; (80037f4 <main+0xa38>)
					sprintf(tmp,"turn right\n\r");
 8003788:	a817      	add	r0, sp, #92	; 0x5c
 800378a:	f000 fb23 	bl	8003dd4 <strcpy>
					HAL_UART_Transmit(&huart2,tmp,strlen((char*)tmp),0xFFFF);
 800378e:	a817      	add	r0, sp, #92	; 0x5c
 8003790:	f7fc fd26 	bl	80001e0 <strlen>
 8003794:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003798:	b282      	uxth	r2, r0
 800379a:	a917      	add	r1, sp, #92	; 0x5c
 800379c:	481b      	ldr	r0, [pc, #108]	; (800380c <main+0xa50>)
 800379e:	f7fe ff82 	bl	80026a6 <HAL_UART_Transmit>
					while((front_distance < turn_threshold || last_front_distance < turn_threshold) || (left_distance - last_left_distance) < 0) // || (left_distance - last_left_distance) < 0)  && front_distance != last_front_distance
 80037a2:	f8d9 0000 	ldr.w	r0, [r9]
 80037a6:	f7fc fec5 	bl	8000534 <__aeabi_i2d>
 80037aa:	4b15      	ldr	r3, [pc, #84]	; (8003800 <main+0xa44>)
 80037ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037b0:	4604      	mov	r4, r0
 80037b2:	460d      	mov	r5, r1
 80037b4:	f7fd f9b4 	bl	8000b20 <__aeabi_dcmpgt>
 80037b8:	b9a0      	cbnz	r0, 80037e4 <main+0xa28>
 80037ba:	e9d8 2300 	ldrd	r2, r3, [r8]
 80037be:	4620      	mov	r0, r4
 80037c0:	4629      	mov	r1, r5
 80037c2:	f7fd f9ad 	bl	8000b20 <__aeabi_dcmpgt>
 80037c6:	b968      	cbnz	r0, 80037e4 <main+0xa28>
 80037c8:	4912      	ldr	r1, [pc, #72]	; (8003814 <main+0xa58>)
 80037ca:	e9d7 2300 	ldrd	r2, r3, [r7]
 80037ce:	e9d1 0100 	ldrd	r0, r1, [r1]
 80037d2:	f7fc fd61 	bl	8000298 <__aeabi_dsub>
 80037d6:	2200      	movs	r2, #0
 80037d8:	2300      	movs	r3, #0
 80037da:	f7fd f983 	bl	8000ae4 <__aeabi_dcmplt>
 80037de:	2800      	cmp	r0, #0
 80037e0:	f43f adfa 	beq.w	80033d8 <main+0x61c>
						turn_right(speed,0,0,speed);
 80037e4:	6833      	ldr	r3, [r6, #0]
 80037e6:	2200      	movs	r2, #0
 80037e8:	4611      	mov	r1, r2
 80037ea:	4618      	mov	r0, r3
 80037ec:	f7ff f998 	bl	8002b20 <turn_left>
 80037f0:	e7d7      	b.n	80037a2 <main+0x9e6>
 80037f2:	bf00      	nop
 80037f4:	20000020 	.word	0x20000020
 80037f8:	2000003c 	.word	0x2000003c
 80037fc:	2000005c 	.word	0x2000005c
 8003800:	20000008 	.word	0x20000008
 8003804:	20000014 	.word	0x20000014
 8003808:	080046b6 	.word	0x080046b6
 800380c:	200002a4 	.word	0x200002a4
 8003810:	48000400 	.word	0x48000400
 8003814:	20000030 	.word	0x20000030
 8003818:	20000058 	.word	0x20000058
 800381c:	08004696 	.word	0x08004696

08003820 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim){
 8003820:	b538      	push	{r3, r4, r5, lr}
	if(htim == &htim8){
 8003822:	4b1f      	ldr	r3, [pc, #124]	; (80038a0 <HAL_TIM_IC_CaptureCallback+0x80>)
 8003824:	4298      	cmp	r0, r3
 8003826:	d11b      	bne.n	8003860 <HAL_TIM_IC_CaptureCallback+0x40>
		if(front_rise == 1){
 8003828:	4c1e      	ldr	r4, [pc, #120]	; (80038a4 <HAL_TIM_IC_CaptureCallback+0x84>)
 800382a:	6823      	ldr	r3, [r4, #0]
 800382c:	2b01      	cmp	r3, #1
 800382e:	6803      	ldr	r3, [r0, #0]
 8003830:	d103      	bne.n	800383a <HAL_TIM_IC_CaptureCallback+0x1a>
			right_rise = 1;
		}
	}
	else if(htim == &htim15){
		if(left_rise == 1){
			__HAL_TIM_SET_COUNTER(&htim15,0);
 8003832:	2200      	movs	r2, #0
 8003834:	625a      	str	r2, [r3, #36]	; 0x24
			left_rise = 0;
 8003836:	6022      	str	r2, [r4, #0]
 8003838:	bd38      	pop	{r3, r4, r5, pc}
			last_front_distance = front_distance;
 800383a:	4d1b      	ldr	r5, [pc, #108]	; (80038a8 <HAL_TIM_IC_CaptureCallback+0x88>)
 800383c:	4a1b      	ldr	r2, [pc, #108]	; (80038ac <HAL_TIM_IC_CaptureCallback+0x8c>)
 800383e:	e9d5 0100 	ldrd	r0, r1, [r5]
		}
		else{

			last_left_distance = left_distance;
 8003842:	e9c2 0100 	strd	r0, r1, [r2]
			left_distance = __HAL_TIM_GET_COUNTER(&htim15);
 8003846:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8003848:	f7fc fe64 	bl	8000514 <__aeabi_ui2d>
			left_distance /= 5.8;
 800384c:	a312      	add	r3, pc, #72	; (adr r3, 8003898 <HAL_TIM_IC_CaptureCallback+0x78>)
 800384e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003852:	f7fc ffff 	bl	8000854 <__aeabi_ddiv>
			left_rise = 1;
 8003856:	2301      	movs	r3, #1
			left_distance /= 5.8;
 8003858:	e9c5 0100 	strd	r0, r1, [r5]
			left_rise = 1;
 800385c:	6023      	str	r3, [r4, #0]
 800385e:	bd38      	pop	{r3, r4, r5, pc}
	else if(htim == &htim1){
 8003860:	4b13      	ldr	r3, [pc, #76]	; (80038b0 <HAL_TIM_IC_CaptureCallback+0x90>)
 8003862:	4298      	cmp	r0, r3
 8003864:	d109      	bne.n	800387a <HAL_TIM_IC_CaptureCallback+0x5a>
		if(right_rise == 1){
 8003866:	4c13      	ldr	r4, [pc, #76]	; (80038b4 <HAL_TIM_IC_CaptureCallback+0x94>)
 8003868:	6823      	ldr	r3, [r4, #0]
 800386a:	2b01      	cmp	r3, #1
 800386c:	6803      	ldr	r3, [r0, #0]
 800386e:	d0e0      	beq.n	8003832 <HAL_TIM_IC_CaptureCallback+0x12>
			last_right_distance = right_distance;
 8003870:	4d11      	ldr	r5, [pc, #68]	; (80038b8 <HAL_TIM_IC_CaptureCallback+0x98>)
 8003872:	4a12      	ldr	r2, [pc, #72]	; (80038bc <HAL_TIM_IC_CaptureCallback+0x9c>)
 8003874:	e9d5 0100 	ldrd	r0, r1, [r5]
 8003878:	e7e3      	b.n	8003842 <HAL_TIM_IC_CaptureCallback+0x22>
	else if(htim == &htim15){
 800387a:	4b11      	ldr	r3, [pc, #68]	; (80038c0 <HAL_TIM_IC_CaptureCallback+0xa0>)
 800387c:	4298      	cmp	r0, r3
 800387e:	d1ee      	bne.n	800385e <HAL_TIM_IC_CaptureCallback+0x3e>
		if(left_rise == 1){
 8003880:	4c10      	ldr	r4, [pc, #64]	; (80038c4 <HAL_TIM_IC_CaptureCallback+0xa4>)
 8003882:	6823      	ldr	r3, [r4, #0]
 8003884:	2b01      	cmp	r3, #1
 8003886:	6803      	ldr	r3, [r0, #0]
 8003888:	d0d3      	beq.n	8003832 <HAL_TIM_IC_CaptureCallback+0x12>
			last_left_distance = left_distance;
 800388a:	4d0f      	ldr	r5, [pc, #60]	; (80038c8 <HAL_TIM_IC_CaptureCallback+0xa8>)
 800388c:	4a0f      	ldr	r2, [pc, #60]	; (80038cc <HAL_TIM_IC_CaptureCallback+0xac>)
 800388e:	e9d5 0100 	ldrd	r0, r1, [r5]
 8003892:	e7d6      	b.n	8003842 <HAL_TIM_IC_CaptureCallback+0x22>
 8003894:	f3af 8000 	nop.w
 8003898:	33333333 	.word	0x33333333
 800389c:	40173333 	.word	0x40173333
 80038a0:	200000f4 	.word	0x200000f4
 80038a4:	20000010 	.word	0x20000010
 80038a8:	20000008 	.word	0x20000008
 80038ac:	20000018 	.word	0x20000018
 80038b0:	200001f4 	.word	0x200001f4
 80038b4:	20000048 	.word	0x20000048
 80038b8:	20000040 	.word	0x20000040
 80038bc:	20000028 	.word	0x20000028
 80038c0:	20000174 	.word	0x20000174
 80038c4:	20000038 	.word	0x20000038
 80038c8:	20000030 	.word	0x20000030
 80038cc:	20000020 	.word	0x20000020

080038d0 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80038d0:	4b1d      	ldr	r3, [pc, #116]	; (8003948 <HAL_MspInit+0x78>)
{
 80038d2:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80038d4:	699a      	ldr	r2, [r3, #24]
 80038d6:	f042 0201 	orr.w	r2, r2, #1
 80038da:	619a      	str	r2, [r3, #24]
 80038dc:	699b      	ldr	r3, [r3, #24]
 80038de:	f003 0301 	and.w	r3, r3, #1
 80038e2:	9301      	str	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80038e4:	2007      	movs	r0, #7
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80038e6:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80038e8:	f7fd f990 	bl	8000c0c <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 80038ec:	2200      	movs	r2, #0
 80038ee:	4611      	mov	r1, r2
 80038f0:	f06f 000b 	mvn.w	r0, #11
 80038f4:	f7fd f99c 	bl	8000c30 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 80038f8:	2200      	movs	r2, #0
 80038fa:	4611      	mov	r1, r2
 80038fc:	f06f 000a 	mvn.w	r0, #10
 8003900:	f7fd f996 	bl	8000c30 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8003904:	2200      	movs	r2, #0
 8003906:	4611      	mov	r1, r2
 8003908:	f06f 0009 	mvn.w	r0, #9
 800390c:	f7fd f990 	bl	8000c30 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8003910:	2200      	movs	r2, #0
 8003912:	4611      	mov	r1, r2
 8003914:	f06f 0004 	mvn.w	r0, #4
 8003918:	f7fd f98a 	bl	8000c30 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 800391c:	2200      	movs	r2, #0
 800391e:	4611      	mov	r1, r2
 8003920:	f06f 0003 	mvn.w	r0, #3
 8003924:	f7fd f984 	bl	8000c30 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8003928:	2200      	movs	r2, #0
 800392a:	4611      	mov	r1, r2
 800392c:	f06f 0001 	mvn.w	r0, #1
 8003930:	f7fd f97e 	bl	8000c30 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8003934:	2200      	movs	r2, #0
 8003936:	4611      	mov	r1, r2
 8003938:	f04f 30ff 	mov.w	r0, #4294967295
 800393c:	f7fd f978 	bl	8000c30 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003940:	b003      	add	sp, #12
 8003942:	f85d fb04 	ldr.w	pc, [sp], #4
 8003946:	bf00      	nop
 8003948:	40021000 	.word	0x40021000

0800394c <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800394c:	b510      	push	{r4, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(htim_pwm->Instance==TIM1)
 800394e:	6803      	ldr	r3, [r0, #0]
 8003950:	4a50      	ldr	r2, [pc, #320]	; (8003a94 <HAL_TIM_PWM_MspInit+0x148>)
 8003952:	4293      	cmp	r3, r2
{
 8003954:	b08a      	sub	sp, #40	; 0x28
  if(htim_pwm->Instance==TIM1)
 8003956:	d125      	bne.n	80039a4 <HAL_TIM_PWM_MspInit+0x58>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003958:	4b4f      	ldr	r3, [pc, #316]	; (8003a98 <HAL_TIM_PWM_MspInit+0x14c>)
    GPIO_InitStruct.Pin = GPIO_PIN_1;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800395a:	4850      	ldr	r0, [pc, #320]	; (8003a9c <HAL_TIM_PWM_MspInit+0x150>)
    __HAL_RCC_TIM1_CLK_ENABLE();
 800395c:	699a      	ldr	r2, [r3, #24]
 800395e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003962:	619a      	str	r2, [r3, #24]
 8003964:	699b      	ldr	r3, [r3, #24]
 8003966:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800396a:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800396c:	2400      	movs	r4, #0
    __HAL_RCC_TIM1_CLK_ENABLE();
 800396e:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003970:	9407      	str	r4, [sp, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8003972:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003974:	a905      	add	r1, sp, #20
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8003976:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003978:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 800397a:	9309      	str	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800397c:	9408      	str	r4, [sp, #32]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800397e:	f7fd f9e3 	bl	8000d48 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 8003982:	4622      	mov	r2, r4
 8003984:	4621      	mov	r1, r4
 8003986:	2018      	movs	r0, #24
 8003988:	f7fd f952 	bl	8000c30 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 800398c:	2018      	movs	r0, #24
 800398e:	f7fd f983 	bl	8000c98 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8003992:	201b      	movs	r0, #27
 8003994:	4622      	mov	r2, r4
 8003996:	4621      	mov	r1, r4
 8003998:	f7fd f94a 	bl	8000c30 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 800399c:	201b      	movs	r0, #27
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM15;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

    /* TIM15 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 800399e:	f7fd f97b 	bl	8000c98 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 80039a2:	e00c      	b.n	80039be <HAL_TIM_PWM_MspInit+0x72>
  else if(htim_pwm->Instance==TIM3)
 80039a4:	4a3e      	ldr	r2, [pc, #248]	; (8003aa0 <HAL_TIM_PWM_MspInit+0x154>)
 80039a6:	4293      	cmp	r3, r2
 80039a8:	d10b      	bne.n	80039c2 <HAL_TIM_PWM_MspInit+0x76>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80039aa:	4b3b      	ldr	r3, [pc, #236]	; (8003a98 <HAL_TIM_PWM_MspInit+0x14c>)
 80039ac:	69da      	ldr	r2, [r3, #28]
 80039ae:	f042 0202 	orr.w	r2, r2, #2
 80039b2:	61da      	str	r2, [r3, #28]
 80039b4:	69db      	ldr	r3, [r3, #28]
 80039b6:	f003 0302 	and.w	r3, r3, #2
 80039ba:	9302      	str	r3, [sp, #8]
 80039bc:	9b02      	ldr	r3, [sp, #8]
}
 80039be:	b00a      	add	sp, #40	; 0x28
 80039c0:	bd10      	pop	{r4, pc}
  else if(htim_pwm->Instance==TIM4)
 80039c2:	4a38      	ldr	r2, [pc, #224]	; (8003aa4 <HAL_TIM_PWM_MspInit+0x158>)
 80039c4:	4293      	cmp	r3, r2
 80039c6:	d10a      	bne.n	80039de <HAL_TIM_PWM_MspInit+0x92>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80039c8:	4b33      	ldr	r3, [pc, #204]	; (8003a98 <HAL_TIM_PWM_MspInit+0x14c>)
 80039ca:	69da      	ldr	r2, [r3, #28]
 80039cc:	f042 0204 	orr.w	r2, r2, #4
 80039d0:	61da      	str	r2, [r3, #28]
 80039d2:	69db      	ldr	r3, [r3, #28]
 80039d4:	f003 0304 	and.w	r3, r3, #4
 80039d8:	9305      	str	r3, [sp, #20]
 80039da:	9b05      	ldr	r3, [sp, #20]
 80039dc:	e7ef      	b.n	80039be <HAL_TIM_PWM_MspInit+0x72>
  else if(htim_pwm->Instance==TIM8)
 80039de:	4a32      	ldr	r2, [pc, #200]	; (8003aa8 <HAL_TIM_PWM_MspInit+0x15c>)
 80039e0:	4293      	cmp	r3, r2
 80039e2:	d135      	bne.n	8003a50 <HAL_TIM_PWM_MspInit+0x104>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80039e4:	4b2c      	ldr	r3, [pc, #176]	; (8003a98 <HAL_TIM_PWM_MspInit+0x14c>)
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80039e6:	482d      	ldr	r0, [pc, #180]	; (8003a9c <HAL_TIM_PWM_MspInit+0x150>)
    __HAL_RCC_TIM8_CLK_ENABLE();
 80039e8:	699a      	ldr	r2, [r3, #24]
 80039ea:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80039ee:	619a      	str	r2, [r3, #24]
 80039f0:	699b      	ldr	r3, [r3, #24]
 80039f2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80039f6:	9303      	str	r3, [sp, #12]
 80039f8:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80039fa:	2380      	movs	r3, #128	; 0x80
 80039fc:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039fe:	2302      	movs	r3, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a00:	2400      	movs	r4, #0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a02:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003a04:	a905      	add	r1, sp, #20
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 8003a06:	2304      	movs	r3, #4
 8003a08:	9309      	str	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a0a:	9407      	str	r4, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a0c:	9408      	str	r4, [sp, #32]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003a0e:	f7fd f99b 	bl	8000d48 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM8_BRK_IRQn, 0, 0);
 8003a12:	4622      	mov	r2, r4
 8003a14:	4621      	mov	r1, r4
 8003a16:	202b      	movs	r0, #43	; 0x2b
 8003a18:	f7fd f90a 	bl	8000c30 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_IRQn);
 8003a1c:	202b      	movs	r0, #43	; 0x2b
 8003a1e:	f7fd f93b 	bl	8000c98 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_UP_IRQn, 0, 0);
 8003a22:	4622      	mov	r2, r4
 8003a24:	4621      	mov	r1, r4
 8003a26:	202c      	movs	r0, #44	; 0x2c
 8003a28:	f7fd f902 	bl	8000c30 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_IRQn);
 8003a2c:	202c      	movs	r0, #44	; 0x2c
 8003a2e:	f7fd f933 	bl	8000c98 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_TRG_COM_IRQn, 0, 0);
 8003a32:	4622      	mov	r2, r4
 8003a34:	4621      	mov	r1, r4
 8003a36:	202d      	movs	r0, #45	; 0x2d
 8003a38:	f7fd f8fa 	bl	8000c30 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_IRQn);
 8003a3c:	202d      	movs	r0, #45	; 0x2d
 8003a3e:	f7fd f92b 	bl	8000c98 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_CC_IRQn, 0, 0);
 8003a42:	202e      	movs	r0, #46	; 0x2e
 8003a44:	4622      	mov	r2, r4
 8003a46:	4621      	mov	r1, r4
 8003a48:	f7fd f8f2 	bl	8000c30 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_CC_IRQn);
 8003a4c:	202e      	movs	r0, #46	; 0x2e
 8003a4e:	e7a6      	b.n	800399e <HAL_TIM_PWM_MspInit+0x52>
  else if(htim_pwm->Instance==TIM15)
 8003a50:	4a16      	ldr	r2, [pc, #88]	; (8003aac <HAL_TIM_PWM_MspInit+0x160>)
 8003a52:	4293      	cmp	r3, r2
 8003a54:	d1b3      	bne.n	80039be <HAL_TIM_PWM_MspInit+0x72>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8003a56:	4b10      	ldr	r3, [pc, #64]	; (8003a98 <HAL_TIM_PWM_MspInit+0x14c>)
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003a58:	4815      	ldr	r0, [pc, #84]	; (8003ab0 <HAL_TIM_PWM_MspInit+0x164>)
    __HAL_RCC_TIM15_CLK_ENABLE();
 8003a5a:	699a      	ldr	r2, [r3, #24]
 8003a5c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8003a60:	619a      	str	r2, [r3, #24]
 8003a62:	699b      	ldr	r3, [r3, #24]
 8003a64:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a68:	9304      	str	r3, [sp, #16]
 8003a6a:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8003a6c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003a70:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a72:	2302      	movs	r3, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a74:	2400      	movs	r4, #0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a76:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003a78:	a905      	add	r1, sp, #20
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM15;
 8003a7a:	2301      	movs	r3, #1
 8003a7c:	9309      	str	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a7e:	9407      	str	r4, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a80:	9408      	str	r4, [sp, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003a82:	f7fd f961 	bl	8000d48 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 8003a86:	2018      	movs	r0, #24
 8003a88:	4622      	mov	r2, r4
 8003a8a:	4621      	mov	r1, r4
 8003a8c:	f7fd f8d0 	bl	8000c30 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8003a90:	2018      	movs	r0, #24
 8003a92:	e784      	b.n	800399e <HAL_TIM_PWM_MspInit+0x52>
 8003a94:	40012c00 	.word	0x40012c00
 8003a98:	40021000 	.word	0x40021000
 8003a9c:	48000800 	.word	0x48000800
 8003aa0:	40000400 	.word	0x40000400
 8003aa4:	40000800 	.word	0x40000800
 8003aa8:	40013400 	.word	0x40013400
 8003aac:	40014000 	.word	0x40014000
 8003ab0:	48000400 	.word	0x48000400

08003ab4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003ab4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(htim->Instance==TIM1)
 8003ab6:	6803      	ldr	r3, [r0, #0]
 8003ab8:	4a21      	ldr	r2, [pc, #132]	; (8003b40 <HAL_TIM_MspPostInit+0x8c>)
 8003aba:	4293      	cmp	r3, r2
 8003abc:	d10e      	bne.n	8003adc <HAL_TIM_MspPostInit+0x28>

  /* USER CODE END TIM1_MspPostInit 0 */
    /**TIM1 GPIO Configuration    
    PC0     ------> TIM1_CH1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003abe:	2301      	movs	r3, #1
    PC8     ------> TIM3_CH3
    PC9     ------> TIM3_CH4 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ac0:	2200      	movs	r2, #0
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003ac2:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ac4:	2302      	movs	r3, #2
 8003ac6:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ac8:	9203      	str	r2, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003aca:	9204      	str	r2, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003acc:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003ace:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Pin = GPIO_PIN_6;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003ad0:	481c      	ldr	r0, [pc, #112]	; (8003b44 <HAL_TIM_MspPostInit+0x90>)
    GPIO_InitStruct.Pin = GPIO_PIN_14;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM15;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003ad2:	f7fd f939 	bl	8000d48 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 8003ad6:	b007      	add	sp, #28
 8003ad8:	f85d fb04 	ldr.w	pc, [sp], #4
  else if(htim->Instance==TIM3)
 8003adc:	4a1a      	ldr	r2, [pc, #104]	; (8003b48 <HAL_TIM_MspPostInit+0x94>)
 8003ade:	4293      	cmp	r3, r2
 8003ae0:	d102      	bne.n	8003ae8 <HAL_TIM_MspPostInit+0x34>
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003ae2:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003ae6:	e7eb      	b.n	8003ac0 <HAL_TIM_MspPostInit+0xc>
  else if(htim->Instance==TIM4)
 8003ae8:	4a18      	ldr	r2, [pc, #96]	; (8003b4c <HAL_TIM_MspPostInit+0x98>)
 8003aea:	4293      	cmp	r3, r2
 8003aec:	d10b      	bne.n	8003b06 <HAL_TIM_MspPostInit+0x52>
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003aee:	f44f 7340 	mov.w	r3, #768	; 0x300
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003af2:	2200      	movs	r2, #0
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003af4:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003af6:	2302      	movs	r3, #2
 8003af8:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003afa:	9203      	str	r2, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003afc:	9204      	str	r2, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM15;
 8003afe:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003b00:	a901      	add	r1, sp, #4
 8003b02:	4813      	ldr	r0, [pc, #76]	; (8003b50 <HAL_TIM_MspPostInit+0x9c>)
 8003b04:	e7e5      	b.n	8003ad2 <HAL_TIM_MspPostInit+0x1e>
  else if(htim->Instance==TIM8)
 8003b06:	4a13      	ldr	r2, [pc, #76]	; (8003b54 <HAL_TIM_MspPostInit+0xa0>)
 8003b08:	4293      	cmp	r3, r2
 8003b0a:	d10b      	bne.n	8003b24 <HAL_TIM_MspPostInit+0x70>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8003b0c:	2340      	movs	r3, #64	; 0x40
 8003b0e:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b10:	2302      	movs	r3, #2
 8003b12:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b14:	2300      	movs	r3, #0
 8003b16:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b18:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 8003b1a:	2304      	movs	r3, #4
 8003b1c:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003b1e:	eb0d 0103 	add.w	r1, sp, r3
 8003b22:	e7d5      	b.n	8003ad0 <HAL_TIM_MspPostInit+0x1c>
  else if(htim->Instance==TIM15)
 8003b24:	4a0c      	ldr	r2, [pc, #48]	; (8003b58 <HAL_TIM_MspPostInit+0xa4>)
 8003b26:	4293      	cmp	r3, r2
 8003b28:	d1d5      	bne.n	8003ad6 <HAL_TIM_MspPostInit+0x22>
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8003b2a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003b2e:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b30:	2302      	movs	r3, #2
 8003b32:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b34:	2300      	movs	r3, #0
 8003b36:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b38:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM15;
 8003b3a:	2301      	movs	r3, #1
 8003b3c:	e7df      	b.n	8003afe <HAL_TIM_MspPostInit+0x4a>
 8003b3e:	bf00      	nop
 8003b40:	40012c00 	.word	0x40012c00
 8003b44:	48000800 	.word	0x48000800
 8003b48:	40000400 	.word	0x40000400
 8003b4c:	40000800 	.word	0x40000800
 8003b50:	48000400 	.word	0x48000400
 8003b54:	40013400 	.word	0x40013400
 8003b58:	40014000 	.word	0x40014000

08003b5c <HAL_UART_MspInit>:
  }

}

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003b5c:	b510      	push	{r4, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==UART4)
 8003b5e:	6803      	ldr	r3, [r0, #0]
 8003b60:	4a24      	ldr	r2, [pc, #144]	; (8003bf4 <HAL_UART_MspInit+0x98>)
 8003b62:	4293      	cmp	r3, r2
{
 8003b64:	b088      	sub	sp, #32
  if(huart->Instance==UART4)
 8003b66:	d122      	bne.n	8003bae <HAL_UART_MspInit+0x52>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8003b68:	4b23      	ldr	r3, [pc, #140]	; (8003bf8 <HAL_UART_MspInit+0x9c>)
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF5_UART4;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003b6a:	4824      	ldr	r0, [pc, #144]	; (8003bfc <HAL_UART_MspInit+0xa0>)
    __HAL_RCC_UART4_CLK_ENABLE();
 8003b6c:	69da      	ldr	r2, [r3, #28]
 8003b6e:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8003b72:	61da      	str	r2, [r3, #28]
 8003b74:	69db      	ldr	r3, [r3, #28]
 8003b76:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003b7a:	9301      	str	r3, [sp, #4]
 8003b7c:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8003b7e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8003b82:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b84:	2302      	movs	r3, #2
 8003b86:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003b88:	2303      	movs	r3, #3
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b8a:	2400      	movs	r4, #0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003b8c:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003b8e:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF5_UART4;
 8003b90:	2305      	movs	r3, #5
 8003b92:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b94:	9405      	str	r4, [sp, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003b96:	f7fd f8d7 	bl	8000d48 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8003b9a:	2034      	movs	r0, #52	; 0x34
 8003b9c:	4622      	mov	r2, r4
 8003b9e:	4621      	mov	r1, r4
 8003ba0:	f7fd f846 	bl	8000c30 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8003ba4:	2034      	movs	r0, #52	; 0x34
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003ba6:	f7fd f877 	bl	8000c98 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8003baa:	b008      	add	sp, #32
 8003bac:	bd10      	pop	{r4, pc}
  else if(huart->Instance==USART2)
 8003bae:	4a14      	ldr	r2, [pc, #80]	; (8003c00 <HAL_UART_MspInit+0xa4>)
 8003bb0:	4293      	cmp	r3, r2
 8003bb2:	d1fa      	bne.n	8003baa <HAL_UART_MspInit+0x4e>
    __HAL_RCC_USART2_CLK_ENABLE();
 8003bb4:	4b10      	ldr	r3, [pc, #64]	; (8003bf8 <HAL_UART_MspInit+0x9c>)
 8003bb6:	69da      	ldr	r2, [r3, #28]
 8003bb8:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8003bbc:	61da      	str	r2, [r3, #28]
 8003bbe:	69db      	ldr	r3, [r3, #28]
 8003bc0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bc4:	9302      	str	r3, [sp, #8]
 8003bc6:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8003bc8:	230c      	movs	r3, #12
 8003bca:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003bcc:	2302      	movs	r3, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bce:	2400      	movs	r4, #0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003bd0:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003bd2:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003bd4:	2307      	movs	r3, #7
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003bd6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003bda:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bdc:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003bde:	9406      	str	r4, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003be0:	f7fd f8b2 	bl	8000d48 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8003be4:	2026      	movs	r0, #38	; 0x26
 8003be6:	4622      	mov	r2, r4
 8003be8:	4621      	mov	r1, r4
 8003bea:	f7fd f821 	bl	8000c30 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003bee:	2026      	movs	r0, #38	; 0x26
 8003bf0:	e7d9      	b.n	8003ba6 <HAL_UART_MspInit+0x4a>
 8003bf2:	bf00      	nop
 8003bf4:	40004c00 	.word	0x40004c00
 8003bf8:	40021000 	.word	0x40021000
 8003bfc:	48000800 	.word	0x48000800
 8003c00:	40004400 	.word	0x40004400

08003c04 <SVC_Handler>:
 8003c04:	4770      	bx	lr

08003c06 <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 8003c06:	4770      	bx	lr

08003c08 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8003c08:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003c0a:	f7fc ffe1 	bl	8000bd0 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003c0e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_SYSTICK_IRQHandler();
 8003c12:	f7fd b870 	b.w	8000cf6 <HAL_SYSTICK_IRQHandler>
	...

08003c18 <TIM1_BRK_TIM15_IRQHandler>:

/**
* @brief This function handles TIM1 break and TIM15 interrupts.
*/
void TIM1_BRK_TIM15_IRQHandler(void)
{
 8003c18:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003c1a:	4804      	ldr	r0, [pc, #16]	; (8003c2c <TIM1_BRK_TIM15_IRQHandler+0x14>)
 8003c1c:	f7fd fe59 	bl	80018d2 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim15);
 8003c20:	4803      	ldr	r0, [pc, #12]	; (8003c30 <TIM1_BRK_TIM15_IRQHandler+0x18>)
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 8003c22:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_TIM_IRQHandler(&htim15);
 8003c26:	f7fd be54 	b.w	80018d2 <HAL_TIM_IRQHandler>
 8003c2a:	bf00      	nop
 8003c2c:	200001f4 	.word	0x200001f4
 8003c30:	20000174 	.word	0x20000174

08003c34 <TIM1_CC_IRQHandler>:
void TIM1_CC_IRQHandler(void)
{
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003c34:	4801      	ldr	r0, [pc, #4]	; (8003c3c <TIM1_CC_IRQHandler+0x8>)
 8003c36:	f7fd be4c 	b.w	80018d2 <HAL_TIM_IRQHandler>
 8003c3a:	bf00      	nop
 8003c3c:	200001f4 	.word	0x200001f4

08003c40 <USART2_IRQHandler>:
void USART2_IRQHandler(void)
{
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003c40:	4801      	ldr	r0, [pc, #4]	; (8003c48 <USART2_IRQHandler+0x8>)
 8003c42:	f7fe be5f 	b.w	8002904 <HAL_UART_IRQHandler>
 8003c46:	bf00      	nop
 8003c48:	200002a4 	.word	0x200002a4

08003c4c <TIM8_CC_IRQHandler>:
void TIM8_CC_IRQHandler(void)
{
  /* USER CODE BEGIN TIM8_CC_IRQn 0 */

  /* USER CODE END TIM8_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8003c4c:	4801      	ldr	r0, [pc, #4]	; (8003c54 <TIM8_CC_IRQHandler+0x8>)
 8003c4e:	f7fd be40 	b.w	80018d2 <HAL_TIM_IRQHandler>
 8003c52:	bf00      	nop
 8003c54:	200000f4 	.word	0x200000f4

08003c58 <TIM8_TRG_COM_IRQHandler>:
 8003c58:	f7ff bff8 	b.w	8003c4c <TIM8_CC_IRQHandler>

08003c5c <TIM8_UP_IRQHandler>:
 8003c5c:	f7ff bff6 	b.w	8003c4c <TIM8_CC_IRQHandler>

08003c60 <TIM8_BRK_IRQHandler>:
 8003c60:	f7ff bff4 	b.w	8003c4c <TIM8_CC_IRQHandler>

08003c64 <UART4_IRQHandler>:
void UART4_IRQHandler(void)
{
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8003c64:	4801      	ldr	r0, [pc, #4]	; (8003c6c <UART4_IRQHandler+0x8>)
 8003c66:	f7fe be4d 	b.w	8002904 <HAL_UART_IRQHandler>
 8003c6a:	bf00      	nop
 8003c6c:	20000234 	.word	0x20000234

08003c70 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003c70:	4915      	ldr	r1, [pc, #84]	; (8003cc8 <SystemInit+0x58>)
 8003c72:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8003c76:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003c7a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8003c7e:	4b13      	ldr	r3, [pc, #76]	; (8003ccc <SystemInit+0x5c>)
 8003c80:	681a      	ldr	r2, [r3, #0]
 8003c82:	f042 0201 	orr.w	r2, r2, #1
 8003c86:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00CU;
 8003c88:	6858      	ldr	r0, [r3, #4]
 8003c8a:	4a11      	ldr	r2, [pc, #68]	; (8003cd0 <SystemInit+0x60>)
 8003c8c:	4002      	ands	r2, r0
 8003c8e:	605a      	str	r2, [r3, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8003c90:	681a      	ldr	r2, [r3, #0]
 8003c92:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8003c96:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003c9a:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8003c9c:	681a      	ldr	r2, [r3, #0]
 8003c9e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003ca2:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8003ca4:	685a      	ldr	r2, [r3, #4]
 8003ca6:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8003caa:	605a      	str	r2, [r3, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= 0xFFFFFFF0U;
 8003cac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003cae:	f022 020f 	bic.w	r2, r2, #15
 8003cb2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= 0xFF00FCCCU;
 8003cb4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003cb6:	4a07      	ldr	r2, [pc, #28]	; (8003cd4 <SystemInit+0x64>)
 8003cb8:	4002      	ands	r2, r0
 8003cba:	631a      	str	r2, [r3, #48]	; 0x30

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 8003cbc:	2200      	movs	r2, #0
 8003cbe:	609a      	str	r2, [r3, #8]

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003cc0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003cc4:	608b      	str	r3, [r1, #8]
 8003cc6:	4770      	bx	lr
 8003cc8:	e000ed00 	.word	0xe000ed00
 8003ccc:	40021000 	.word	0x40021000
 8003cd0:	f87fc00c 	.word	0xf87fc00c
 8003cd4:	ff00fccc 	.word	0xff00fccc

08003cd8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8003cd8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003d10 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8003cdc:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8003cde:	e003      	b.n	8003ce8 <LoopCopyDataInit>

08003ce0 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8003ce0:	4b0c      	ldr	r3, [pc, #48]	; (8003d14 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8003ce2:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8003ce4:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8003ce6:	3104      	adds	r1, #4

08003ce8 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8003ce8:	480b      	ldr	r0, [pc, #44]	; (8003d18 <LoopForever+0xa>)
	ldr	r3, =_edata
 8003cea:	4b0c      	ldr	r3, [pc, #48]	; (8003d1c <LoopForever+0xe>)
	adds	r2, r0, r1
 8003cec:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8003cee:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8003cf0:	d3f6      	bcc.n	8003ce0 <CopyDataInit>
	ldr	r2, =_sbss
 8003cf2:	4a0b      	ldr	r2, [pc, #44]	; (8003d20 <LoopForever+0x12>)
	b	LoopFillZerobss
 8003cf4:	e002      	b.n	8003cfc <LoopFillZerobss>

08003cf6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8003cf6:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8003cf8:	f842 3b04 	str.w	r3, [r2], #4

08003cfc <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8003cfc:	4b09      	ldr	r3, [pc, #36]	; (8003d24 <LoopForever+0x16>)
	cmp	r2, r3
 8003cfe:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8003d00:	d3f9      	bcc.n	8003cf6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8003d02:	f7ff ffb5 	bl	8003c70 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003d06:	f000 f811 	bl	8003d2c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003d0a:	f7ff f857 	bl	8002dbc <main>

08003d0e <LoopForever>:

LoopForever:
    b LoopForever
 8003d0e:	e7fe      	b.n	8003d0e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8003d10:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 8003d14:	08004724 	.word	0x08004724
	ldr	r0, =_sdata
 8003d18:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8003d1c:	200000c8 	.word	0x200000c8
	ldr	r2, =_sbss
 8003d20:	200000c8 	.word	0x200000c8
	ldr	r3, = _ebss
 8003d24:	20000318 	.word	0x20000318

08003d28 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003d28:	e7fe      	b.n	8003d28 <ADC1_2_IRQHandler>
	...

08003d2c <__libc_init_array>:
 8003d2c:	b570      	push	{r4, r5, r6, lr}
 8003d2e:	4e0d      	ldr	r6, [pc, #52]	; (8003d64 <__libc_init_array+0x38>)
 8003d30:	4c0d      	ldr	r4, [pc, #52]	; (8003d68 <__libc_init_array+0x3c>)
 8003d32:	1ba4      	subs	r4, r4, r6
 8003d34:	10a4      	asrs	r4, r4, #2
 8003d36:	2500      	movs	r5, #0
 8003d38:	42a5      	cmp	r5, r4
 8003d3a:	d109      	bne.n	8003d50 <__libc_init_array+0x24>
 8003d3c:	4e0b      	ldr	r6, [pc, #44]	; (8003d6c <__libc_init_array+0x40>)
 8003d3e:	4c0c      	ldr	r4, [pc, #48]	; (8003d70 <__libc_init_array+0x44>)
 8003d40:	f000 fc4c 	bl	80045dc <_init>
 8003d44:	1ba4      	subs	r4, r4, r6
 8003d46:	10a4      	asrs	r4, r4, #2
 8003d48:	2500      	movs	r5, #0
 8003d4a:	42a5      	cmp	r5, r4
 8003d4c:	d105      	bne.n	8003d5a <__libc_init_array+0x2e>
 8003d4e:	bd70      	pop	{r4, r5, r6, pc}
 8003d50:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003d54:	4798      	blx	r3
 8003d56:	3501      	adds	r5, #1
 8003d58:	e7ee      	b.n	8003d38 <__libc_init_array+0xc>
 8003d5a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003d5e:	4798      	blx	r3
 8003d60:	3501      	adds	r5, #1
 8003d62:	e7f2      	b.n	8003d4a <__libc_init_array+0x1e>
 8003d64:	0800471c 	.word	0x0800471c
 8003d68:	0800471c 	.word	0x0800471c
 8003d6c:	0800471c 	.word	0x0800471c
 8003d70:	08004720 	.word	0x08004720

08003d74 <memcpy>:
 8003d74:	b510      	push	{r4, lr}
 8003d76:	1e43      	subs	r3, r0, #1
 8003d78:	440a      	add	r2, r1
 8003d7a:	4291      	cmp	r1, r2
 8003d7c:	d100      	bne.n	8003d80 <memcpy+0xc>
 8003d7e:	bd10      	pop	{r4, pc}
 8003d80:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003d84:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003d88:	e7f7      	b.n	8003d7a <memcpy+0x6>
	...

08003d8c <siprintf>:
 8003d8c:	b40e      	push	{r1, r2, r3}
 8003d8e:	b500      	push	{lr}
 8003d90:	b09c      	sub	sp, #112	; 0x70
 8003d92:	f44f 7102 	mov.w	r1, #520	; 0x208
 8003d96:	ab1d      	add	r3, sp, #116	; 0x74
 8003d98:	f8ad 1014 	strh.w	r1, [sp, #20]
 8003d9c:	9002      	str	r0, [sp, #8]
 8003d9e:	9006      	str	r0, [sp, #24]
 8003da0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003da4:	480a      	ldr	r0, [pc, #40]	; (8003dd0 <siprintf+0x44>)
 8003da6:	9104      	str	r1, [sp, #16]
 8003da8:	9107      	str	r1, [sp, #28]
 8003daa:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003dae:	f853 2b04 	ldr.w	r2, [r3], #4
 8003db2:	f8ad 1016 	strh.w	r1, [sp, #22]
 8003db6:	6800      	ldr	r0, [r0, #0]
 8003db8:	9301      	str	r3, [sp, #4]
 8003dba:	a902      	add	r1, sp, #8
 8003dbc:	f000 f86e 	bl	8003e9c <_svfiprintf_r>
 8003dc0:	9b02      	ldr	r3, [sp, #8]
 8003dc2:	2200      	movs	r2, #0
 8003dc4:	701a      	strb	r2, [r3, #0]
 8003dc6:	b01c      	add	sp, #112	; 0x70
 8003dc8:	f85d eb04 	ldr.w	lr, [sp], #4
 8003dcc:	b003      	add	sp, #12
 8003dce:	4770      	bx	lr
 8003dd0:	20000064 	.word	0x20000064

08003dd4 <strcpy>:
 8003dd4:	4603      	mov	r3, r0
 8003dd6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003dda:	f803 2b01 	strb.w	r2, [r3], #1
 8003dde:	2a00      	cmp	r2, #0
 8003de0:	d1f9      	bne.n	8003dd6 <strcpy+0x2>
 8003de2:	4770      	bx	lr

08003de4 <__ssputs_r>:
 8003de4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003de8:	688e      	ldr	r6, [r1, #8]
 8003dea:	429e      	cmp	r6, r3
 8003dec:	4682      	mov	sl, r0
 8003dee:	460c      	mov	r4, r1
 8003df0:	4691      	mov	r9, r2
 8003df2:	4698      	mov	r8, r3
 8003df4:	d835      	bhi.n	8003e62 <__ssputs_r+0x7e>
 8003df6:	898a      	ldrh	r2, [r1, #12]
 8003df8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003dfc:	d031      	beq.n	8003e62 <__ssputs_r+0x7e>
 8003dfe:	6825      	ldr	r5, [r4, #0]
 8003e00:	6909      	ldr	r1, [r1, #16]
 8003e02:	1a6f      	subs	r7, r5, r1
 8003e04:	6965      	ldr	r5, [r4, #20]
 8003e06:	2302      	movs	r3, #2
 8003e08:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003e0c:	fb95 f5f3 	sdiv	r5, r5, r3
 8003e10:	f108 0301 	add.w	r3, r8, #1
 8003e14:	443b      	add	r3, r7
 8003e16:	429d      	cmp	r5, r3
 8003e18:	bf38      	it	cc
 8003e1a:	461d      	movcc	r5, r3
 8003e1c:	0553      	lsls	r3, r2, #21
 8003e1e:	d531      	bpl.n	8003e84 <__ssputs_r+0xa0>
 8003e20:	4629      	mov	r1, r5
 8003e22:	f000 fb2d 	bl	8004480 <_malloc_r>
 8003e26:	4606      	mov	r6, r0
 8003e28:	b950      	cbnz	r0, 8003e40 <__ssputs_r+0x5c>
 8003e2a:	230c      	movs	r3, #12
 8003e2c:	f8ca 3000 	str.w	r3, [sl]
 8003e30:	89a3      	ldrh	r3, [r4, #12]
 8003e32:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003e36:	81a3      	strh	r3, [r4, #12]
 8003e38:	f04f 30ff 	mov.w	r0, #4294967295
 8003e3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003e40:	463a      	mov	r2, r7
 8003e42:	6921      	ldr	r1, [r4, #16]
 8003e44:	f7ff ff96 	bl	8003d74 <memcpy>
 8003e48:	89a3      	ldrh	r3, [r4, #12]
 8003e4a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003e4e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e52:	81a3      	strh	r3, [r4, #12]
 8003e54:	6126      	str	r6, [r4, #16]
 8003e56:	6165      	str	r5, [r4, #20]
 8003e58:	443e      	add	r6, r7
 8003e5a:	1bed      	subs	r5, r5, r7
 8003e5c:	6026      	str	r6, [r4, #0]
 8003e5e:	60a5      	str	r5, [r4, #8]
 8003e60:	4646      	mov	r6, r8
 8003e62:	4546      	cmp	r6, r8
 8003e64:	bf28      	it	cs
 8003e66:	4646      	movcs	r6, r8
 8003e68:	4632      	mov	r2, r6
 8003e6a:	4649      	mov	r1, r9
 8003e6c:	6820      	ldr	r0, [r4, #0]
 8003e6e:	f000 fa9f 	bl	80043b0 <memmove>
 8003e72:	68a3      	ldr	r3, [r4, #8]
 8003e74:	1b9b      	subs	r3, r3, r6
 8003e76:	60a3      	str	r3, [r4, #8]
 8003e78:	6823      	ldr	r3, [r4, #0]
 8003e7a:	441e      	add	r6, r3
 8003e7c:	6026      	str	r6, [r4, #0]
 8003e7e:	2000      	movs	r0, #0
 8003e80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003e84:	462a      	mov	r2, r5
 8003e86:	f000 fb59 	bl	800453c <_realloc_r>
 8003e8a:	4606      	mov	r6, r0
 8003e8c:	2800      	cmp	r0, #0
 8003e8e:	d1e1      	bne.n	8003e54 <__ssputs_r+0x70>
 8003e90:	6921      	ldr	r1, [r4, #16]
 8003e92:	4650      	mov	r0, sl
 8003e94:	f000 faa6 	bl	80043e4 <_free_r>
 8003e98:	e7c7      	b.n	8003e2a <__ssputs_r+0x46>
	...

08003e9c <_svfiprintf_r>:
 8003e9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003ea0:	b09d      	sub	sp, #116	; 0x74
 8003ea2:	4680      	mov	r8, r0
 8003ea4:	9303      	str	r3, [sp, #12]
 8003ea6:	898b      	ldrh	r3, [r1, #12]
 8003ea8:	061c      	lsls	r4, r3, #24
 8003eaa:	460d      	mov	r5, r1
 8003eac:	4616      	mov	r6, r2
 8003eae:	d50f      	bpl.n	8003ed0 <_svfiprintf_r+0x34>
 8003eb0:	690b      	ldr	r3, [r1, #16]
 8003eb2:	b96b      	cbnz	r3, 8003ed0 <_svfiprintf_r+0x34>
 8003eb4:	2140      	movs	r1, #64	; 0x40
 8003eb6:	f000 fae3 	bl	8004480 <_malloc_r>
 8003eba:	6028      	str	r0, [r5, #0]
 8003ebc:	6128      	str	r0, [r5, #16]
 8003ebe:	b928      	cbnz	r0, 8003ecc <_svfiprintf_r+0x30>
 8003ec0:	230c      	movs	r3, #12
 8003ec2:	f8c8 3000 	str.w	r3, [r8]
 8003ec6:	f04f 30ff 	mov.w	r0, #4294967295
 8003eca:	e0c5      	b.n	8004058 <_svfiprintf_r+0x1bc>
 8003ecc:	2340      	movs	r3, #64	; 0x40
 8003ece:	616b      	str	r3, [r5, #20]
 8003ed0:	2300      	movs	r3, #0
 8003ed2:	9309      	str	r3, [sp, #36]	; 0x24
 8003ed4:	2320      	movs	r3, #32
 8003ed6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003eda:	2330      	movs	r3, #48	; 0x30
 8003edc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003ee0:	f04f 0b01 	mov.w	fp, #1
 8003ee4:	4637      	mov	r7, r6
 8003ee6:	463c      	mov	r4, r7
 8003ee8:	f814 3b01 	ldrb.w	r3, [r4], #1
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d13c      	bne.n	8003f6a <_svfiprintf_r+0xce>
 8003ef0:	ebb7 0a06 	subs.w	sl, r7, r6
 8003ef4:	d00b      	beq.n	8003f0e <_svfiprintf_r+0x72>
 8003ef6:	4653      	mov	r3, sl
 8003ef8:	4632      	mov	r2, r6
 8003efa:	4629      	mov	r1, r5
 8003efc:	4640      	mov	r0, r8
 8003efe:	f7ff ff71 	bl	8003de4 <__ssputs_r>
 8003f02:	3001      	adds	r0, #1
 8003f04:	f000 80a3 	beq.w	800404e <_svfiprintf_r+0x1b2>
 8003f08:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003f0a:	4453      	add	r3, sl
 8003f0c:	9309      	str	r3, [sp, #36]	; 0x24
 8003f0e:	783b      	ldrb	r3, [r7, #0]
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	f000 809c 	beq.w	800404e <_svfiprintf_r+0x1b2>
 8003f16:	2300      	movs	r3, #0
 8003f18:	f04f 32ff 	mov.w	r2, #4294967295
 8003f1c:	9304      	str	r3, [sp, #16]
 8003f1e:	9307      	str	r3, [sp, #28]
 8003f20:	9205      	str	r2, [sp, #20]
 8003f22:	9306      	str	r3, [sp, #24]
 8003f24:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003f28:	931a      	str	r3, [sp, #104]	; 0x68
 8003f2a:	2205      	movs	r2, #5
 8003f2c:	7821      	ldrb	r1, [r4, #0]
 8003f2e:	4850      	ldr	r0, [pc, #320]	; (8004070 <_svfiprintf_r+0x1d4>)
 8003f30:	f7fc f95e 	bl	80001f0 <memchr>
 8003f34:	1c67      	adds	r7, r4, #1
 8003f36:	9b04      	ldr	r3, [sp, #16]
 8003f38:	b9d8      	cbnz	r0, 8003f72 <_svfiprintf_r+0xd6>
 8003f3a:	06d9      	lsls	r1, r3, #27
 8003f3c:	bf44      	itt	mi
 8003f3e:	2220      	movmi	r2, #32
 8003f40:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003f44:	071a      	lsls	r2, r3, #28
 8003f46:	bf44      	itt	mi
 8003f48:	222b      	movmi	r2, #43	; 0x2b
 8003f4a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003f4e:	7822      	ldrb	r2, [r4, #0]
 8003f50:	2a2a      	cmp	r2, #42	; 0x2a
 8003f52:	d016      	beq.n	8003f82 <_svfiprintf_r+0xe6>
 8003f54:	9a07      	ldr	r2, [sp, #28]
 8003f56:	2100      	movs	r1, #0
 8003f58:	200a      	movs	r0, #10
 8003f5a:	4627      	mov	r7, r4
 8003f5c:	3401      	adds	r4, #1
 8003f5e:	783b      	ldrb	r3, [r7, #0]
 8003f60:	3b30      	subs	r3, #48	; 0x30
 8003f62:	2b09      	cmp	r3, #9
 8003f64:	d951      	bls.n	800400a <_svfiprintf_r+0x16e>
 8003f66:	b1c9      	cbz	r1, 8003f9c <_svfiprintf_r+0x100>
 8003f68:	e011      	b.n	8003f8e <_svfiprintf_r+0xf2>
 8003f6a:	2b25      	cmp	r3, #37	; 0x25
 8003f6c:	d0c0      	beq.n	8003ef0 <_svfiprintf_r+0x54>
 8003f6e:	4627      	mov	r7, r4
 8003f70:	e7b9      	b.n	8003ee6 <_svfiprintf_r+0x4a>
 8003f72:	4a3f      	ldr	r2, [pc, #252]	; (8004070 <_svfiprintf_r+0x1d4>)
 8003f74:	1a80      	subs	r0, r0, r2
 8003f76:	fa0b f000 	lsl.w	r0, fp, r0
 8003f7a:	4318      	orrs	r0, r3
 8003f7c:	9004      	str	r0, [sp, #16]
 8003f7e:	463c      	mov	r4, r7
 8003f80:	e7d3      	b.n	8003f2a <_svfiprintf_r+0x8e>
 8003f82:	9a03      	ldr	r2, [sp, #12]
 8003f84:	1d11      	adds	r1, r2, #4
 8003f86:	6812      	ldr	r2, [r2, #0]
 8003f88:	9103      	str	r1, [sp, #12]
 8003f8a:	2a00      	cmp	r2, #0
 8003f8c:	db01      	blt.n	8003f92 <_svfiprintf_r+0xf6>
 8003f8e:	9207      	str	r2, [sp, #28]
 8003f90:	e004      	b.n	8003f9c <_svfiprintf_r+0x100>
 8003f92:	4252      	negs	r2, r2
 8003f94:	f043 0302 	orr.w	r3, r3, #2
 8003f98:	9207      	str	r2, [sp, #28]
 8003f9a:	9304      	str	r3, [sp, #16]
 8003f9c:	783b      	ldrb	r3, [r7, #0]
 8003f9e:	2b2e      	cmp	r3, #46	; 0x2e
 8003fa0:	d10e      	bne.n	8003fc0 <_svfiprintf_r+0x124>
 8003fa2:	787b      	ldrb	r3, [r7, #1]
 8003fa4:	2b2a      	cmp	r3, #42	; 0x2a
 8003fa6:	f107 0101 	add.w	r1, r7, #1
 8003faa:	d132      	bne.n	8004012 <_svfiprintf_r+0x176>
 8003fac:	9b03      	ldr	r3, [sp, #12]
 8003fae:	1d1a      	adds	r2, r3, #4
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	9203      	str	r2, [sp, #12]
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	bfb8      	it	lt
 8003fb8:	f04f 33ff 	movlt.w	r3, #4294967295
 8003fbc:	3702      	adds	r7, #2
 8003fbe:	9305      	str	r3, [sp, #20]
 8003fc0:	4c2c      	ldr	r4, [pc, #176]	; (8004074 <_svfiprintf_r+0x1d8>)
 8003fc2:	7839      	ldrb	r1, [r7, #0]
 8003fc4:	2203      	movs	r2, #3
 8003fc6:	4620      	mov	r0, r4
 8003fc8:	f7fc f912 	bl	80001f0 <memchr>
 8003fcc:	b138      	cbz	r0, 8003fde <_svfiprintf_r+0x142>
 8003fce:	2340      	movs	r3, #64	; 0x40
 8003fd0:	1b00      	subs	r0, r0, r4
 8003fd2:	fa03 f000 	lsl.w	r0, r3, r0
 8003fd6:	9b04      	ldr	r3, [sp, #16]
 8003fd8:	4303      	orrs	r3, r0
 8003fda:	9304      	str	r3, [sp, #16]
 8003fdc:	3701      	adds	r7, #1
 8003fde:	7839      	ldrb	r1, [r7, #0]
 8003fe0:	4825      	ldr	r0, [pc, #148]	; (8004078 <_svfiprintf_r+0x1dc>)
 8003fe2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003fe6:	2206      	movs	r2, #6
 8003fe8:	1c7e      	adds	r6, r7, #1
 8003fea:	f7fc f901 	bl	80001f0 <memchr>
 8003fee:	2800      	cmp	r0, #0
 8003ff0:	d035      	beq.n	800405e <_svfiprintf_r+0x1c2>
 8003ff2:	4b22      	ldr	r3, [pc, #136]	; (800407c <_svfiprintf_r+0x1e0>)
 8003ff4:	b9fb      	cbnz	r3, 8004036 <_svfiprintf_r+0x19a>
 8003ff6:	9b03      	ldr	r3, [sp, #12]
 8003ff8:	3307      	adds	r3, #7
 8003ffa:	f023 0307 	bic.w	r3, r3, #7
 8003ffe:	3308      	adds	r3, #8
 8004000:	9303      	str	r3, [sp, #12]
 8004002:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004004:	444b      	add	r3, r9
 8004006:	9309      	str	r3, [sp, #36]	; 0x24
 8004008:	e76c      	b.n	8003ee4 <_svfiprintf_r+0x48>
 800400a:	fb00 3202 	mla	r2, r0, r2, r3
 800400e:	2101      	movs	r1, #1
 8004010:	e7a3      	b.n	8003f5a <_svfiprintf_r+0xbe>
 8004012:	2300      	movs	r3, #0
 8004014:	9305      	str	r3, [sp, #20]
 8004016:	4618      	mov	r0, r3
 8004018:	240a      	movs	r4, #10
 800401a:	460f      	mov	r7, r1
 800401c:	3101      	adds	r1, #1
 800401e:	783a      	ldrb	r2, [r7, #0]
 8004020:	3a30      	subs	r2, #48	; 0x30
 8004022:	2a09      	cmp	r2, #9
 8004024:	d903      	bls.n	800402e <_svfiprintf_r+0x192>
 8004026:	2b00      	cmp	r3, #0
 8004028:	d0ca      	beq.n	8003fc0 <_svfiprintf_r+0x124>
 800402a:	9005      	str	r0, [sp, #20]
 800402c:	e7c8      	b.n	8003fc0 <_svfiprintf_r+0x124>
 800402e:	fb04 2000 	mla	r0, r4, r0, r2
 8004032:	2301      	movs	r3, #1
 8004034:	e7f1      	b.n	800401a <_svfiprintf_r+0x17e>
 8004036:	ab03      	add	r3, sp, #12
 8004038:	9300      	str	r3, [sp, #0]
 800403a:	462a      	mov	r2, r5
 800403c:	4b10      	ldr	r3, [pc, #64]	; (8004080 <_svfiprintf_r+0x1e4>)
 800403e:	a904      	add	r1, sp, #16
 8004040:	4640      	mov	r0, r8
 8004042:	f3af 8000 	nop.w
 8004046:	f1b0 3fff 	cmp.w	r0, #4294967295
 800404a:	4681      	mov	r9, r0
 800404c:	d1d9      	bne.n	8004002 <_svfiprintf_r+0x166>
 800404e:	89ab      	ldrh	r3, [r5, #12]
 8004050:	065b      	lsls	r3, r3, #25
 8004052:	f53f af38 	bmi.w	8003ec6 <_svfiprintf_r+0x2a>
 8004056:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004058:	b01d      	add	sp, #116	; 0x74
 800405a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800405e:	ab03      	add	r3, sp, #12
 8004060:	9300      	str	r3, [sp, #0]
 8004062:	462a      	mov	r2, r5
 8004064:	4b06      	ldr	r3, [pc, #24]	; (8004080 <_svfiprintf_r+0x1e4>)
 8004066:	a904      	add	r1, sp, #16
 8004068:	4640      	mov	r0, r8
 800406a:	f000 f881 	bl	8004170 <_printf_i>
 800406e:	e7ea      	b.n	8004046 <_svfiprintf_r+0x1aa>
 8004070:	080046e8 	.word	0x080046e8
 8004074:	080046ee 	.word	0x080046ee
 8004078:	080046f2 	.word	0x080046f2
 800407c:	00000000 	.word	0x00000000
 8004080:	08003de5 	.word	0x08003de5

08004084 <_printf_common>:
 8004084:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004088:	4691      	mov	r9, r2
 800408a:	461f      	mov	r7, r3
 800408c:	688a      	ldr	r2, [r1, #8]
 800408e:	690b      	ldr	r3, [r1, #16]
 8004090:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004094:	4293      	cmp	r3, r2
 8004096:	bfb8      	it	lt
 8004098:	4613      	movlt	r3, r2
 800409a:	f8c9 3000 	str.w	r3, [r9]
 800409e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80040a2:	4606      	mov	r6, r0
 80040a4:	460c      	mov	r4, r1
 80040a6:	b112      	cbz	r2, 80040ae <_printf_common+0x2a>
 80040a8:	3301      	adds	r3, #1
 80040aa:	f8c9 3000 	str.w	r3, [r9]
 80040ae:	6823      	ldr	r3, [r4, #0]
 80040b0:	0699      	lsls	r1, r3, #26
 80040b2:	bf42      	ittt	mi
 80040b4:	f8d9 3000 	ldrmi.w	r3, [r9]
 80040b8:	3302      	addmi	r3, #2
 80040ba:	f8c9 3000 	strmi.w	r3, [r9]
 80040be:	6825      	ldr	r5, [r4, #0]
 80040c0:	f015 0506 	ands.w	r5, r5, #6
 80040c4:	d107      	bne.n	80040d6 <_printf_common+0x52>
 80040c6:	f104 0a19 	add.w	sl, r4, #25
 80040ca:	68e3      	ldr	r3, [r4, #12]
 80040cc:	f8d9 2000 	ldr.w	r2, [r9]
 80040d0:	1a9b      	subs	r3, r3, r2
 80040d2:	429d      	cmp	r5, r3
 80040d4:	db29      	blt.n	800412a <_printf_common+0xa6>
 80040d6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80040da:	6822      	ldr	r2, [r4, #0]
 80040dc:	3300      	adds	r3, #0
 80040de:	bf18      	it	ne
 80040e0:	2301      	movne	r3, #1
 80040e2:	0692      	lsls	r2, r2, #26
 80040e4:	d42e      	bmi.n	8004144 <_printf_common+0xc0>
 80040e6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80040ea:	4639      	mov	r1, r7
 80040ec:	4630      	mov	r0, r6
 80040ee:	47c0      	blx	r8
 80040f0:	3001      	adds	r0, #1
 80040f2:	d021      	beq.n	8004138 <_printf_common+0xb4>
 80040f4:	6823      	ldr	r3, [r4, #0]
 80040f6:	68e5      	ldr	r5, [r4, #12]
 80040f8:	f8d9 2000 	ldr.w	r2, [r9]
 80040fc:	f003 0306 	and.w	r3, r3, #6
 8004100:	2b04      	cmp	r3, #4
 8004102:	bf08      	it	eq
 8004104:	1aad      	subeq	r5, r5, r2
 8004106:	68a3      	ldr	r3, [r4, #8]
 8004108:	6922      	ldr	r2, [r4, #16]
 800410a:	bf0c      	ite	eq
 800410c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004110:	2500      	movne	r5, #0
 8004112:	4293      	cmp	r3, r2
 8004114:	bfc4      	itt	gt
 8004116:	1a9b      	subgt	r3, r3, r2
 8004118:	18ed      	addgt	r5, r5, r3
 800411a:	f04f 0900 	mov.w	r9, #0
 800411e:	341a      	adds	r4, #26
 8004120:	454d      	cmp	r5, r9
 8004122:	d11b      	bne.n	800415c <_printf_common+0xd8>
 8004124:	2000      	movs	r0, #0
 8004126:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800412a:	2301      	movs	r3, #1
 800412c:	4652      	mov	r2, sl
 800412e:	4639      	mov	r1, r7
 8004130:	4630      	mov	r0, r6
 8004132:	47c0      	blx	r8
 8004134:	3001      	adds	r0, #1
 8004136:	d103      	bne.n	8004140 <_printf_common+0xbc>
 8004138:	f04f 30ff 	mov.w	r0, #4294967295
 800413c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004140:	3501      	adds	r5, #1
 8004142:	e7c2      	b.n	80040ca <_printf_common+0x46>
 8004144:	18e1      	adds	r1, r4, r3
 8004146:	1c5a      	adds	r2, r3, #1
 8004148:	2030      	movs	r0, #48	; 0x30
 800414a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800414e:	4422      	add	r2, r4
 8004150:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004154:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004158:	3302      	adds	r3, #2
 800415a:	e7c4      	b.n	80040e6 <_printf_common+0x62>
 800415c:	2301      	movs	r3, #1
 800415e:	4622      	mov	r2, r4
 8004160:	4639      	mov	r1, r7
 8004162:	4630      	mov	r0, r6
 8004164:	47c0      	blx	r8
 8004166:	3001      	adds	r0, #1
 8004168:	d0e6      	beq.n	8004138 <_printf_common+0xb4>
 800416a:	f109 0901 	add.w	r9, r9, #1
 800416e:	e7d7      	b.n	8004120 <_printf_common+0x9c>

08004170 <_printf_i>:
 8004170:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004174:	4617      	mov	r7, r2
 8004176:	7e0a      	ldrb	r2, [r1, #24]
 8004178:	b085      	sub	sp, #20
 800417a:	2a6e      	cmp	r2, #110	; 0x6e
 800417c:	4698      	mov	r8, r3
 800417e:	4606      	mov	r6, r0
 8004180:	460c      	mov	r4, r1
 8004182:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004184:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 8004188:	f000 80bc 	beq.w	8004304 <_printf_i+0x194>
 800418c:	d81a      	bhi.n	80041c4 <_printf_i+0x54>
 800418e:	2a63      	cmp	r2, #99	; 0x63
 8004190:	d02e      	beq.n	80041f0 <_printf_i+0x80>
 8004192:	d80a      	bhi.n	80041aa <_printf_i+0x3a>
 8004194:	2a00      	cmp	r2, #0
 8004196:	f000 80c8 	beq.w	800432a <_printf_i+0x1ba>
 800419a:	2a58      	cmp	r2, #88	; 0x58
 800419c:	f000 808a 	beq.w	80042b4 <_printf_i+0x144>
 80041a0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80041a4:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 80041a8:	e02a      	b.n	8004200 <_printf_i+0x90>
 80041aa:	2a64      	cmp	r2, #100	; 0x64
 80041ac:	d001      	beq.n	80041b2 <_printf_i+0x42>
 80041ae:	2a69      	cmp	r2, #105	; 0x69
 80041b0:	d1f6      	bne.n	80041a0 <_printf_i+0x30>
 80041b2:	6821      	ldr	r1, [r4, #0]
 80041b4:	681a      	ldr	r2, [r3, #0]
 80041b6:	f011 0f80 	tst.w	r1, #128	; 0x80
 80041ba:	d023      	beq.n	8004204 <_printf_i+0x94>
 80041bc:	1d11      	adds	r1, r2, #4
 80041be:	6019      	str	r1, [r3, #0]
 80041c0:	6813      	ldr	r3, [r2, #0]
 80041c2:	e027      	b.n	8004214 <_printf_i+0xa4>
 80041c4:	2a73      	cmp	r2, #115	; 0x73
 80041c6:	f000 80b4 	beq.w	8004332 <_printf_i+0x1c2>
 80041ca:	d808      	bhi.n	80041de <_printf_i+0x6e>
 80041cc:	2a6f      	cmp	r2, #111	; 0x6f
 80041ce:	d02a      	beq.n	8004226 <_printf_i+0xb6>
 80041d0:	2a70      	cmp	r2, #112	; 0x70
 80041d2:	d1e5      	bne.n	80041a0 <_printf_i+0x30>
 80041d4:	680a      	ldr	r2, [r1, #0]
 80041d6:	f042 0220 	orr.w	r2, r2, #32
 80041da:	600a      	str	r2, [r1, #0]
 80041dc:	e003      	b.n	80041e6 <_printf_i+0x76>
 80041de:	2a75      	cmp	r2, #117	; 0x75
 80041e0:	d021      	beq.n	8004226 <_printf_i+0xb6>
 80041e2:	2a78      	cmp	r2, #120	; 0x78
 80041e4:	d1dc      	bne.n	80041a0 <_printf_i+0x30>
 80041e6:	2278      	movs	r2, #120	; 0x78
 80041e8:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 80041ec:	496e      	ldr	r1, [pc, #440]	; (80043a8 <_printf_i+0x238>)
 80041ee:	e064      	b.n	80042ba <_printf_i+0x14a>
 80041f0:	681a      	ldr	r2, [r3, #0]
 80041f2:	f101 0542 	add.w	r5, r1, #66	; 0x42
 80041f6:	1d11      	adds	r1, r2, #4
 80041f8:	6019      	str	r1, [r3, #0]
 80041fa:	6813      	ldr	r3, [r2, #0]
 80041fc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004200:	2301      	movs	r3, #1
 8004202:	e0a3      	b.n	800434c <_printf_i+0x1dc>
 8004204:	f011 0f40 	tst.w	r1, #64	; 0x40
 8004208:	f102 0104 	add.w	r1, r2, #4
 800420c:	6019      	str	r1, [r3, #0]
 800420e:	d0d7      	beq.n	80041c0 <_printf_i+0x50>
 8004210:	f9b2 3000 	ldrsh.w	r3, [r2]
 8004214:	2b00      	cmp	r3, #0
 8004216:	da03      	bge.n	8004220 <_printf_i+0xb0>
 8004218:	222d      	movs	r2, #45	; 0x2d
 800421a:	425b      	negs	r3, r3
 800421c:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8004220:	4962      	ldr	r1, [pc, #392]	; (80043ac <_printf_i+0x23c>)
 8004222:	220a      	movs	r2, #10
 8004224:	e017      	b.n	8004256 <_printf_i+0xe6>
 8004226:	6820      	ldr	r0, [r4, #0]
 8004228:	6819      	ldr	r1, [r3, #0]
 800422a:	f010 0f80 	tst.w	r0, #128	; 0x80
 800422e:	d003      	beq.n	8004238 <_printf_i+0xc8>
 8004230:	1d08      	adds	r0, r1, #4
 8004232:	6018      	str	r0, [r3, #0]
 8004234:	680b      	ldr	r3, [r1, #0]
 8004236:	e006      	b.n	8004246 <_printf_i+0xd6>
 8004238:	f010 0f40 	tst.w	r0, #64	; 0x40
 800423c:	f101 0004 	add.w	r0, r1, #4
 8004240:	6018      	str	r0, [r3, #0]
 8004242:	d0f7      	beq.n	8004234 <_printf_i+0xc4>
 8004244:	880b      	ldrh	r3, [r1, #0]
 8004246:	4959      	ldr	r1, [pc, #356]	; (80043ac <_printf_i+0x23c>)
 8004248:	2a6f      	cmp	r2, #111	; 0x6f
 800424a:	bf14      	ite	ne
 800424c:	220a      	movne	r2, #10
 800424e:	2208      	moveq	r2, #8
 8004250:	2000      	movs	r0, #0
 8004252:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 8004256:	6865      	ldr	r5, [r4, #4]
 8004258:	60a5      	str	r5, [r4, #8]
 800425a:	2d00      	cmp	r5, #0
 800425c:	f2c0 809c 	blt.w	8004398 <_printf_i+0x228>
 8004260:	6820      	ldr	r0, [r4, #0]
 8004262:	f020 0004 	bic.w	r0, r0, #4
 8004266:	6020      	str	r0, [r4, #0]
 8004268:	2b00      	cmp	r3, #0
 800426a:	d13f      	bne.n	80042ec <_printf_i+0x17c>
 800426c:	2d00      	cmp	r5, #0
 800426e:	f040 8095 	bne.w	800439c <_printf_i+0x22c>
 8004272:	4675      	mov	r5, lr
 8004274:	2a08      	cmp	r2, #8
 8004276:	d10b      	bne.n	8004290 <_printf_i+0x120>
 8004278:	6823      	ldr	r3, [r4, #0]
 800427a:	07da      	lsls	r2, r3, #31
 800427c:	d508      	bpl.n	8004290 <_printf_i+0x120>
 800427e:	6923      	ldr	r3, [r4, #16]
 8004280:	6862      	ldr	r2, [r4, #4]
 8004282:	429a      	cmp	r2, r3
 8004284:	bfde      	ittt	le
 8004286:	2330      	movle	r3, #48	; 0x30
 8004288:	f805 3c01 	strble.w	r3, [r5, #-1]
 800428c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004290:	ebae 0305 	sub.w	r3, lr, r5
 8004294:	6123      	str	r3, [r4, #16]
 8004296:	f8cd 8000 	str.w	r8, [sp]
 800429a:	463b      	mov	r3, r7
 800429c:	aa03      	add	r2, sp, #12
 800429e:	4621      	mov	r1, r4
 80042a0:	4630      	mov	r0, r6
 80042a2:	f7ff feef 	bl	8004084 <_printf_common>
 80042a6:	3001      	adds	r0, #1
 80042a8:	d155      	bne.n	8004356 <_printf_i+0x1e6>
 80042aa:	f04f 30ff 	mov.w	r0, #4294967295
 80042ae:	b005      	add	sp, #20
 80042b0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80042b4:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 80042b8:	493c      	ldr	r1, [pc, #240]	; (80043ac <_printf_i+0x23c>)
 80042ba:	6822      	ldr	r2, [r4, #0]
 80042bc:	6818      	ldr	r0, [r3, #0]
 80042be:	f012 0f80 	tst.w	r2, #128	; 0x80
 80042c2:	f100 0504 	add.w	r5, r0, #4
 80042c6:	601d      	str	r5, [r3, #0]
 80042c8:	d001      	beq.n	80042ce <_printf_i+0x15e>
 80042ca:	6803      	ldr	r3, [r0, #0]
 80042cc:	e002      	b.n	80042d4 <_printf_i+0x164>
 80042ce:	0655      	lsls	r5, r2, #25
 80042d0:	d5fb      	bpl.n	80042ca <_printf_i+0x15a>
 80042d2:	8803      	ldrh	r3, [r0, #0]
 80042d4:	07d0      	lsls	r0, r2, #31
 80042d6:	bf44      	itt	mi
 80042d8:	f042 0220 	orrmi.w	r2, r2, #32
 80042dc:	6022      	strmi	r2, [r4, #0]
 80042de:	b91b      	cbnz	r3, 80042e8 <_printf_i+0x178>
 80042e0:	6822      	ldr	r2, [r4, #0]
 80042e2:	f022 0220 	bic.w	r2, r2, #32
 80042e6:	6022      	str	r2, [r4, #0]
 80042e8:	2210      	movs	r2, #16
 80042ea:	e7b1      	b.n	8004250 <_printf_i+0xe0>
 80042ec:	4675      	mov	r5, lr
 80042ee:	fbb3 f0f2 	udiv	r0, r3, r2
 80042f2:	fb02 3310 	mls	r3, r2, r0, r3
 80042f6:	5ccb      	ldrb	r3, [r1, r3]
 80042f8:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80042fc:	4603      	mov	r3, r0
 80042fe:	2800      	cmp	r0, #0
 8004300:	d1f5      	bne.n	80042ee <_printf_i+0x17e>
 8004302:	e7b7      	b.n	8004274 <_printf_i+0x104>
 8004304:	6808      	ldr	r0, [r1, #0]
 8004306:	681a      	ldr	r2, [r3, #0]
 8004308:	6949      	ldr	r1, [r1, #20]
 800430a:	f010 0f80 	tst.w	r0, #128	; 0x80
 800430e:	d004      	beq.n	800431a <_printf_i+0x1aa>
 8004310:	1d10      	adds	r0, r2, #4
 8004312:	6018      	str	r0, [r3, #0]
 8004314:	6813      	ldr	r3, [r2, #0]
 8004316:	6019      	str	r1, [r3, #0]
 8004318:	e007      	b.n	800432a <_printf_i+0x1ba>
 800431a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800431e:	f102 0004 	add.w	r0, r2, #4
 8004322:	6018      	str	r0, [r3, #0]
 8004324:	6813      	ldr	r3, [r2, #0]
 8004326:	d0f6      	beq.n	8004316 <_printf_i+0x1a6>
 8004328:	8019      	strh	r1, [r3, #0]
 800432a:	2300      	movs	r3, #0
 800432c:	6123      	str	r3, [r4, #16]
 800432e:	4675      	mov	r5, lr
 8004330:	e7b1      	b.n	8004296 <_printf_i+0x126>
 8004332:	681a      	ldr	r2, [r3, #0]
 8004334:	1d11      	adds	r1, r2, #4
 8004336:	6019      	str	r1, [r3, #0]
 8004338:	6815      	ldr	r5, [r2, #0]
 800433a:	6862      	ldr	r2, [r4, #4]
 800433c:	2100      	movs	r1, #0
 800433e:	4628      	mov	r0, r5
 8004340:	f7fb ff56 	bl	80001f0 <memchr>
 8004344:	b108      	cbz	r0, 800434a <_printf_i+0x1da>
 8004346:	1b40      	subs	r0, r0, r5
 8004348:	6060      	str	r0, [r4, #4]
 800434a:	6863      	ldr	r3, [r4, #4]
 800434c:	6123      	str	r3, [r4, #16]
 800434e:	2300      	movs	r3, #0
 8004350:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004354:	e79f      	b.n	8004296 <_printf_i+0x126>
 8004356:	6923      	ldr	r3, [r4, #16]
 8004358:	462a      	mov	r2, r5
 800435a:	4639      	mov	r1, r7
 800435c:	4630      	mov	r0, r6
 800435e:	47c0      	blx	r8
 8004360:	3001      	adds	r0, #1
 8004362:	d0a2      	beq.n	80042aa <_printf_i+0x13a>
 8004364:	6823      	ldr	r3, [r4, #0]
 8004366:	079b      	lsls	r3, r3, #30
 8004368:	d507      	bpl.n	800437a <_printf_i+0x20a>
 800436a:	2500      	movs	r5, #0
 800436c:	f104 0919 	add.w	r9, r4, #25
 8004370:	68e3      	ldr	r3, [r4, #12]
 8004372:	9a03      	ldr	r2, [sp, #12]
 8004374:	1a9b      	subs	r3, r3, r2
 8004376:	429d      	cmp	r5, r3
 8004378:	db05      	blt.n	8004386 <_printf_i+0x216>
 800437a:	68e0      	ldr	r0, [r4, #12]
 800437c:	9b03      	ldr	r3, [sp, #12]
 800437e:	4298      	cmp	r0, r3
 8004380:	bfb8      	it	lt
 8004382:	4618      	movlt	r0, r3
 8004384:	e793      	b.n	80042ae <_printf_i+0x13e>
 8004386:	2301      	movs	r3, #1
 8004388:	464a      	mov	r2, r9
 800438a:	4639      	mov	r1, r7
 800438c:	4630      	mov	r0, r6
 800438e:	47c0      	blx	r8
 8004390:	3001      	adds	r0, #1
 8004392:	d08a      	beq.n	80042aa <_printf_i+0x13a>
 8004394:	3501      	adds	r5, #1
 8004396:	e7eb      	b.n	8004370 <_printf_i+0x200>
 8004398:	2b00      	cmp	r3, #0
 800439a:	d1a7      	bne.n	80042ec <_printf_i+0x17c>
 800439c:	780b      	ldrb	r3, [r1, #0]
 800439e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80043a2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80043a6:	e765      	b.n	8004274 <_printf_i+0x104>
 80043a8:	0800470a 	.word	0x0800470a
 80043ac:	080046f9 	.word	0x080046f9

080043b0 <memmove>:
 80043b0:	4288      	cmp	r0, r1
 80043b2:	b510      	push	{r4, lr}
 80043b4:	eb01 0302 	add.w	r3, r1, r2
 80043b8:	d803      	bhi.n	80043c2 <memmove+0x12>
 80043ba:	1e42      	subs	r2, r0, #1
 80043bc:	4299      	cmp	r1, r3
 80043be:	d10c      	bne.n	80043da <memmove+0x2a>
 80043c0:	bd10      	pop	{r4, pc}
 80043c2:	4298      	cmp	r0, r3
 80043c4:	d2f9      	bcs.n	80043ba <memmove+0xa>
 80043c6:	1881      	adds	r1, r0, r2
 80043c8:	1ad2      	subs	r2, r2, r3
 80043ca:	42d3      	cmn	r3, r2
 80043cc:	d100      	bne.n	80043d0 <memmove+0x20>
 80043ce:	bd10      	pop	{r4, pc}
 80043d0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80043d4:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80043d8:	e7f7      	b.n	80043ca <memmove+0x1a>
 80043da:	f811 4b01 	ldrb.w	r4, [r1], #1
 80043de:	f802 4f01 	strb.w	r4, [r2, #1]!
 80043e2:	e7eb      	b.n	80043bc <memmove+0xc>

080043e4 <_free_r>:
 80043e4:	b538      	push	{r3, r4, r5, lr}
 80043e6:	4605      	mov	r5, r0
 80043e8:	2900      	cmp	r1, #0
 80043ea:	d045      	beq.n	8004478 <_free_r+0x94>
 80043ec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80043f0:	1f0c      	subs	r4, r1, #4
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	bfb8      	it	lt
 80043f6:	18e4      	addlt	r4, r4, r3
 80043f8:	f000 f8d6 	bl	80045a8 <__malloc_lock>
 80043fc:	4a1f      	ldr	r2, [pc, #124]	; (800447c <_free_r+0x98>)
 80043fe:	6813      	ldr	r3, [r2, #0]
 8004400:	4610      	mov	r0, r2
 8004402:	b933      	cbnz	r3, 8004412 <_free_r+0x2e>
 8004404:	6063      	str	r3, [r4, #4]
 8004406:	6014      	str	r4, [r2, #0]
 8004408:	4628      	mov	r0, r5
 800440a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800440e:	f000 b8cc 	b.w	80045aa <__malloc_unlock>
 8004412:	42a3      	cmp	r3, r4
 8004414:	d90c      	bls.n	8004430 <_free_r+0x4c>
 8004416:	6821      	ldr	r1, [r4, #0]
 8004418:	1862      	adds	r2, r4, r1
 800441a:	4293      	cmp	r3, r2
 800441c:	bf04      	itt	eq
 800441e:	681a      	ldreq	r2, [r3, #0]
 8004420:	685b      	ldreq	r3, [r3, #4]
 8004422:	6063      	str	r3, [r4, #4]
 8004424:	bf04      	itt	eq
 8004426:	1852      	addeq	r2, r2, r1
 8004428:	6022      	streq	r2, [r4, #0]
 800442a:	6004      	str	r4, [r0, #0]
 800442c:	e7ec      	b.n	8004408 <_free_r+0x24>
 800442e:	4613      	mov	r3, r2
 8004430:	685a      	ldr	r2, [r3, #4]
 8004432:	b10a      	cbz	r2, 8004438 <_free_r+0x54>
 8004434:	42a2      	cmp	r2, r4
 8004436:	d9fa      	bls.n	800442e <_free_r+0x4a>
 8004438:	6819      	ldr	r1, [r3, #0]
 800443a:	1858      	adds	r0, r3, r1
 800443c:	42a0      	cmp	r0, r4
 800443e:	d10b      	bne.n	8004458 <_free_r+0x74>
 8004440:	6820      	ldr	r0, [r4, #0]
 8004442:	4401      	add	r1, r0
 8004444:	1858      	adds	r0, r3, r1
 8004446:	4282      	cmp	r2, r0
 8004448:	6019      	str	r1, [r3, #0]
 800444a:	d1dd      	bne.n	8004408 <_free_r+0x24>
 800444c:	6810      	ldr	r0, [r2, #0]
 800444e:	6852      	ldr	r2, [r2, #4]
 8004450:	605a      	str	r2, [r3, #4]
 8004452:	4401      	add	r1, r0
 8004454:	6019      	str	r1, [r3, #0]
 8004456:	e7d7      	b.n	8004408 <_free_r+0x24>
 8004458:	d902      	bls.n	8004460 <_free_r+0x7c>
 800445a:	230c      	movs	r3, #12
 800445c:	602b      	str	r3, [r5, #0]
 800445e:	e7d3      	b.n	8004408 <_free_r+0x24>
 8004460:	6820      	ldr	r0, [r4, #0]
 8004462:	1821      	adds	r1, r4, r0
 8004464:	428a      	cmp	r2, r1
 8004466:	bf04      	itt	eq
 8004468:	6811      	ldreq	r1, [r2, #0]
 800446a:	6852      	ldreq	r2, [r2, #4]
 800446c:	6062      	str	r2, [r4, #4]
 800446e:	bf04      	itt	eq
 8004470:	1809      	addeq	r1, r1, r0
 8004472:	6021      	streq	r1, [r4, #0]
 8004474:	605c      	str	r4, [r3, #4]
 8004476:	e7c7      	b.n	8004408 <_free_r+0x24>
 8004478:	bd38      	pop	{r3, r4, r5, pc}
 800447a:	bf00      	nop
 800447c:	200000e4 	.word	0x200000e4

08004480 <_malloc_r>:
 8004480:	b570      	push	{r4, r5, r6, lr}
 8004482:	1ccd      	adds	r5, r1, #3
 8004484:	f025 0503 	bic.w	r5, r5, #3
 8004488:	3508      	adds	r5, #8
 800448a:	2d0c      	cmp	r5, #12
 800448c:	bf38      	it	cc
 800448e:	250c      	movcc	r5, #12
 8004490:	2d00      	cmp	r5, #0
 8004492:	4606      	mov	r6, r0
 8004494:	db01      	blt.n	800449a <_malloc_r+0x1a>
 8004496:	42a9      	cmp	r1, r5
 8004498:	d903      	bls.n	80044a2 <_malloc_r+0x22>
 800449a:	230c      	movs	r3, #12
 800449c:	6033      	str	r3, [r6, #0]
 800449e:	2000      	movs	r0, #0
 80044a0:	bd70      	pop	{r4, r5, r6, pc}
 80044a2:	f000 f881 	bl	80045a8 <__malloc_lock>
 80044a6:	4a23      	ldr	r2, [pc, #140]	; (8004534 <_malloc_r+0xb4>)
 80044a8:	6814      	ldr	r4, [r2, #0]
 80044aa:	4621      	mov	r1, r4
 80044ac:	b991      	cbnz	r1, 80044d4 <_malloc_r+0x54>
 80044ae:	4c22      	ldr	r4, [pc, #136]	; (8004538 <_malloc_r+0xb8>)
 80044b0:	6823      	ldr	r3, [r4, #0]
 80044b2:	b91b      	cbnz	r3, 80044bc <_malloc_r+0x3c>
 80044b4:	4630      	mov	r0, r6
 80044b6:	f000 f867 	bl	8004588 <_sbrk_r>
 80044ba:	6020      	str	r0, [r4, #0]
 80044bc:	4629      	mov	r1, r5
 80044be:	4630      	mov	r0, r6
 80044c0:	f000 f862 	bl	8004588 <_sbrk_r>
 80044c4:	1c43      	adds	r3, r0, #1
 80044c6:	d126      	bne.n	8004516 <_malloc_r+0x96>
 80044c8:	230c      	movs	r3, #12
 80044ca:	6033      	str	r3, [r6, #0]
 80044cc:	4630      	mov	r0, r6
 80044ce:	f000 f86c 	bl	80045aa <__malloc_unlock>
 80044d2:	e7e4      	b.n	800449e <_malloc_r+0x1e>
 80044d4:	680b      	ldr	r3, [r1, #0]
 80044d6:	1b5b      	subs	r3, r3, r5
 80044d8:	d41a      	bmi.n	8004510 <_malloc_r+0x90>
 80044da:	2b0b      	cmp	r3, #11
 80044dc:	d90f      	bls.n	80044fe <_malloc_r+0x7e>
 80044de:	600b      	str	r3, [r1, #0]
 80044e0:	50cd      	str	r5, [r1, r3]
 80044e2:	18cc      	adds	r4, r1, r3
 80044e4:	4630      	mov	r0, r6
 80044e6:	f000 f860 	bl	80045aa <__malloc_unlock>
 80044ea:	f104 000b 	add.w	r0, r4, #11
 80044ee:	1d23      	adds	r3, r4, #4
 80044f0:	f020 0007 	bic.w	r0, r0, #7
 80044f4:	1ac3      	subs	r3, r0, r3
 80044f6:	d01b      	beq.n	8004530 <_malloc_r+0xb0>
 80044f8:	425a      	negs	r2, r3
 80044fa:	50e2      	str	r2, [r4, r3]
 80044fc:	bd70      	pop	{r4, r5, r6, pc}
 80044fe:	428c      	cmp	r4, r1
 8004500:	bf0d      	iteet	eq
 8004502:	6863      	ldreq	r3, [r4, #4]
 8004504:	684b      	ldrne	r3, [r1, #4]
 8004506:	6063      	strne	r3, [r4, #4]
 8004508:	6013      	streq	r3, [r2, #0]
 800450a:	bf18      	it	ne
 800450c:	460c      	movne	r4, r1
 800450e:	e7e9      	b.n	80044e4 <_malloc_r+0x64>
 8004510:	460c      	mov	r4, r1
 8004512:	6849      	ldr	r1, [r1, #4]
 8004514:	e7ca      	b.n	80044ac <_malloc_r+0x2c>
 8004516:	1cc4      	adds	r4, r0, #3
 8004518:	f024 0403 	bic.w	r4, r4, #3
 800451c:	42a0      	cmp	r0, r4
 800451e:	d005      	beq.n	800452c <_malloc_r+0xac>
 8004520:	1a21      	subs	r1, r4, r0
 8004522:	4630      	mov	r0, r6
 8004524:	f000 f830 	bl	8004588 <_sbrk_r>
 8004528:	3001      	adds	r0, #1
 800452a:	d0cd      	beq.n	80044c8 <_malloc_r+0x48>
 800452c:	6025      	str	r5, [r4, #0]
 800452e:	e7d9      	b.n	80044e4 <_malloc_r+0x64>
 8004530:	bd70      	pop	{r4, r5, r6, pc}
 8004532:	bf00      	nop
 8004534:	200000e4 	.word	0x200000e4
 8004538:	200000e8 	.word	0x200000e8

0800453c <_realloc_r>:
 800453c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800453e:	4607      	mov	r7, r0
 8004540:	4614      	mov	r4, r2
 8004542:	460e      	mov	r6, r1
 8004544:	b921      	cbnz	r1, 8004550 <_realloc_r+0x14>
 8004546:	4611      	mov	r1, r2
 8004548:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800454c:	f7ff bf98 	b.w	8004480 <_malloc_r>
 8004550:	b922      	cbnz	r2, 800455c <_realloc_r+0x20>
 8004552:	f7ff ff47 	bl	80043e4 <_free_r>
 8004556:	4625      	mov	r5, r4
 8004558:	4628      	mov	r0, r5
 800455a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800455c:	f000 f826 	bl	80045ac <_malloc_usable_size_r>
 8004560:	4284      	cmp	r4, r0
 8004562:	d90f      	bls.n	8004584 <_realloc_r+0x48>
 8004564:	4621      	mov	r1, r4
 8004566:	4638      	mov	r0, r7
 8004568:	f7ff ff8a 	bl	8004480 <_malloc_r>
 800456c:	4605      	mov	r5, r0
 800456e:	2800      	cmp	r0, #0
 8004570:	d0f2      	beq.n	8004558 <_realloc_r+0x1c>
 8004572:	4631      	mov	r1, r6
 8004574:	4622      	mov	r2, r4
 8004576:	f7ff fbfd 	bl	8003d74 <memcpy>
 800457a:	4631      	mov	r1, r6
 800457c:	4638      	mov	r0, r7
 800457e:	f7ff ff31 	bl	80043e4 <_free_r>
 8004582:	e7e9      	b.n	8004558 <_realloc_r+0x1c>
 8004584:	4635      	mov	r5, r6
 8004586:	e7e7      	b.n	8004558 <_realloc_r+0x1c>

08004588 <_sbrk_r>:
 8004588:	b538      	push	{r3, r4, r5, lr}
 800458a:	4c06      	ldr	r4, [pc, #24]	; (80045a4 <_sbrk_r+0x1c>)
 800458c:	2300      	movs	r3, #0
 800458e:	4605      	mov	r5, r0
 8004590:	4608      	mov	r0, r1
 8004592:	6023      	str	r3, [r4, #0]
 8004594:	f000 f814 	bl	80045c0 <_sbrk>
 8004598:	1c43      	adds	r3, r0, #1
 800459a:	d102      	bne.n	80045a2 <_sbrk_r+0x1a>
 800459c:	6823      	ldr	r3, [r4, #0]
 800459e:	b103      	cbz	r3, 80045a2 <_sbrk_r+0x1a>
 80045a0:	602b      	str	r3, [r5, #0]
 80045a2:	bd38      	pop	{r3, r4, r5, pc}
 80045a4:	20000314 	.word	0x20000314

080045a8 <__malloc_lock>:
 80045a8:	4770      	bx	lr

080045aa <__malloc_unlock>:
 80045aa:	4770      	bx	lr

080045ac <_malloc_usable_size_r>:
 80045ac:	f851 0c04 	ldr.w	r0, [r1, #-4]
 80045b0:	2800      	cmp	r0, #0
 80045b2:	f1a0 0004 	sub.w	r0, r0, #4
 80045b6:	bfbc      	itt	lt
 80045b8:	580b      	ldrlt	r3, [r1, r0]
 80045ba:	18c0      	addlt	r0, r0, r3
 80045bc:	4770      	bx	lr
	...

080045c0 <_sbrk>:
 80045c0:	4b04      	ldr	r3, [pc, #16]	; (80045d4 <_sbrk+0x14>)
 80045c2:	6819      	ldr	r1, [r3, #0]
 80045c4:	4602      	mov	r2, r0
 80045c6:	b909      	cbnz	r1, 80045cc <_sbrk+0xc>
 80045c8:	4903      	ldr	r1, [pc, #12]	; (80045d8 <_sbrk+0x18>)
 80045ca:	6019      	str	r1, [r3, #0]
 80045cc:	6818      	ldr	r0, [r3, #0]
 80045ce:	4402      	add	r2, r0
 80045d0:	601a      	str	r2, [r3, #0]
 80045d2:	4770      	bx	lr
 80045d4:	200000ec 	.word	0x200000ec
 80045d8:	20000318 	.word	0x20000318

080045dc <_init>:
 80045dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045de:	bf00      	nop
 80045e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80045e2:	bc08      	pop	{r3}
 80045e4:	469e      	mov	lr, r3
 80045e6:	4770      	bx	lr

080045e8 <_fini>:
 80045e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045ea:	bf00      	nop
 80045ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80045ee:	bc08      	pop	{r3}
 80045f0:	469e      	mov	lr, r3
 80045f2:	4770      	bx	lr
